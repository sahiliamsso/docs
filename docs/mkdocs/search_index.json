{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Community Edition (CE) 3.0 Docs\n#\n\n\nIntroduction\n#\n\n\nThe Gluu Server is a free open source identity and access management \n(IAM) platform. The most common use case for the Gluu Server is Single \nSign-On (SSO). Other common use cases include mobile authentication, \nAPI access management, two-factor authentication, customer identity\nand access management (CIAM), and identity federation. \n\n\nThe Gluu Server is a container distribution composed of software written by Gluu and incorporated from other open source projects. Gluu\nprojects are frequently prefixed with our open source handle: \nox\n (e.g. oxAuth, oxTrust). Any code in the Gluu Server that we wrote is MIT license, and is available on \nGithub\n. \n\n\nSaaS, custom, open source and commercial software can be made more \nsecure by leveraging a central authentication and authorization service. \nBecause there are so many different kinds of apps, there is no way to \n\"top down\" implement proprietary security mechanisms. This is why\nopen standards are so important for IAM. \n\n\nWhile there are many open protocols for IAM, Gluu focuses on just a few. \nConsolidation saves money, and one-off integrations should be avoided. \nOur goal was to support the most widely adopted older protocols, and the \nmost promising new protocols. \n\n\nThe Gluu Server supports the following open web standards for \nauthentication, authorization, federated identity, and identity management:\n\n\n\n\nOAuth 2.0    \n\n\nSAML 2.0   \n\n\nOpenID Connect    \n\n\nUser Managed Access (UMA)    \n\n\nSimple Cloud Identity Management (SCIM)    \n\n\nFIDO Universal 2nd Factor (U2F)    \n\n\nLightweight Directory Access Protocol (LDAP)   \n\n\n\n\nIf this is your first exposure to the Gluu Server, welcome to the \ncommunity! We want to see the ecosystem flourish, and ultimately make \nthe Internet a safer, more privacy protected place. In order to do that, \nwe believe we need to keep the Gluu Server free so all kinds of \norganizations can use, contribute and benefit from the software.\n\n\nThese docs are not perfect! Please help us make them so by submitting\nany improvements to our \nDocumentation Github\n.\nIf you're a Github pro, submit a pull request. If not, just open an issue\non any typos, bugs, or improvements you'd like to see. We need your\nhelp... even if you're not a coder, you can contribute! \n\n\noxd Client Software\n#\n\n\nGluu offers commercial OAuth 2.0 client software called \noxd\n to make securing and integrating applications with the Gluu Server easier. Your application can use any client software that implements the open standards the Gluu Server supports, but you may want to consider using oxd for the following reasons:\n\n\n\n\noxd is super-easy to use; \n\n\nWe keep updating oxd to address the latest OAuth 2.0 security knowledge; \n\n\nWe can provide more complete end-to-end support if we know both the client and server software;\n\n\noxd subscriptions help support this project so you can see more enhancements faster; \n\n\nThere are oxd libraries for Php, Python, Java, Node, Ruby, C#, Perl and Go. If your application is programmed in another language, oxd has a simple JSON/REST API;\n\n\nThere are oxd plugins for many popular applications like: Wordpress, Drupal, Magento, OpenCart, SugarCRM, SuiteCRM, Roundcube, Shopify, and Kong. More are being added too. Next on the list are: MatterMost, RocketChat, NextCloud, and Liferay.\n\n\n\n\nRead the docs\n\n\nSupport\n#\n\n\nWe are committed to providing free community support! You can browse or register and post \nyour questions on \nGluu support\n. All community\nquestions are public, and we do our best to answer them in a timely \nmanner. \n\n\nPrivate support, guaranteed response times, and consultative \nsupport are available to organizations who purchase a support contract. For\nmore information, see \nour website\n.\n\n\nLicense\n#\n\n\nAll of Gluu's open source software is published under an\n\nMIT License\n. The licenses \nfor other components are listed below.\n\n\n\n\n\n\n\n\nComponent\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nShibboleth IDP\n\n\nApache2\n\n\n\n\n\n\nOpenLDAP\n\n\nOpenLDAP Public License\n\n\n\n\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\n\n\n\n\nOpenDJ\n\n\nCDDL\n\n\n\n\n\n\nUnboundID LDAP SDK\n\n\nUnboundID LDAP SDK Free Use License\n\n\n\n\n\n\nPassport-JS\n\n\nMIT License\n\n\n\n\n\n\nJetty / Apache HTTPD\n\n\nApache2",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-community-edition-ce-30-docs",
            "text": "",
            "title": "Gluu Server Community Edition (CE) 3.0 Docs"
        },
        {
            "location": "/#introduction",
            "text": "The Gluu Server is a free open source identity and access management \n(IAM) platform. The most common use case for the Gluu Server is Single \nSign-On (SSO). Other common use cases include mobile authentication, \nAPI access management, two-factor authentication, customer identity\nand access management (CIAM), and identity federation.   The Gluu Server is a container distribution composed of software written by Gluu and incorporated from other open source projects. Gluu\nprojects are frequently prefixed with our open source handle:  ox  (e.g. oxAuth, oxTrust). Any code in the Gluu Server that we wrote is MIT license, and is available on  Github .   SaaS, custom, open source and commercial software can be made more \nsecure by leveraging a central authentication and authorization service. \nBecause there are so many different kinds of apps, there is no way to \n\"top down\" implement proprietary security mechanisms. This is why\nopen standards are so important for IAM.   While there are many open protocols for IAM, Gluu focuses on just a few. \nConsolidation saves money, and one-off integrations should be avoided. \nOur goal was to support the most widely adopted older protocols, and the \nmost promising new protocols.   The Gluu Server supports the following open web standards for \nauthentication, authorization, federated identity, and identity management:   OAuth 2.0      SAML 2.0     OpenID Connect      User Managed Access (UMA)      Simple Cloud Identity Management (SCIM)      FIDO Universal 2nd Factor (U2F)      Lightweight Directory Access Protocol (LDAP)      If this is your first exposure to the Gluu Server, welcome to the \ncommunity! We want to see the ecosystem flourish, and ultimately make \nthe Internet a safer, more privacy protected place. In order to do that, \nwe believe we need to keep the Gluu Server free so all kinds of \norganizations can use, contribute and benefit from the software.  These docs are not perfect! Please help us make them so by submitting\nany improvements to our  Documentation Github .\nIf you're a Github pro, submit a pull request. If not, just open an issue\non any typos, bugs, or improvements you'd like to see. We need your\nhelp... even if you're not a coder, you can contribute!",
            "title": "Introduction"
        },
        {
            "location": "/#oxd-client-software",
            "text": "Gluu offers commercial OAuth 2.0 client software called  oxd  to make securing and integrating applications with the Gluu Server easier. Your application can use any client software that implements the open standards the Gluu Server supports, but you may want to consider using oxd for the following reasons:   oxd is super-easy to use;   We keep updating oxd to address the latest OAuth 2.0 security knowledge;   We can provide more complete end-to-end support if we know both the client and server software;  oxd subscriptions help support this project so you can see more enhancements faster;   There are oxd libraries for Php, Python, Java, Node, Ruby, C#, Perl and Go. If your application is programmed in another language, oxd has a simple JSON/REST API;  There are oxd plugins for many popular applications like: Wordpress, Drupal, Magento, OpenCart, SugarCRM, SuiteCRM, Roundcube, Shopify, and Kong. More are being added too. Next on the list are: MatterMost, RocketChat, NextCloud, and Liferay.   Read the docs",
            "title": "oxd Client Software"
        },
        {
            "location": "/#support",
            "text": "We are committed to providing free community support! You can browse or register and post \nyour questions on  Gluu support . All community\nquestions are public, and we do our best to answer them in a timely \nmanner.   Private support, guaranteed response times, and consultative \nsupport are available to organizations who purchase a support contract. For\nmore information, see  our website .",
            "title": "Support"
        },
        {
            "location": "/#license",
            "text": "All of Gluu's open source software is published under an MIT License . The licenses \nfor other components are listed below.     Component  License      Shibboleth IDP  Apache2    OpenLDAP  OpenLDAP Public License    Asimba  GNU APGL 3.0    OpenDJ  CDDL    UnboundID LDAP SDK  UnboundID LDAP SDK Free Use License    Passport-JS  MIT License    Jetty / Apache HTTPD  Apache2",
            "title": "License"
        },
        {
            "location": "/operation/intro/",
            "text": "What's new in Version 3?\n#\n\n\nWe've made some big changes to Gluu Sever 3.0 to make it more modern, \nfaster, and easier to manage. The following is an overview of changes.\n\n\nJetty replaces Tomcat as servlet container\n#\n\n\nHere are some of the reasons we made this change:\n\n\n\n\nMemory management: easier to allocate memory per app.\n\n\nRestart: Easier to restart individual components without affecting\n   others. For example, Asimba requires more restarts when certain\n   configuration is updated.\n\n\nLogs: \nwrapper.log\n was getting too busy. It's better to have\n   the top-level log smaller. See \nlogs management\n \n   for more informatoin.\n\n\nNetwork: oxAuth is Internet facing; oxTrust is an admin application\n   which may be internal facing only.\n\n\nDocker: Deploying each application in it's own servlet container \n   aligns with our strategy to deploy each application in its own \n   container.\n\n\n\n\nOpenLDAP replaces OpenDJ\n#\n\n\nThe Gluu Server uses LDAP for persistence. The Gluu Server will continue to support \nseveral LDAP servers (including OpenDJ), but will now ship with OpenLDAP. Below are a few\nreasons.\n\n\n\n\nOpenLDAP has a better license, and \nSymas\n (the company behind OpenLDAP),\n   has a clear commitment to free open source software.\n\n\nOpenLDAP's LMDB backend is super fast and crash-resistant. \n\n\nTired of fighting with Java garbage collection.\n\n\nAffordable support options\n from Symas.\n\n\nProxy Capabilities: using OpenLDAP Gold, which is a commercial \n   distribution from Symas, data can be organized into different replicated \n   topologies, and the proxy can be used to route operations. This strategy\n   can increase the write performance of the LDAP service. \n\n\n\n\nShibboleth IDP version 3\n#\n\n\n\n\nRe-architected to use Spring\n\n\nVersion 2.0 was end of life\n\n\nFor more information, see the \nRelease Notes\n\n\n\n\nNew Features\n#\n\n\n\n\nPassport.js makes it easy to offer your users social login at more than 300 websites and consumer IDPs. See the \nPassport\n docs for more information.\n\n\nOne-Time Password (OTP) authentication: You asked for it! Now it's easy to authenticate users with any standard HOTP or TOTP OATH \n   software, like \nGoogle Authenticator\n.\n\n\nCentralized logging--useful for clustered deployments.\n\n\nImproved audit logging capabilities for OAuth 2.0",
            "title": "Whats new in 3.0"
        },
        {
            "location": "/operation/intro/#whats-new-in-version-3",
            "text": "We've made some big changes to Gluu Sever 3.0 to make it more modern, \nfaster, and easier to manage. The following is an overview of changes.",
            "title": "What's new in Version 3?"
        },
        {
            "location": "/operation/intro/#jetty-replaces-tomcat-as-servlet-container",
            "text": "Here are some of the reasons we made this change:   Memory management: easier to allocate memory per app.  Restart: Easier to restart individual components without affecting\n   others. For example, Asimba requires more restarts when certain\n   configuration is updated.  Logs:  wrapper.log  was getting too busy. It's better to have\n   the top-level log smaller. See  logs management  \n   for more informatoin.  Network: oxAuth is Internet facing; oxTrust is an admin application\n   which may be internal facing only.  Docker: Deploying each application in it's own servlet container \n   aligns with our strategy to deploy each application in its own \n   container.",
            "title": "Jetty replaces Tomcat as servlet container"
        },
        {
            "location": "/operation/intro/#openldap-replaces-opendj",
            "text": "The Gluu Server uses LDAP for persistence. The Gluu Server will continue to support \nseveral LDAP servers (including OpenDJ), but will now ship with OpenLDAP. Below are a few\nreasons.   OpenLDAP has a better license, and  Symas  (the company behind OpenLDAP),\n   has a clear commitment to free open source software.  OpenLDAP's LMDB backend is super fast and crash-resistant.   Tired of fighting with Java garbage collection.  Affordable support options  from Symas.  Proxy Capabilities: using OpenLDAP Gold, which is a commercial \n   distribution from Symas, data can be organized into different replicated \n   topologies, and the proxy can be used to route operations. This strategy\n   can increase the write performance of the LDAP service.",
            "title": "OpenLDAP replaces OpenDJ"
        },
        {
            "location": "/operation/intro/#shibboleth-idp-version-3",
            "text": "Re-architected to use Spring  Version 2.0 was end of life  For more information, see the  Release Notes",
            "title": "Shibboleth IDP version 3"
        },
        {
            "location": "/operation/intro/#new-features",
            "text": "Passport.js makes it easy to offer your users social login at more than 300 websites and consumer IDPs. See the  Passport  docs for more information.  One-Time Password (OTP) authentication: You asked for it! Now it's easy to authenticate users with any standard HOTP or TOTP OATH \n   software, like  Google Authenticator .  Centralized logging--useful for clustered deployments.  Improved audit logging capabilities for OAuth 2.0",
            "title": "New Features"
        },
        {
            "location": "/installation-guide/",
            "text": "Preparing VM for Gluu Server Installation\n#\n\n\nOverview\n#\n\n\nThank you for your interest in the Gluu Server! This document will provide instructions for preparing your VM for a standard Gluu Server deployment. After your servers are ready move on to the \ninstallation instructions\n. Good luck with your deployment, and welcome to the community!\n\n\nMinimum Requirements\n#\n\n\nThe Gluu Server Community Edition (CE) needs to be deployed on a server or VM with the following \nminimum\n requirements. \n\n\n\n\n\n\n\n\nCPU Unit\n\n\nRAM\n\n\nDisk Space\n\n\nProcessor Type\n\n\n\n\n\n\n\n\n\n\n2\n\n\n4GB\n\n\n40GB\n\n\n64 Bit\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf you plan on installing more than the default components (i.e. oxAuth, oxTrust, and LDAP), we recommend that your server or VM have at least 8GB of RAM. \n\n\n\n\n\n\nWarning\n\n\nPlease only post installation issues to \nGluu Support\n if all the above requirements are met!\n\n\n\n\nPorts\n#\n\n\nThe following ports are open to the Internet by default.\n\n\n\n\n\n\n\n\nPort Number\n\n\nProtocol\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n80\n\n\ntcp\n\n\nForwards to 443\n\n\n\n\n\n\n443\n\n\ntcp\n\n\nApache HTTPD\n\n\n\n\n\n\n22\n\n\ntcp\n\n\nssh\n\n\n\n\n\n\n\n\nFile Descriptors\n#\n\n\nThe Gluu Server \nrequires\n setting the \nfile descriptors\n to 65k. \nFollow these steps or research how to do this on your Linux platform.\n\n\n\n\nAdd the following lines in the \n/etc/security/limits.conf\n file.\n\n\n\n\n* soft nofile 65536\n* hard nofile 262144\n\n\n\n\n\n\nAdd the following lines to \n/etc/pam.d/login\n\n\n\n\nsession required pam_limits.so\n\n\n\n\n\n\nIncrease the file descriptor limit to 65535. The system file limit \nis set in \n/proc/sys/fs/file-max\n.\n\n\n\n\n# echo 65535 > /proc/sys/fs/file-max\n\n\n\n\n\n\nUse the \nulimit\n command to set the file descriptor limit to the hard limit specified in \n/etc/security/limits.conf\n.\n\n\n\n\n# ulimit -n unlimited\n\n\n\n\n\n\nNote\n\n\nCentos by default will not accept more than the default maximum of 65535. You may get an error while performing the above command.\n\n\n\n\n\n\nRestart your system.     \n\n\n\n\nAmazon AWS\n#\n\n\nAmazon AWS instances provide a public and private IP address. While\nrunning the \n/install/community-edition-setup/setup.py\n script, use the\nPrivate IP address. Also, use a hostname other then the long default\nhostname that Amazon provides. Update your DNS or hosts files accordingly.\n\n\nMicrosoft Azure\n#\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. \n\n\nSetting up VM\n#\n\n\n\n\n\n\nLog into Windows Azure Administrative Panel\n\n\n\n\n\n\nClick on \nVirtual Machines\n tab, and click \nCreate a Virtual Machine\n link\n\n\n\n\n\n\nFrom the menu, choose \nCompute\n > \nVirtual Machine\n > \nFrom Gallery\n branch.\n\n\n\n\n\n\nChoose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.\n\n\n\n\n\n\nProvide a name for the VM in the \nVirtual Machine Name\n field and use \nStandard\n for \nTier\n.\n\n\n\n\n\n\nSelect a server with at least 4GB RAM in the \nSize\n dropdown menu.\n\n\n\n\n\n\nProvide a username/password to connect via ssh and upload ssh certificate. Click \nNext\n.\n\n\n\n\n\n\nCreate a new cloud service and select \nNone\n for the \nAvailability Set\n option.\n        * Endpoints Section: This is where port forwarding is set so\n      that the internal IP address can be selectively reachable from\n      the outside world. By default, only tcp /22 is there for ssh. The\n      public ports for \nhttp\n and \nhttps\n (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click \nNext\n.\n\n\n\n\n\n\nChoose not to install \nVM Agent\n and click the \ntick\n button to\n   finalize the VM.\n\n\n\n\n\n\nGo to the \nDashboard\n tab of VM Management Panel and copy the \nDNS\n    Name\n. This is the name that is used to access the Gluu Server.\n\n\n\n\n\n\nYou should now be able to ssh to the server and proceed with the \n    installation.\n\n\n\n\n\n\nLinode VM\n#\n\n\nLinode Virtual Machines (VM) use a custom kernel which is not \nsupported by the Gluu Server, therefore the kernel must be updated before \nthe Gluu Server can be installed in a Linode VM. The following steps will \nguide you through kernel update in the Linode VM.\n\n\n\n\nCheck for the current version of the kernel. If the output contains \n-Linode\n, then proceed\n\n\n\n\n# uname -a\n\n\n\n\n\n\nRun the following command to update the kernel:\n\n\n\n\n# apt-get install linux-image-virtual grub2\n\n\n\n\n\n\nModify \ngrub\n file in the \n/etc/default/\n folder:\n\n\n\n\n# vim /etc/default/grub\n\n\n\n\n\n\nEnsure that the following lines are present in the grub file\n\n\n\n\nGRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"\n\n\n\n\n\n\nFinally run the following commands to update \ngrub\n and reboot:\n\n\n\n\n# update-grub\n# reboot",
            "title": "Preparing VM"
        },
        {
            "location": "/installation-guide/#preparing-vm-for-gluu-server-installation",
            "text": "",
            "title": "Preparing VM for Gluu Server Installation"
        },
        {
            "location": "/installation-guide/#overview",
            "text": "Thank you for your interest in the Gluu Server! This document will provide instructions for preparing your VM for a standard Gluu Server deployment. After your servers are ready move on to the  installation instructions . Good luck with your deployment, and welcome to the community!",
            "title": "Overview"
        },
        {
            "location": "/installation-guide/#minimum-requirements",
            "text": "The Gluu Server Community Edition (CE) needs to be deployed on a server or VM with the following  minimum  requirements.      CPU Unit  RAM  Disk Space  Processor Type      2  4GB  40GB  64 Bit      Note  If you plan on installing more than the default components (i.e. oxAuth, oxTrust, and LDAP), we recommend that your server or VM have at least 8GB of RAM.     Warning  Please only post installation issues to  Gluu Support  if all the above requirements are met!",
            "title": "Minimum Requirements"
        },
        {
            "location": "/installation-guide/#ports",
            "text": "The following ports are open to the Internet by default.     Port Number  Protocol  Notes      80  tcp  Forwards to 443    443  tcp  Apache HTTPD    22  tcp  ssh",
            "title": "Ports"
        },
        {
            "location": "/installation-guide/#file-descriptors",
            "text": "The Gluu Server  requires  setting the  file descriptors  to 65k. \nFollow these steps or research how to do this on your Linux platform.   Add the following lines in the  /etc/security/limits.conf  file.   * soft nofile 65536\n* hard nofile 262144   Add the following lines to  /etc/pam.d/login   session required pam_limits.so   Increase the file descriptor limit to 65535. The system file limit \nis set in  /proc/sys/fs/file-max .   # echo 65535 > /proc/sys/fs/file-max   Use the  ulimit  command to set the file descriptor limit to the hard limit specified in  /etc/security/limits.conf .   # ulimit -n unlimited   Note  Centos by default will not accept more than the default maximum of 65535. You may get an error while performing the above command.    Restart your system.",
            "title": "File Descriptors"
        },
        {
            "location": "/installation-guide/#amazon-aws",
            "text": "Amazon AWS instances provide a public and private IP address. While\nrunning the  /install/community-edition-setup/setup.py  script, use the\nPrivate IP address. Also, use a hostname other then the long default\nhostname that Amazon provides. Update your DNS or hosts files accordingly.",
            "title": "Amazon AWS"
        },
        {
            "location": "/installation-guide/#microsoft-azure",
            "text": "Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started.",
            "title": "Microsoft Azure"
        },
        {
            "location": "/installation-guide/#setting-up-vm",
            "text": "Log into Windows Azure Administrative Panel    Click on  Virtual Machines  tab, and click  Create a Virtual Machine  link    From the menu, choose  Compute  >  Virtual Machine  >  From Gallery  branch.    Choose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.    Provide a name for the VM in the  Virtual Machine Name  field and use  Standard  for  Tier .    Select a server with at least 4GB RAM in the  Size  dropdown menu.    Provide a username/password to connect via ssh and upload ssh certificate. Click  Next .    Create a new cloud service and select  None  for the  Availability Set  option.\n        * Endpoints Section: This is where port forwarding is set so\n      that the internal IP address can be selectively reachable from\n      the outside world. By default, only tcp /22 is there for ssh. The\n      public ports for  http  and  https  (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click  Next .    Choose not to install  VM Agent  and click the  tick  button to\n   finalize the VM.    Go to the  Dashboard  tab of VM Management Panel and copy the  DNS\n    Name . This is the name that is used to access the Gluu Server.    You should now be able to ssh to the server and proceed with the \n    installation.",
            "title": "Setting up VM"
        },
        {
            "location": "/installation-guide/#linode-vm",
            "text": "Linode Virtual Machines (VM) use a custom kernel which is not \nsupported by the Gluu Server, therefore the kernel must be updated before \nthe Gluu Server can be installed in a Linode VM. The following steps will \nguide you through kernel update in the Linode VM.   Check for the current version of the kernel. If the output contains  -Linode , then proceed   # uname -a   Run the following command to update the kernel:   # apt-get install linux-image-virtual grub2   Modify  grub  file in the  /etc/default/  folder:   # vim /etc/default/grub   Ensure that the following lines are present in the grub file   GRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"   Finally run the following commands to update  grub  and reboot:   # update-grub\n# reboot",
            "title": "Linode VM"
        },
        {
            "location": "/installation-guide/install/",
            "text": "Installation\n#\n\n\nOverview\n#\n\n\nGluu publishes packages for Ubuntu, CentOS, RHEL and Debian. The \ninstallation procedure is similar across all the distributions: \n\n\n\n\nInstall the Linux package\n\n\nStart the Gluu Server and login to the container\n\n\nRun \nsetup.py\n\n\n\n\n\n\nNote\n\n\nMake sure your VM or server meets the \nminimum requirements\n to deploy the Gluu Server.  \n\n\n\n\nInstall Gluu Server Package\n#\n\n\nUbuntu Server 14.04.x\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# apt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# apt-get install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nUbuntu Server 16.04.x\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nXenial Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# apt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# apt-get install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nCentOS 6.x\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# yum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# yum install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nCentOS 7.2\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# yum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# yum install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nRHEL 6.x\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# yum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# yum install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nRHEL 7.2\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# yum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# yum install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nDebian 8 (Jessie)\n#\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\n# echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\n# curl https://repo.gluu.org/debian/gluu-apt.key | apt-key add -\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\n# apt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\n# apt-get install gluu-server-3.0.0\n\n\n\n\n\n\n\n\nStart the Gluu Server and Login\n#\n\n\nThe Gluu Server is a chroot container, which you must start to proceed. \n\n\nFor Centos 6.x, Red Hat 6.x, Ubuntu 14/16, and Debian 8:\n\n\n# service gluu-server-3.0.0 start\n# service gluu-server-3.0.0 login\n\n\n\n\nFor Centos 7.2 and Red Hat 7.2: \n\n\n# /sbin/gluu-serverd-3.0.0 enable\n# /sbin/gluu-serverd-3.0.0 start\n# /sbin/gluu-serverd-3.0.0 login\n\n\n\n\n\n\nUse \nenable\n just the first time you start the Gluu Server.\n\n\n\n\nRun \nsetup.py\n#\n\n\nConfiguration is completed by running the \nsetup.py\n script. This generates \ncertificates, salt values, and renders configuration files. After\ncompletion, you're done! Note: you must be logged into the Gluu Server \nchroot container to run \nsetup.py\n (see Step 2 above). \n\n\n# cd /install/community-edition-setup\n# ./setup.py\n\n\n\n\nYou will be prompted to answer some questions. Just hit \nEnter\n to\naccept the default value specified in square brackets. The following\ntable should help you answer the questions correctly.\n\n\n\n\n\n\n\n\nQuestion\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nEnter IP Address\n\n\nUsed primarily by Apache HTTPD for the \nListen\n directive\n\n\n\n\n\n\nEnter hostname\n\n\nInternet-facing hostname, used to generate certificates and metadata. \nDon't use an IP address or localhost here\n\n\n\n\n\n\nEnter your city or locality\n\n\nUsed to generate X.509 certificates\n\n\n\n\n\n\nEnter your state or province two letter code\n\n\nUsed to generate X.509 certificates\n\n\n\n\n\n\nEnter two letter Country Code\n\n\nUsed to generate X.509 certificates\n\n\n\n\n\n\nEnter Organization Name\n\n\nUsed to generate X.509 certificates\n\n\n\n\n\n\nEnter email address for support at your organization\n\n\nUsed to generate X.509 certificates\n\n\n\n\n\n\nOptional: enter password for oxTrust and LDAP superuser\n\n\nUsed as the LDAP directory manager password, and for the default admin user for oxTrust\n\n\n\n\n\n\nInstall oxAuth OAuth2 Authorization Server\n\n\nRequired\n\n\n\n\n\n\nInstall oxTrust Admin UI\n\n\nRequired\n\n\n\n\n\n\nInstall LDAP Server\n\n\nRequired\n\n\n\n\n\n\nInstall Apache HTTPD Server\n\n\nRequired\n\n\n\n\n\n\nInstall Shibboleth SAML IDP\n\n\nOptional: install only if you want outbound SAML\n\n\n\n\n\n\nInstall Asimba SAML Proxy\n\n\nOptional: install only if you are supporting SAML from other domains' IDPs.\n\n\n\n\n\n\nInstall CAS\n\n\nDeprecated: install only if you have existing CAS apps\n\n\n\n\n\n\nInstall oxAuth RP\n\n\nOpenID Connect test client: recommended for test enviornments\n\n\n\n\n\n\nInstall Passport\n\n\nComponent used for social login\n\n\n\n\n\n\n\n\nAfter answering these questions, \nsetup.py\n will show you your \nselections, and ask you if you want to continue. \n\n\nThe easiest place to go wrong is with the first two questions. Don't \nuse \nlocalhost\n for either the IP address or hostname. And use a real\nhostname--you can always manage via host file entries even if you don't \nwant to mess with DNS for testing. If you are deploying a cluster, use\nthe hostname of the cluster--that is used by the clients connecting\nto the Gluu Server.\n\n\n\n\nWarning\n\n\nChanging of hostname after installation is not supported. \n\n\n\n\nUninstallation\n#\n\n\nSomething went wrong? No problem, just uninstall and reinstall.\n\n\nFor Ubuntu 14/16, and Debian 8:\n\n\n# service gluu-server-3.0.0 stop\n# apt-get remove gluu-server-3.0.0\n# rm -rf /opt/gluu-server-3.0.0\n\n\n\n\nFor Centos 6.x, Red Hat 6.x, \n\n\n# service gluu-server-3.0.0 stop\n# yum remove gluu-server-3.0.0\n# rm -rf /opt/gluu-server-3.0.0\n\n\n\n\nFor Centos 7.2 and Red Hat 7.2:\n\n\n# /sbin/gluu-serverd-3.0.0 disable\n# /sbin/gluu-serverd-3.0.0 stop\n# yum remove gluu-server-3.0.0 \n# rm -rf /opt/gluu-server-3.0.0",
            "title": "Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/installation-guide/install/#overview",
            "text": "Gluu publishes packages for Ubuntu, CentOS, RHEL and Debian. The \ninstallation procedure is similar across all the distributions:    Install the Linux package  Start the Gluu Server and login to the container  Run  setup.py    Note  Make sure your VM or server meets the  minimum requirements  to deploy the Gluu Server.",
            "title": "Overview"
        },
        {
            "location": "/installation-guide/install/#install-gluu-server-package",
            "text": "",
            "title": "Install Gluu Server Package"
        },
        {
            "location": "/installation-guide/install/#ubuntu-server-1404x",
            "text": "Command Description  Trusty Commands      Add Gluu Repository  # echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  # curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -    Update/Clean Repo  # apt-get update    Install Gluu Server  # apt-get install gluu-server-3.0.0",
            "title": "Ubuntu Server 14.04.x"
        },
        {
            "location": "/installation-guide/install/#ubuntu-server-1604x",
            "text": "Command Description  Xenial Commands      Add Gluu Repository  # echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  # curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -    Update/Clean Repo  # apt-get update    Install Gluu Server  # apt-get install gluu-server-3.0.0",
            "title": "Ubuntu Server 16.04.x"
        },
        {
            "location": "/installation-guide/install/#centos-6x",
            "text": "Command Description  CentOS 6.x      Add Gluu Repository  # wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  # wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  # yum clean all    Install Gluu Server  # yum install gluu-server-3.0.0",
            "title": "CentOS 6.x"
        },
        {
            "location": "/installation-guide/install/#centos-72",
            "text": "Command Description  CentOS 7.2      Add Gluu Repository  # wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  # wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  # yum clean all    Install Gluu Server  # yum install gluu-server-3.0.0",
            "title": "CentOS 7.2"
        },
        {
            "location": "/installation-guide/install/#rhel-6x",
            "text": "Command Description  RHEL 6.x      Add Gluu Repository  # wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  # wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  # yum clean all    Install Gluu Server  # yum install gluu-server-3.0.0",
            "title": "RHEL 6.x"
        },
        {
            "location": "/installation-guide/install/#rhel-72",
            "text": "Command Description  RHEL 7      Add Gluu Repository  # wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  # wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  # yum clean all    Install Gluu Server  # yum install gluu-server-3.0.0",
            "title": "RHEL 7.2"
        },
        {
            "location": "/installation-guide/install/#debian-8-jessie",
            "text": "Command Description  Jessie Commands      Add Gluu Repository  # echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  # curl https://repo.gluu.org/debian/gluu-apt.key | apt-key add -    Update/Clean Repo  # apt-get update    Install Gluu Server  # apt-get install gluu-server-3.0.0",
            "title": "Debian 8 (Jessie)"
        },
        {
            "location": "/installation-guide/install/#start-the-gluu-server-and-login",
            "text": "The Gluu Server is a chroot container, which you must start to proceed.   For Centos 6.x, Red Hat 6.x, Ubuntu 14/16, and Debian 8:  # service gluu-server-3.0.0 start\n# service gluu-server-3.0.0 login  For Centos 7.2 and Red Hat 7.2:   # /sbin/gluu-serverd-3.0.0 enable\n# /sbin/gluu-serverd-3.0.0 start\n# /sbin/gluu-serverd-3.0.0 login   Use  enable  just the first time you start the Gluu Server.",
            "title": "Start the Gluu Server and Login"
        },
        {
            "location": "/installation-guide/install/#run-setuppy",
            "text": "Configuration is completed by running the  setup.py  script. This generates \ncertificates, salt values, and renders configuration files. After\ncompletion, you're done! Note: you must be logged into the Gluu Server \nchroot container to run  setup.py  (see Step 2 above).   # cd /install/community-edition-setup\n# ./setup.py  You will be prompted to answer some questions. Just hit  Enter  to\naccept the default value specified in square brackets. The following\ntable should help you answer the questions correctly.     Question  Explanation      Enter IP Address  Used primarily by Apache HTTPD for the  Listen  directive    Enter hostname  Internet-facing hostname, used to generate certificates and metadata.  Don't use an IP address or localhost here    Enter your city or locality  Used to generate X.509 certificates    Enter your state or province two letter code  Used to generate X.509 certificates    Enter two letter Country Code  Used to generate X.509 certificates    Enter Organization Name  Used to generate X.509 certificates    Enter email address for support at your organization  Used to generate X.509 certificates    Optional: enter password for oxTrust and LDAP superuser  Used as the LDAP directory manager password, and for the default admin user for oxTrust    Install oxAuth OAuth2 Authorization Server  Required    Install oxTrust Admin UI  Required    Install LDAP Server  Required    Install Apache HTTPD Server  Required    Install Shibboleth SAML IDP  Optional: install only if you want outbound SAML    Install Asimba SAML Proxy  Optional: install only if you are supporting SAML from other domains' IDPs.    Install CAS  Deprecated: install only if you have existing CAS apps    Install oxAuth RP  OpenID Connect test client: recommended for test enviornments    Install Passport  Component used for social login     After answering these questions,  setup.py  will show you your \nselections, and ask you if you want to continue.   The easiest place to go wrong is with the first two questions. Don't \nuse  localhost  for either the IP address or hostname. And use a real\nhostname--you can always manage via host file entries even if you don't \nwant to mess with DNS for testing. If you are deploying a cluster, use\nthe hostname of the cluster--that is used by the clients connecting\nto the Gluu Server.   Warning  Changing of hostname after installation is not supported.",
            "title": "Run setup.py"
        },
        {
            "location": "/installation-guide/install/#uninstallation",
            "text": "Something went wrong? No problem, just uninstall and reinstall.  For Ubuntu 14/16, and Debian 8:  # service gluu-server-3.0.0 stop\n# apt-get remove gluu-server-3.0.0\n# rm -rf /opt/gluu-server-3.0.0  For Centos 6.x, Red Hat 6.x,   # service gluu-server-3.0.0 stop\n# yum remove gluu-server-3.0.0\n# rm -rf /opt/gluu-server-3.0.0  For Centos 7.2 and Red Hat 7.2:  # /sbin/gluu-serverd-3.0.0 disable\n# /sbin/gluu-serverd-3.0.0 stop\n# yum remove gluu-server-3.0.0 \n# rm -rf /opt/gluu-server-3.0.0",
            "title": "Uninstallation"
        },
        {
            "location": "/installation-guide/setup_py/",
            "text": "Setup Prompt\n#\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for \ncertificate as well as the IP Address and the hostname for the Gluu Server. \nThe prompt is given below.\n\n\nEnter IP Address [192.168.122.60] :\nEnter hostname [localhost] : centos.gluu.info\nEnter your city or locality : Austin\nEnter your state or province two letter code : TX\nEnter two letter Country Code : US\nEnter Organization Name : Gluu\nEnter email address for support at your organization : support@gluu.org\nEnter maximum RAM for tomcat in MB [3072] :\nOptional: enter password for oxTrust and LDAP superuser [hlE3vzf0hMdD] :\nInstall oxAuth OAuth2 Authorization Server? [Yes] : \nInstall oxTrust Admin UI? [Yes] : \nInstall LDAP Server? [Yes] : \nInstall Apache HTTPD Server [Yes] : \nInstall Shibboleth SAML IDP? [No] : Yes\nInstall Asimba SAML Proxy? [No] : Yes\nInstall oxAuth RP? [No] : Yes\nInstall Passport? [No] : Yes\nInstall JCE 1.8? [Yes] : \nYou must accept the Oracle Binary Code License Agreement for the Java SE Platform Products to download this software. Accept License Agreement? [Yes] : \n\n\n\n\n\n\nLogin\n\n\nPlease log in using the username \nadmin\n and the password from the setup script promtpt e.g \nhlE3vzf0hMdD\n or the password entered\n\n\n\n\nIf a resolvable DNS host is not used, then it must be added to the hostname of the Operating System  hosts file on the server running the browser.\n\n\n\n\nWarning\n\n\nPlease remove or encrypt the setup.properties.last file as it contains the clear text passwords for \nLDAP, admin user, keystores, and 3DES salt\n.\n\n\n\n\nThe errors can be found the the \nsetup_errors.log\n file and a detailed step by step installation is found in the \nsetup.log\n file under the \n/install/community-edition-setup\n folder.\n\n\n\n\nWarning\n\n\nUse a FQDN (fully qualified domain name) as hostname and refrain from using 127.0.0.1 as IP address or usage of private IP is not supported and not recommended.\n\n\n\n\nScript Command Line Options\n#\n\n\nThe \nsetup.py\n script can be used to configure your Gluu Server and to add initial data\nfor oxAuth and oxTrust to start. If \nsetup.properties\n is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.\n\n\nThe administrator can use the following command line options to include additional components:\n\n\n\n\n-a\n install Asimba\n\n\n-c\n install CAS\n\n\n-d\n specify the directory where community-edition-setup is located. Defaults to '.'\n\n\n-f\n specify \nsetup.properties\n file\n\n\n-h\n invoke this help\n\n\n-l\n install LDAP\n\n\n-n\n no interactive prompt before install starts. Run with \n-f\n\n\n-N\n no Apache httpd server\n\n\n-s\n install the Shibboleth IDP\n\n\n-u\n update hosts file with IP address/hostname\n\n\n-w\n get the development head war files\n\n\n\n\nExample Command: \n# ./setup.py -cas\n This command will install Gluu Server with CAS, Asimba and Shibboleth IDP.",
            "title": "Setup Script Options"
        },
        {
            "location": "/installation-guide/setup_py/#setup-prompt",
            "text": "The  setup.py  script will bring up a prompt to provide information for \ncertificate as well as the IP Address and the hostname for the Gluu Server. \nThe prompt is given below.  Enter IP Address [192.168.122.60] :\nEnter hostname [localhost] : centos.gluu.info\nEnter your city or locality : Austin\nEnter your state or province two letter code : TX\nEnter two letter Country Code : US\nEnter Organization Name : Gluu\nEnter email address for support at your organization : support@gluu.org\nEnter maximum RAM for tomcat in MB [3072] :\nOptional: enter password for oxTrust and LDAP superuser [hlE3vzf0hMdD] :\nInstall oxAuth OAuth2 Authorization Server? [Yes] : \nInstall oxTrust Admin UI? [Yes] : \nInstall LDAP Server? [Yes] : \nInstall Apache HTTPD Server [Yes] : \nInstall Shibboleth SAML IDP? [No] : Yes\nInstall Asimba SAML Proxy? [No] : Yes\nInstall oxAuth RP? [No] : Yes\nInstall Passport? [No] : Yes\nInstall JCE 1.8? [Yes] : \nYou must accept the Oracle Binary Code License Agreement for the Java SE Platform Products to download this software. Accept License Agreement? [Yes] :    Login  Please log in using the username  admin  and the password from the setup script promtpt e.g  hlE3vzf0hMdD  or the password entered   If a resolvable DNS host is not used, then it must be added to the hostname of the Operating System  hosts file on the server running the browser.   Warning  Please remove or encrypt the setup.properties.last file as it contains the clear text passwords for  LDAP, admin user, keystores, and 3DES salt .   The errors can be found the the  setup_errors.log  file and a detailed step by step installation is found in the  setup.log  file under the  /install/community-edition-setup  folder.   Warning  Use a FQDN (fully qualified domain name) as hostname and refrain from using 127.0.0.1 as IP address or usage of private IP is not supported and not recommended.",
            "title": "Setup Prompt"
        },
        {
            "location": "/installation-guide/setup_py/#script-command-line-options",
            "text": "The  setup.py  script can be used to configure your Gluu Server and to add initial data\nfor oxAuth and oxTrust to start. If  setup.properties  is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.  The administrator can use the following command line options to include additional components:   -a  install Asimba  -c  install CAS  -d  specify the directory where community-edition-setup is located. Defaults to '.'  -f  specify  setup.properties  file  -h  invoke this help  -l  install LDAP  -n  no interactive prompt before install starts. Run with  -f  -N  no Apache httpd server  -s  install the Shibboleth IDP  -u  update hosts file with IP address/hostname  -w  get the development head war files   Example Command:  # ./setup.py -cas  This command will install Gluu Server with CAS, Asimba and Shibboleth IDP.",
            "title": "Script Command Line Options"
        },
        {
            "location": "/upgrade/",
            "text": "Upgrading Gluu Server CE\n#\n\n\nOverview\n#\n\n\nThe Gluu Server can \nnot\n be upgraded with a simple \napt-get upgrade\n. The admin needs to explicitly install the new version of the Gluu Server and export and import the required data using scripts. \n\n\n\n\nNote\n\n\nThis guide assumes that you are upgrading from version 2.x.x to 3.0 and are \nOK with changing persistence from OpenDJ to OpenLDAP\n. If you prefer to keep OpenDJ in Gluu Server 3.0, follow the separate documentation for \nupgrading with OpenDJ\n.\n\n\n\n\n\n\nWarning\n\n\nBefore proceeding with an upgrade, make sure to \nbackup\n the Gluu container or LDAP Ldif before proceeding with the upgrade. \n\n\n\n\nUpgrading generally involves the following steps:   \n\n\n\n\nInstall new version\n\n\nExport the data from your current version\n\n\nStop the current Gluu Server\n\n\nStart the new version of Gluu Server\n\n\nImport data into the new server\n\n\n\n\nGluu provides the necessary \nscripts\n to import and export data in and out of the servers.\n\n\nExport the data from the current installation\n#\n\n\n# service gluu-server-2.x.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py\n\n\n\n\nThe export script will generate a directory called \nbackup_24\n which will have all the data from the current installation. Check the log file generated in the directory for any errors.\n\n\nInstall the latest version of the Gluu server\n#\n\n\nStop the current version of the gluu-server.\n\n\n# service gluu-server-2.4.x stop\n\n\n\n\nReview the \ninstallation docs\n to install the Gluu Server using the package manager. Once the package manager has installed version \n3.0.0\n, then execute the following commands:\n\n\n# cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-3.0.0/root/\n\n# service gluu-server-3.0.0 start\n\n# service gluu-server-3.0.0 login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py\n\n\n\n\nEnter the required information to complete the installation.\n\n\nImport your old data\n#\n\n\nNavigate to where you have the \nbackup_24\n folder (if the above commands were followed, it is in \n/root/\n) and execute the following commands to get the necessary scripts.\n\n\n\n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import30.py\n\n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py\n\n\n\n\nInstall the \npython-pip\n package using your package manager.\n\n\n# apt-get update\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip\n\n\n\n\nInstall the \njson-merge\n Python package and run the import script.\n\n\n# pip install jsonmerge\n\n# chmod +x import30.py\n\n# ./import30.py backup_24\n\n\n\n\nAny errors or warnings will be displayed in the terminal and can be reviewed in the import log. Now you should be able to log into the oxTrust web UI using the old admin credentials. You should see all previous data in place. After completion of import, stop/start 2.4.4 container one final time.",
            "title": "Upgrade Gluu Server"
        },
        {
            "location": "/upgrade/#upgrading-gluu-server-ce",
            "text": "",
            "title": "Upgrading Gluu Server CE"
        },
        {
            "location": "/upgrade/#overview",
            "text": "The Gluu Server can  not  be upgraded with a simple  apt-get upgrade . The admin needs to explicitly install the new version of the Gluu Server and export and import the required data using scripts.    Note  This guide assumes that you are upgrading from version 2.x.x to 3.0 and are  OK with changing persistence from OpenDJ to OpenLDAP . If you prefer to keep OpenDJ in Gluu Server 3.0, follow the separate documentation for  upgrading with OpenDJ .    Warning  Before proceeding with an upgrade, make sure to  backup  the Gluu container or LDAP Ldif before proceeding with the upgrade.    Upgrading generally involves the following steps:      Install new version  Export the data from your current version  Stop the current Gluu Server  Start the new version of Gluu Server  Import data into the new server   Gluu provides the necessary  scripts  to import and export data in and out of the servers.",
            "title": "Overview"
        },
        {
            "location": "/upgrade/#export-the-data-from-the-current-installation",
            "text": "# service gluu-server-2.x.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py  The export script will generate a directory called  backup_24  which will have all the data from the current installation. Check the log file generated in the directory for any errors.",
            "title": "Export the data from the current installation"
        },
        {
            "location": "/upgrade/#install-the-latest-version-of-the-gluu-server",
            "text": "Stop the current version of the gluu-server.  # service gluu-server-2.4.x stop  Review the  installation docs  to install the Gluu Server using the package manager. Once the package manager has installed version  3.0.0 , then execute the following commands:  # cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-3.0.0/root/\n\n# service gluu-server-3.0.0 start\n\n# service gluu-server-3.0.0 login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py  Enter the required information to complete the installation.",
            "title": "Install the latest version of the Gluu server"
        },
        {
            "location": "/upgrade/#import-your-old-data",
            "text": "Navigate to where you have the  backup_24  folder (if the above commands were followed, it is in  /root/ ) and execute the following commands to get the necessary scripts.  \n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import30.py\n\n# wget -c https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py  Install the  python-pip  package using your package manager.  # apt-get update\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip  Install the  json-merge  Python package and run the import script.  # pip install jsonmerge\n\n# chmod +x import30.py\n\n# ./import30.py backup_24  Any errors or warnings will be displayed in the terminal and can be reviewed in the import log. Now you should be able to log into the oxTrust web UI using the old admin credentials. You should see all previous data in place. After completion of import, stop/start 2.4.4 container one final time.",
            "title": "Import your old data"
        },
        {
            "location": "/upgrade/manual-update/",
            "text": "Manual upgrade from 2.4.4.2 or 2.4.4.3 to 3.0.0 with OpenDJ\n#\n\n\nOverview\n#\n\n\nThis guide explains how to upgrade the Gluu Server 2.4.4.2 (SP 2) or 2.4.4.3 (SP 3) to 3.0.0 \nand keep OpenDJ in the server. This guide assumes an Ubuntu operating system. \nFor other operating systems some commands may change.\n\n\nUpgrade Process\n#\n\n\n1. Install 2.4.4 SP2\n\n\n2. Log into CE 2.4.4 SP2 and insall it\n\n\nservice gluu-server-2.4.4.2 start\nservice gluu-server-2.4.4.2 login\ncd /install/community-edition-setup/\n./setup.py\n\n\n\n\n3. Exit and Stop 2.4.4 SP2\n\n\nexit\nservice gluu-server-2.4.4.2 stop\n\n\n\n\n4. Disable 2.4.4 SP2 service auto startup\n\n\n/usr/sbin/update-rc.d -f gluu-server-2.4.4.2 disable\n\n\n\n\n\n\nFor CentOS6.x: \n- Disable 'gluuserver-2.4.4.2' from startup: \nchkconfig gluu-server-2.4.4.2 off\n\n- Check the status of service in init: \nchkconfig --list | grep gluu-server-2.4.4.2\n\n\n\n\n5. Install 3.0.0 rpm/deb, do not run setup script. \n\n\n6. Backup OpenDJ, ox-ldap.properties, salt from 2.4.4 SP2 and copy it into 3.0.0\n\n\ncd /opt/gluu-server-2.4.4.2/opt\ntar -czf opendj.tar.gz opendj\ncp opendj.tar.gz /opt/gluu-server-3.0.0/opt/\n\ncp /opt/gluu-server-2.4.4.2/opt/apache-tomcat-7.0.65/conf/ox-ldap.properties /opt/gluu-server-3.0.0/tmp\ncp /opt/gluu-server-2.4.4.2/opt/apache-tomcat-7.0.65/conf/salt /opt/gluu-server-3.0.0/tmp\n\n\n\n\n7. Log into CE 3.0.0 and run setup script\n\n\nservice gluu-server-3.0.0 start\nservice gluu-server-3.0.0 login\ncd /install/community-edition-setup/\n./setup.py\n\n\n\n\n8. Verify if installed services are up\n\n\n9. Stop OpenLDAP and all installed services\n\n\nservice oxauth stop\nservice identity stop\n...\nservice solserver stop\n\n\n\n\n10. Disable OpenLDAP\n\n\n/usr/sbin/update-rc.d -f solserver disable\n\n\n\n\n\n\nFor CentOS6.x\n- Disable in startup: \nchkconfig solserver off\n\n- Check the status in init: \nchkconfig --list | grep solserver\n\n\n\n\n11. Restore OpenDJ from 2.4.4 SP2\n\n\ncd /opendj\nrm -rf opendj\ntar -xzf opendj.tar.gz\nchown -R ldap:ldap opendj\n\n\n\n\n12. Update OpenDJ java settings\n\n\n/bin/su ldap -c \"export OPENDJ_JAVA_HOME=/opt/jre; /opt/opendj/bin/dsjavaproperties\"\n\n\n\n\n\n\nFor CentOS6.x: \nPerform below operations are user 'ldap'\n\n\n\n\n\n\nAdd jre location in 'java.properties' ( location: /opt/opendj/config ): \ndefault.java-home=/opt/jre\n\n\n\n\n\n\nRun command: \nexport OPENDJ_JAVA_HOME=/opt/jre\n\n\n\n\n\n\nRun command: \n/opt/opendj/bin/dsjavaproperties\n\n\n\n\n\n\n\n\n13. Create OpenDJ init script\n\n\nexport OPENDJ_JAVA_HOME=/opt/jre; /opt/opendj/bin/create-rc-script --outputFile /etc/init.d/opendj --userName ldap\n/usr/sbin/update-rc.d -f opendj enable\n\n\n\n\n\n\nFor CentOS6.x: \n\n\nAs root, run command: \nexport OPENDJ_JAVA_HOME=/opt/jre; /opt/opendj/bin/create-rc-script --outputFile /etc/init.d/opendj --userName ldap\n \n\n\nAdd opendj service in startup: \nchkconfig opendj on\n\n\nCheck the status of opendj service: \nchkconfig --list | grep opendj\n\n\n\n\n14. Update LDAP schema\n\n\ncp -f /install/community-edition-setup/static/opendj/deprecated/101-ox.ldif /opt/opendj/config/schema/\n\n\n\n\n15. In 3.0.0 user custom attributes objectClass is \ngluuCustomPerson\n. It's defined in \n/opt/opendj/config/schema/77-customAttributes.ldif\n \n\n\nWe need to add into it definition custom attributes from 2.4.4 SP2 \n/opt/opendj/config/schema/100-user.ldif\n. Old custom attributes \nobjectClass\n is based on \norgInum\n. Example: \nox-6657268F7461C8CE000150DA8011-oid\n\n\n16. Fix OpenDJ autogenerated schema. We need to do two repalcements in \n/opt/opendj/config/schema/101-ox.ldif\n and \n/opt/opendj/config/schema/77-customAttributes.ldif\n.\n - \n\"attributeTypes: ( oxAttribute:\" to \"attributeTypes: ( oxAttribute-\"\n\n - \n\"objectClasses: ( oxObjectClass:\" to \"objectClasses: ( oxObjectClass-\"\n\n\n17. Start OpenDJ\n\n\nservice opendj start\n\n\n\n\n18. Verify startup messages in OpenDJ logs: \n/opt/opendj/logs/server.out and /opt/opendj/logs/errors\n\n\n19. Restore ox-ldap.properties and salt from CE 2.4.4 SP2\n\n\ncd /etc/gluu/conf\nmv ox-ldap.properties ox-ldap.properties.3.0.0\nmv salt salt.3.0.0\nmv /tmp/ox-ldap.properties .\nmv /tmp/salt .\nchown -R root:gluu /etc/gluu/conf\n\n\n\n\n20. Start CE servces\n\n\nservice oxauth start\nservice identity start\n...\n\n\n\n\n21. Verify if installed services are up\n\n\n22. Update oxTrust JSON configuration\n - We need to update \npersonObjectClassTypes\n, \npersonObjectClassDisplayNames\n and  \npersonCustomObjectClass\n.\n\n\nIn  3.0.0 these properties have next default values:\n   \npersonObjectClassTypes = gluuCustomPerson, gluuPerson, eduPerson\n   personObjectClassDisplayNames = gluuCustomPerson, gluuPerson, eduPerson\n   personCustomObjectClass = gluuCustomPerson\n\n - We need to update \nldifStore\n, \nvelocityLog\n.\n   In  3.0.0 these properties have next default values:\n   \nldifStore\n = \n/var/ox/identity/removed\n\n   \nvelocityLog\n = \n/opt/gluu/jetty/identity/logs/velocity.log\n\n\n\n\nIf you are using SAML, you have to modify couple of sections as well: \n\n\nAdd Shibv3 Root Directory location: \n\"shibboleth3FederationRootDir\":\"/opt/shibboleth-federation\",\n [ This configuration goes in between of \n\"photoRepositoryCount...\n and \n\"\"velocityLog\"...\n ]\n\n\nCouple of other declarations: [ This configuration lies in between of \n\"scimTestModeAccessToken...\"\n and \n\"clientWhiteList...\"\n ] \n \n\"shibbolethVersion\":\"v3\",\n\"shibboleth3IdpRootDir\":\"/opt/shibboleth-idp\",\n\"shibboleth3SpConfDir\":\"/opt/shibboleth-idp/sp\",\n\"organizationName\":\"Gluu Inc.\",\n\"idp3SigningCert\":\"/etc/certs/idp-signing.crt\",\n\"idp3EncryptionCert\":\"/etc/certs/idp-encryption.crt\",\n\n\n\n\n\n\n\n\n23. Update oxTrust CacheRefesh snapshotFolder.\n   New snapshotFolder = \n/var/ox/identity/cr-snapshots\n\n\nNotes\n#\n\n\n1. If in 2.4.4 SP2 environment SCIM was enabled we need to do the following:\n - Fill new properties: \nscimUmaClientId\n, \nscimUmaClientKeyId\n, \nscimUmaResourceId\n, \nscimUmaScope\n, \nscimUmaClientKeyStoreFile\n, \nscimUmaClientKeyStorePassword\n -- These properties have the same values as before, but in 3.0.0 we added prefix \"scim\" to all of them.\n - Copy \n/etc/certs/scim-rs.jks\n from 2.4.4 SP2 into 3.0.0",
            "title": "Upgrade Gluu Server with OpenDJ"
        },
        {
            "location": "/upgrade/manual-update/#manual-upgrade-from-2442-or-2443-to-300-with-opendj",
            "text": "",
            "title": "Manual upgrade from 2.4.4.2 or 2.4.4.3 to 3.0.0 with OpenDJ"
        },
        {
            "location": "/upgrade/manual-update/#overview",
            "text": "This guide explains how to upgrade the Gluu Server 2.4.4.2 (SP 2) or 2.4.4.3 (SP 3) to 3.0.0 \nand keep OpenDJ in the server. This guide assumes an Ubuntu operating system. \nFor other operating systems some commands may change.",
            "title": "Overview"
        },
        {
            "location": "/upgrade/manual-update/#upgrade-process",
            "text": "1. Install 2.4.4 SP2  2. Log into CE 2.4.4 SP2 and insall it  service gluu-server-2.4.4.2 start\nservice gluu-server-2.4.4.2 login\ncd /install/community-edition-setup/\n./setup.py  3. Exit and Stop 2.4.4 SP2  exit\nservice gluu-server-2.4.4.2 stop  4. Disable 2.4.4 SP2 service auto startup  /usr/sbin/update-rc.d -f gluu-server-2.4.4.2 disable   For CentOS6.x: \n- Disable 'gluuserver-2.4.4.2' from startup:  chkconfig gluu-server-2.4.4.2 off \n- Check the status of service in init:  chkconfig --list | grep gluu-server-2.4.4.2   5. Install 3.0.0 rpm/deb, do not run setup script.   6. Backup OpenDJ, ox-ldap.properties, salt from 2.4.4 SP2 and copy it into 3.0.0  cd /opt/gluu-server-2.4.4.2/opt\ntar -czf opendj.tar.gz opendj\ncp opendj.tar.gz /opt/gluu-server-3.0.0/opt/\n\ncp /opt/gluu-server-2.4.4.2/opt/apache-tomcat-7.0.65/conf/ox-ldap.properties /opt/gluu-server-3.0.0/tmp\ncp /opt/gluu-server-2.4.4.2/opt/apache-tomcat-7.0.65/conf/salt /opt/gluu-server-3.0.0/tmp  7. Log into CE 3.0.0 and run setup script  service gluu-server-3.0.0 start\nservice gluu-server-3.0.0 login\ncd /install/community-edition-setup/\n./setup.py  8. Verify if installed services are up  9. Stop OpenLDAP and all installed services  service oxauth stop\nservice identity stop\n...\nservice solserver stop  10. Disable OpenLDAP  /usr/sbin/update-rc.d -f solserver disable   For CentOS6.x\n- Disable in startup:  chkconfig solserver off \n- Check the status in init:  chkconfig --list | grep solserver   11. Restore OpenDJ from 2.4.4 SP2  cd /opendj\nrm -rf opendj\ntar -xzf opendj.tar.gz\nchown -R ldap:ldap opendj  12. Update OpenDJ java settings  /bin/su ldap -c \"export OPENDJ_JAVA_HOME=/opt/jre; /opt/opendj/bin/dsjavaproperties\"   For CentOS6.x: \nPerform below operations are user 'ldap'    Add jre location in 'java.properties' ( location: /opt/opendj/config ):  default.java-home=/opt/jre    Run command:  export OPENDJ_JAVA_HOME=/opt/jre    Run command:  /opt/opendj/bin/dsjavaproperties     13. Create OpenDJ init script  export OPENDJ_JAVA_HOME=/opt/jre; /opt/opendj/bin/create-rc-script --outputFile /etc/init.d/opendj --userName ldap\n/usr/sbin/update-rc.d -f opendj enable   For CentOS6.x:   As root, run command:  export OPENDJ_JAVA_HOME=/opt/jre; /opt/opendj/bin/create-rc-script --outputFile /etc/init.d/opendj --userName ldap    Add opendj service in startup:  chkconfig opendj on  Check the status of opendj service:  chkconfig --list | grep opendj   14. Update LDAP schema  cp -f /install/community-edition-setup/static/opendj/deprecated/101-ox.ldif /opt/opendj/config/schema/  15. In 3.0.0 user custom attributes objectClass is  gluuCustomPerson . It's defined in  /opt/opendj/config/schema/77-customAttributes.ldif    We need to add into it definition custom attributes from 2.4.4 SP2  /opt/opendj/config/schema/100-user.ldif . Old custom attributes  objectClass  is based on  orgInum . Example:  ox-6657268F7461C8CE000150DA8011-oid  16. Fix OpenDJ autogenerated schema. We need to do two repalcements in  /opt/opendj/config/schema/101-ox.ldif  and  /opt/opendj/config/schema/77-customAttributes.ldif .\n -  \"attributeTypes: ( oxAttribute:\" to \"attributeTypes: ( oxAttribute-\" \n -  \"objectClasses: ( oxObjectClass:\" to \"objectClasses: ( oxObjectClass-\"  17. Start OpenDJ  service opendj start  18. Verify startup messages in OpenDJ logs:  /opt/opendj/logs/server.out and /opt/opendj/logs/errors  19. Restore ox-ldap.properties and salt from CE 2.4.4 SP2  cd /etc/gluu/conf\nmv ox-ldap.properties ox-ldap.properties.3.0.0\nmv salt salt.3.0.0\nmv /tmp/ox-ldap.properties .\nmv /tmp/salt .\nchown -R root:gluu /etc/gluu/conf  20. Start CE servces  service oxauth start\nservice identity start\n...  21. Verify if installed services are up  22. Update oxTrust JSON configuration\n - We need to update  personObjectClassTypes ,  personObjectClassDisplayNames  and   personCustomObjectClass .  In  3.0.0 these properties have next default values:\n    personObjectClassTypes = gluuCustomPerson, gluuPerson, eduPerson\n   personObjectClassDisplayNames = gluuCustomPerson, gluuPerson, eduPerson\n   personCustomObjectClass = gluuCustomPerson \n - We need to update  ldifStore ,  velocityLog .\n   In  3.0.0 these properties have next default values:\n    ldifStore  =  /var/ox/identity/removed \n    velocityLog  =  /opt/gluu/jetty/identity/logs/velocity.log   If you are using SAML, you have to modify couple of sections as well:   Add Shibv3 Root Directory location:  \"shibboleth3FederationRootDir\":\"/opt/shibboleth-federation\",  [ This configuration goes in between of  \"photoRepositoryCount...  and  \"\"velocityLog\"...  ]  Couple of other declarations: [ This configuration lies in between of  \"scimTestModeAccessToken...\"  and  \"clientWhiteList...\"  ] \n  \"shibbolethVersion\":\"v3\",\n\"shibboleth3IdpRootDir\":\"/opt/shibboleth-idp\",\n\"shibboleth3SpConfDir\":\"/opt/shibboleth-idp/sp\",\n\"organizationName\":\"Gluu Inc.\",\n\"idp3SigningCert\":\"/etc/certs/idp-signing.crt\",\n\"idp3EncryptionCert\":\"/etc/certs/idp-encryption.crt\",     23. Update oxTrust CacheRefesh snapshotFolder.\n   New snapshotFolder =  /var/ox/identity/cr-snapshots",
            "title": "Upgrade Process"
        },
        {
            "location": "/upgrade/manual-update/#notes",
            "text": "1. If in 2.4.4 SP2 environment SCIM was enabled we need to do the following:\n - Fill new properties:  scimUmaClientId ,  scimUmaClientKeyId ,  scimUmaResourceId ,  scimUmaScope ,  scimUmaClientKeyStoreFile ,  scimUmaClientKeyStorePassword  -- These properties have the same values as before, but in 3.0.0 we added prefix \"scim\" to all of them.\n - Copy  /etc/certs/scim-rs.jks  from 2.4.4 SP2 into 3.0.0",
            "title": "Notes"
        },
        {
            "location": "/upgrade/update-war/",
            "text": "Updating a war file\n#\n\n\nA \nwar\n file is a \nzipped up java web application. Because they make deployment a breeze,\neven if you hate violence, you can learn to love .war's!\n\n\nWhen you install a new version of Gluu, it always comes with the latest\nwar files. However, sometimes you might make a customization, or \nGluu might send you a war file as a temporary fix between\nservice pack or version releases. These instructions walk you through\nhow to put it to use. \n\n\nKeep in mind that a new version of code may also require updates to\nthe LDAP schema or to the application JSON properties. Make sure \nyou are aware of any requirements before you start, because missing\ndata can cause the Gluu Server to malfunction.\n\n\nIn the following example, we assume the service is oxTrust (which\nuses the warfile \"identity.war\"). But you could switch this process \nfor any of the Gluu Server war files like oxAuth, asimba, the \nShibboleth IDP or oxauth-rp.\n\n\n\n\n\n\nLogin to chroot container \n\n\n# service gluu-server-3.0.0 login\n\n\n\n\n\n\nStop the respective service. \n\n\n# service identity stop\n\n\n\n\n\n\nNavigate to the /opt/gluu/jetty folder and back up the current app\nin root's home directory (just in case you need to restore!)\n\n\n# cd /opt/gluu/jetty/\n\n\n# tar -czf ~/identity.tar.gz identity\n\n\n\n\n\n\nDownload and install the latest release war (assuming the \nURL was in the $WAR_URL environment variable).\n\n\n# cd /opt/gluu/jetty/identity/webapps/\n\n\n# rm identity.war\n\n\n# wget $WAR_URL\n\n\n\n\n\n\nStart the service (for example oxTrust)\n\n\n# service identity start\n\n\n\n\n\n\nLatest release of war files can be downloaded from \nhere",
            "title": "Updating a War File"
        },
        {
            "location": "/upgrade/update-war/#updating-a-war-file",
            "text": "A  war  file is a \nzipped up java web application. Because they make deployment a breeze,\neven if you hate violence, you can learn to love .war's!  When you install a new version of Gluu, it always comes with the latest\nwar files. However, sometimes you might make a customization, or \nGluu might send you a war file as a temporary fix between\nservice pack or version releases. These instructions walk you through\nhow to put it to use.   Keep in mind that a new version of code may also require updates to\nthe LDAP schema or to the application JSON properties. Make sure \nyou are aware of any requirements before you start, because missing\ndata can cause the Gluu Server to malfunction.  In the following example, we assume the service is oxTrust (which\nuses the warfile \"identity.war\"). But you could switch this process \nfor any of the Gluu Server war files like oxAuth, asimba, the \nShibboleth IDP or oxauth-rp.    Login to chroot container   # service gluu-server-3.0.0 login    Stop the respective service.   # service identity stop    Navigate to the /opt/gluu/jetty folder and back up the current app\nin root's home directory (just in case you need to restore!)  # cd /opt/gluu/jetty/  # tar -czf ~/identity.tar.gz identity    Download and install the latest release war (assuming the \nURL was in the $WAR_URL environment variable).  # cd /opt/gluu/jetty/identity/webapps/  # rm identity.war  # wget $WAR_URL    Start the service (for example oxTrust)  # service identity start    Latest release of war files can be downloaded from  here",
            "title": "Updating a war file"
        },
        {
            "location": "/admin-guide/oxtrust-ui/",
            "text": "oxTrust Administrative Graphical User Interface (GUI)\n#\n\n\nOverview\n#\n\n\nThis section of the docs covers various features associated with managing your federation service via the Gluu Server interface (\"oxTrust\"). For more complicated topics and features, this document will link to dedicated sections within the docs where additional operational details are provided.\n\n\nAccessing the UI\n#\n\n\nThe Gluu Server administration interface is accessible by navigating to \n\nhttps://hostname\n (the one you provided during setup). When you \nfirst complete an installation, the default username is \nadmin\n and \nthe password is the same as the \nLDAP superuser\n password. \n\n\nWelcome Page\n#\n\n\nAfter successful authentication the administrator is taken to the \nDashboard. Some basic information about the VM/server is displayed as \nwell as the server version, free memory, and disk space. In the top \nright there is a user icon which can be used to log out of oxTrust. \nThe left hand menu is used to navigate the admin interface.\n\n\n\n\nConfiguration\n#\n\n\nFrom the configuration tab, the Gluu Server administrator can manage \ncertain non-protocol related tasks.\n\n\nOrganization Configuration\n#\n\n\nThere are three tabs in the organization configuration page:       \n\n\n\n\nSystem Configuration\n         \n\n\nSMTP Server Configuration\n         \n\n\noxTrust Settings\n             \n\n\n\n\nSystem Configuration\n#\n\n\n\n\n\n\n\n\nSelf-service password reset: Allow users to reset their password via email. In order for this feature to work, the admin will also need to perform \nSMTP Server Configuration\n.      \n\n\n\n\n\n\nSCIM Support: Enable SCIM Support if you plan on using the SCIM protocol to move identity data from applications to Gluu and vice versa.      \n\n\n\n\n\n\nDNS Server(s): If the organization uses any custom \nDNS Server(s)\n, the address should be added here. \n\n\n\n\n\n\nMaximum Log Size (MB): By default the maximum size of the log file is 200 mb. This value can be increased or decreased depending on the organizations requirements.     \n\n\n\n\n\n\nUser can edit their own profile: oxTrust has a profile section for each user. If this option is enabled, users will be able to log into oxTrust and edit the values associated with their user.      \n\n\n\n\n\n\nContact Email: This email will be displayed on all error pages with a note instructing users to contact for troubleshooting and  assistance.        \n\n\n\n\n\n\nSMTP Server Configuration\n#\n\n\n\n\nThe Gluu Server needs a mail server in order to send notifications. All fields in this form are manadory and the configuration can be tested before confirmation.\n\n\n\n\n\n\n\n\nFields\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSMTP Host\n\n\nHostName of the SMTP server\n\n\n\n\n\n\nFrom Name\n\n\nName of the sender\n\n\n\n\n\n\nFrom Email Address\n\n\nEmail Address of the Sender\n\n\n\n\n\n\nRequires Authentication\n\n\nThis Checkbox is enables authentication of the sender\n\n\n\n\n\n\nSMTP User Name\n\n\nUser Name of the SMTP\n\n\n\n\n\n\nSMTP Password\n\n\nPassword for the SMTP\n\n\n\n\n\n\nRequires SSL\n\n\nThis checkbox is to enable the SSL\n\n\n\n\n\n\nSMTP Port\n\n\nPort number of the SMTP server\n\n\n\n\n\n\n\n\noxTrust Settings\n#\n\n\n\n\nFrom the oxTrust Settings page the administrator can find the oxTrust build date and number, and manage the organization name, logo, and favicon. This page also contains the name of the Gluu Server administrator group. Users added to this group will have administrator access to the Gluu Server.\n\n\nJSON Configuration\n#\n\n\nThere are three tabs included in the \nJSON Configuration\n menu:\n\n\n\n\noxTrust Configuration\n#\n\n\nFrom this tab you can access and edit the oxTrust JSON configuration file. \nClick the update button at the bottom of the page to save any changes. \n\n\nWhiteList/BlackList URIs\n#\n\n\nAn administrator can allow or deny access to URI's by updating JSON properties in the oxTrust UI\n\n\nConfigure WhiteList/BlackList of URIs\n#\n\n\n\n\nClick on \nConfiguration\n > \nJSON Properties\n\n\nClick \noxTrust properties\n tab and search for whitelist and blacklist label.\n\n\n\n\n\n\noxAuth Configuration\n#\n\n\nThe oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. \nThis page also contains the supported response, grants, and algorithms. \n\n\noxTrust Import Person Configuration\n#\n\n\nThe oxTrust Import Person Configuration page contains the configuration for \nthe file method of importing users into the Gluu Server. The administrator \ncan import users from an \nxls\n file which must be defined in this tab to import \ndata in the LDAP attributes. The default format should contain the following fields: \n\n\n\n\ngivenname\n\n\nsn\n\n\nuid\n\n\nfirstname, \netc..\n\n\n\n\nManage Authentication\n#\n\n\nManage LDAP Authentication\n#\n\n\nThis section allows the Gluu Server administrator to define how and\nwhere the server should connect to authenticate users. If it is a remote\nLDAP/Active Directory server, the values are required. Put the details\nof the data source that you are trying to connect with Gluu Server. For\nexample, the data source can be your back-end Active Directory, or your\nlocal LDAP server.\n\n\n\n\n\n\n\n\nName:\n This field contains the name of the authentication server.\n\n\n\n\n\n\nBind DN:\n The \nUsername\n for the authentication server (local\n  LDAP/remote LDAP/remote Active Directory) goes here.\n\n\n\n\n\n\nMax Connections:\n This option can be used to define the total number\n  of simultaneous connections allowed for reading local LDAP/remote Active\n  Directory/remote LDAP.\n\n\n\n\n\n\nPrimary Key:\n This field contains the primary key to connect to the\n  authentication server (i.e. SAMAccountName/uid/mail etc.). \n\n\n\n\n\n\nLocal Primary Key:\n This field contains the Gluu Server's internal LDAP primary key. Generally the key is either \nuid\n or \nmail\n. \n\n\n\n\n\n\nServer:\n The unique name of the authentication server and port number\n  (e.g. auth.company.org:636) goes here.\n\n\n\n\n\n\nBase DN:\n Add base DNs in this field to allow the Gluu Server to\n  connect and search the LDAP server. Every directory tree should be added\n  separately using the \nAdd Base DN\n option.\n\n\n\n\n\n\nChange Bind Password:\n This button assignes a password to\n  authenticate the \nAuthentication Server\n.\n\n\n\n\n\n\nUse SSL:\n Enable SSL if the authentication server requires a secured port (e.g. 636).\n\n\n\n\n\n\nEnabled:\n This check-box is used to enable the keys that are inserted\n  in their respective fields.\n\n\n\n\n\n\nDeactivate:\n This button \nDeactivates/Activates\n the Gluu Server\n  accessibility for authentication.\n\n\n\n\n\n\nTest LDAP Connection:\n Use this button to check whether the provided\n  information is sufficient to connect to the authentication server. The\n  scan is done in real time.\n\n\n\n\n\n\nDefault Authentication Method\n#\n\n\nThis allows the Gluu Server administrator to select the default\nauthentication method and level for person authentication. Both methods are\nset to \"Default\" until additional authentication mechanisms are enabled\nvia \ncustom scripts\n. \n\n\n\n\n\n\n\n\nAuthentication Method\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAuthentication mode\n\n\nThis mode is used when users login to applications via Gluu\n\n\n\n\n\n\noxTrust authentication mode\n\n\nThis mode is used for authentication to the Gluu Server GUI\n\n\n\n\n\n\n\n\nGluu Server uses oxAuth as the first step of authentication in all kind \nof SSO protocols ( OpenID Connect, SAML, CAS )\n\n\n\n\n\n\nAuthentication mode: This mode defines the mode used for general authentication with Service Providers. The mode defined under this tab will not affect the users accessing the oxTrust administrator interface.\n\n\noxTrust authentication mode: This mode is used when the user is accessing the oxTrust administrator interface using the gluu server hostname.\n\n\nPassport Support: This mode uses third-party authentication e.g. Google+, Twitter, Facebook to authenticate users in Gluu Server.\n\n\nCustom Script Authenticaiton: This mode uses custom script and enabled in the oxTrust Admin UI.\n\n\n\n\nManage Custom Scripts\n#\n\n\nThe Gluu Server exposes interception scripts in places where it is common \nfor organizations to implement custom workflows, or changes to the \nlook and feel of the Gluu Server. The most commonly used scripts are \nfor authentication, authorization, and identity synchronization. Each\ntype of script has its own interface--in other words, what methods are\navailable. For more information, see the reference page detailing each type of \ninterception script\n.\n\n\nManage Registration\n#\n\n\nThe Gluu Server is shipped with a very basic user registration feature. The registration page can be found at \nhttps://<hostname>/identity/register\n. For custom enrollment requirements we recommend that you write a registration page and use SCIM to add the user record to the Gluu Server. Also, in some cases oxTrust is not Internet facing, which makes it a bad option for user registration. Net-net, Use this feature only if you have very basic requirements! See \nuser registration\n for more. \n\n\nThe tab has two options:\n\n\n\n\nDisable Captcha for registration form\n     \n\n\nConfigure Registration Form Attributes\n      \n\n\n\n\nDisable Captcha for registration form\n   \n\n\n\n\nThis option adds a required CAPTCHA to the registration form.     \n\n\nConfigure Registration Form Attributes\n    \n\n\n\n\nThis section allows you to manage the list of attributes displayed in the registration form. Search, select, add, and order desired attributes here.\n\n\nAttributes\n#\n\n\nAttributes are individual pieces of user data, like \nuid\n or \nemail\n, that are required by applications in order to identify a user and grant access to protected resources. The user attributes that are available in your federation service can be found on this page. By default, only \nactive\n attributes are visible. Use the \nShow All Attributes\n button to display the \ninactive\n attributes too. \n\n\nCustom attributes can be added by clicking the \nAdd Attribute\n button and completing the simple form. Note that custom attributes must already be present in the LDAP server in order for them to be available for release by the Gluu Server. Adding an attribute here is like registering it in the Gluu Server--in order to release an attribute during a SAML or OpenID Connect transaction, the Gluu Server needs to know it exists. \n\n\nAttributes, as they pertain to SSO, are covered more thoroughly in the \nSAML Attributes\n and \nOpenID Connect Scopes\n sections of the docs.\n\n\nCache Refresh\n#\n\n\nCache Refresh, a.k.a. LDAP Synchronization, is the process of connecting one or more existing backend LDAP servers, like Microsoft Active Directory, with the Gluu Server's local LDAP server. \nCache Refresh\n periodically searches these data sources, compares the results to previous searches, and if a changed user account is found, it is updated.The frequency of cache refresh is also set from this page via the \nPolling interval (minutes)\n. The \nkey attribute(s)\n is used to correlate a user if the user is found in more then one LDAP server. In this case, the two entries are joined. The source attributes specify which attributes will be pulled from the backend LDAP server. The backend server address, bind DN and other connection information is speciifed in the \nSource Backend LDAP Servers\n tab. More information on \nLDAP Syncronization\n can be found in the user management section of the docs. \n\n\nConfigure Log Viewer / View Log File\n#\n\n\nThis tool can be used to view file system logs. If you don't like to ssh, \nLog Viewer is your friend! Several common logs are preconfigured, or you can define \nnew logs by specifying the path.\n\n\nServer Status\n#\n\n\nThis page provides basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.\n\n\nCertificates\n#\n\n\nThe certificate page provides summary information about your SSL and SAML certificates.\n\n\nSAML\n#\n\n\nIf you deployed the Shibboleth SAML IDP or the Asimba SAML proxy during Gluu Server installation, you will see a link to manage inbound and outbound SAML requirements in the left hand navigation. Learn more about configuring and managing SAML in the \nSAML\n portion of the docs. \n\n\nOpenID Connect\n#\n\n\nThe OpenID Connect protocol is supported by default in all Gluu Server deployments. Learn more about configuring and managing OpenID Connect in the \nOpenID Connect\n portion of the docs. \n\n\nUMA\n#\n\n\nUMA (User-Managed Access) is an access management protocol that is also supported by default in all Gluu Server deployments. Learn more about configuring and managing UMA in the \nUMA\n portion of the docs.\n\n\nUsers\n#\n\n\nThe users tab allows the Gluu admin to perform various user management tasks like adding users, searching users, and importing users from a file. Learn more about managing users in the \nuser management\n portion of the docs. \n\n\nPersonal\n#\n\n\nThe personal tab allows an individual to view and manage (if enabled) their basic profile information. However, since oxTrust is designed to be an administrative tool it is often not Internet facing, making it a bad choice for user self-service profile management. In general, if user profile management is an important requirement for your organization, we recommend writing a separate app or forking our open source \ncredential management app\n.",
            "title": "oxTrust admin UI"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#oxtrust-administrative-graphical-user-interface-gui",
            "text": "",
            "title": "oxTrust Administrative Graphical User Interface (GUI)"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#overview",
            "text": "This section of the docs covers various features associated with managing your federation service via the Gluu Server interface (\"oxTrust\"). For more complicated topics and features, this document will link to dedicated sections within the docs where additional operational details are provided.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#accessing-the-ui",
            "text": "The Gluu Server administration interface is accessible by navigating to  https://hostname  (the one you provided during setup). When you \nfirst complete an installation, the default username is  admin  and \nthe password is the same as the  LDAP superuser  password.",
            "title": "Accessing the UI"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#welcome-page",
            "text": "After successful authentication the administrator is taken to the \nDashboard. Some basic information about the VM/server is displayed as \nwell as the server version, free memory, and disk space. In the top \nright there is a user icon which can be used to log out of oxTrust. \nThe left hand menu is used to navigate the admin interface.",
            "title": "Welcome Page"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#configuration",
            "text": "From the configuration tab, the Gluu Server administrator can manage \ncertain non-protocol related tasks.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#organization-configuration",
            "text": "There are three tabs in the organization configuration page:          System Configuration            SMTP Server Configuration            oxTrust Settings",
            "title": "Organization Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#system-configuration",
            "text": "Self-service password reset: Allow users to reset their password via email. In order for this feature to work, the admin will also need to perform  SMTP Server Configuration .          SCIM Support: Enable SCIM Support if you plan on using the SCIM protocol to move identity data from applications to Gluu and vice versa.          DNS Server(s): If the organization uses any custom  DNS Server(s) , the address should be added here.     Maximum Log Size (MB): By default the maximum size of the log file is 200 mb. This value can be increased or decreased depending on the organizations requirements.         User can edit their own profile: oxTrust has a profile section for each user. If this option is enabled, users will be able to log into oxTrust and edit the values associated with their user.          Contact Email: This email will be displayed on all error pages with a note instructing users to contact for troubleshooting and  assistance.",
            "title": "System Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#smtp-server-configuration",
            "text": "The Gluu Server needs a mail server in order to send notifications. All fields in this form are manadory and the configuration can be tested before confirmation.     Fields  Description      SMTP Host  HostName of the SMTP server    From Name  Name of the sender    From Email Address  Email Address of the Sender    Requires Authentication  This Checkbox is enables authentication of the sender    SMTP User Name  User Name of the SMTP    SMTP Password  Password for the SMTP    Requires SSL  This checkbox is to enable the SSL    SMTP Port  Port number of the SMTP server",
            "title": "SMTP Server Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#oxtrust-settings",
            "text": "From the oxTrust Settings page the administrator can find the oxTrust build date and number, and manage the organization name, logo, and favicon. This page also contains the name of the Gluu Server administrator group. Users added to this group will have administrator access to the Gluu Server.",
            "title": "oxTrust Settings"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#json-configuration",
            "text": "There are three tabs included in the  JSON Configuration  menu:",
            "title": "JSON Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#oxtrust-configuration",
            "text": "From this tab you can access and edit the oxTrust JSON configuration file. \nClick the update button at the bottom of the page to save any changes.",
            "title": "oxTrust Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#whitelistblacklist-uris",
            "text": "An administrator can allow or deny access to URI's by updating JSON properties in the oxTrust UI",
            "title": "WhiteList/BlackList URIs"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#configure-whitelistblacklist-of-uris",
            "text": "Click on  Configuration  >  JSON Properties  Click  oxTrust properties  tab and search for whitelist and blacklist label.",
            "title": "Configure WhiteList/BlackList of URIs"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#oxauth-configuration",
            "text": "The oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. \nThis page also contains the supported response, grants, and algorithms.",
            "title": "oxAuth Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#oxtrust-import-person-configuration",
            "text": "The oxTrust Import Person Configuration page contains the configuration for \nthe file method of importing users into the Gluu Server. The administrator \ncan import users from an  xls  file which must be defined in this tab to import \ndata in the LDAP attributes. The default format should contain the following fields:    givenname  sn  uid  firstname, \netc..",
            "title": "oxTrust Import Person Configuration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#manage-authentication",
            "text": "",
            "title": "Manage Authentication"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#manage-ldap-authentication",
            "text": "This section allows the Gluu Server administrator to define how and\nwhere the server should connect to authenticate users. If it is a remote\nLDAP/Active Directory server, the values are required. Put the details\nof the data source that you are trying to connect with Gluu Server. For\nexample, the data source can be your back-end Active Directory, or your\nlocal LDAP server.     Name:  This field contains the name of the authentication server.    Bind DN:  The  Username  for the authentication server (local\n  LDAP/remote LDAP/remote Active Directory) goes here.    Max Connections:  This option can be used to define the total number\n  of simultaneous connections allowed for reading local LDAP/remote Active\n  Directory/remote LDAP.    Primary Key:  This field contains the primary key to connect to the\n  authentication server (i.e. SAMAccountName/uid/mail etc.).     Local Primary Key:  This field contains the Gluu Server's internal LDAP primary key. Generally the key is either  uid  or  mail .     Server:  The unique name of the authentication server and port number\n  (e.g. auth.company.org:636) goes here.    Base DN:  Add base DNs in this field to allow the Gluu Server to\n  connect and search the LDAP server. Every directory tree should be added\n  separately using the  Add Base DN  option.    Change Bind Password:  This button assignes a password to\n  authenticate the  Authentication Server .    Use SSL:  Enable SSL if the authentication server requires a secured port (e.g. 636).    Enabled:  This check-box is used to enable the keys that are inserted\n  in their respective fields.    Deactivate:  This button  Deactivates/Activates  the Gluu Server\n  accessibility for authentication.    Test LDAP Connection:  Use this button to check whether the provided\n  information is sufficient to connect to the authentication server. The\n  scan is done in real time.",
            "title": "Manage LDAP Authentication"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#default-authentication-method",
            "text": "This allows the Gluu Server administrator to select the default\nauthentication method and level for person authentication. Both methods are\nset to \"Default\" until additional authentication mechanisms are enabled\nvia  custom scripts .      Authentication Method  Description      Authentication mode  This mode is used when users login to applications via Gluu    oxTrust authentication mode  This mode is used for authentication to the Gluu Server GUI     Gluu Server uses oxAuth as the first step of authentication in all kind \nof SSO protocols ( OpenID Connect, SAML, CAS )    Authentication mode: This mode defines the mode used for general authentication with Service Providers. The mode defined under this tab will not affect the users accessing the oxTrust administrator interface.  oxTrust authentication mode: This mode is used when the user is accessing the oxTrust administrator interface using the gluu server hostname.  Passport Support: This mode uses third-party authentication e.g. Google+, Twitter, Facebook to authenticate users in Gluu Server.  Custom Script Authenticaiton: This mode uses custom script and enabled in the oxTrust Admin UI.",
            "title": "Default Authentication Method"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#manage-custom-scripts",
            "text": "The Gluu Server exposes interception scripts in places where it is common \nfor organizations to implement custom workflows, or changes to the \nlook and feel of the Gluu Server. The most commonly used scripts are \nfor authentication, authorization, and identity synchronization. Each\ntype of script has its own interface--in other words, what methods are\navailable. For more information, see the reference page detailing each type of  interception script .",
            "title": "Manage Custom Scripts"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#manage-registration",
            "text": "The Gluu Server is shipped with a very basic user registration feature. The registration page can be found at  https://<hostname>/identity/register . For custom enrollment requirements we recommend that you write a registration page and use SCIM to add the user record to the Gluu Server. Also, in some cases oxTrust is not Internet facing, which makes it a bad option for user registration. Net-net, Use this feature only if you have very basic requirements! See  user registration  for more.   The tab has two options:   Disable Captcha for registration form        Configure Registration Form Attributes          Disable Captcha for registration form       This option adds a required CAPTCHA to the registration form.       Configure Registration Form Attributes        This section allows you to manage the list of attributes displayed in the registration form. Search, select, add, and order desired attributes here.",
            "title": "Manage Registration"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#attributes",
            "text": "Attributes are individual pieces of user data, like  uid  or  email , that are required by applications in order to identify a user and grant access to protected resources. The user attributes that are available in your federation service can be found on this page. By default, only  active  attributes are visible. Use the  Show All Attributes  button to display the  inactive  attributes too.   Custom attributes can be added by clicking the  Add Attribute  button and completing the simple form. Note that custom attributes must already be present in the LDAP server in order for them to be available for release by the Gluu Server. Adding an attribute here is like registering it in the Gluu Server--in order to release an attribute during a SAML or OpenID Connect transaction, the Gluu Server needs to know it exists.   Attributes, as they pertain to SSO, are covered more thoroughly in the  SAML Attributes  and  OpenID Connect Scopes  sections of the docs.",
            "title": "Attributes"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#cache-refresh",
            "text": "Cache Refresh, a.k.a. LDAP Synchronization, is the process of connecting one or more existing backend LDAP servers, like Microsoft Active Directory, with the Gluu Server's local LDAP server.  Cache Refresh  periodically searches these data sources, compares the results to previous searches, and if a changed user account is found, it is updated.The frequency of cache refresh is also set from this page via the  Polling interval (minutes) . The  key attribute(s)  is used to correlate a user if the user is found in more then one LDAP server. In this case, the two entries are joined. The source attributes specify which attributes will be pulled from the backend LDAP server. The backend server address, bind DN and other connection information is speciifed in the  Source Backend LDAP Servers  tab. More information on  LDAP Syncronization  can be found in the user management section of the docs.",
            "title": "Cache Refresh"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#configure-log-viewer-view-log-file",
            "text": "This tool can be used to view file system logs. If you don't like to ssh, \nLog Viewer is your friend! Several common logs are preconfigured, or you can define \nnew logs by specifying the path.",
            "title": "Configure Log Viewer / View Log File"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#server-status",
            "text": "This page provides basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.",
            "title": "Server Status"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#certificates",
            "text": "The certificate page provides summary information about your SSL and SAML certificates.",
            "title": "Certificates"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#saml",
            "text": "If you deployed the Shibboleth SAML IDP or the Asimba SAML proxy during Gluu Server installation, you will see a link to manage inbound and outbound SAML requirements in the left hand navigation. Learn more about configuring and managing SAML in the  SAML  portion of the docs.",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#openid-connect",
            "text": "The OpenID Connect protocol is supported by default in all Gluu Server deployments. Learn more about configuring and managing OpenID Connect in the  OpenID Connect  portion of the docs.",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#uma",
            "text": "UMA (User-Managed Access) is an access management protocol that is also supported by default in all Gluu Server deployments. Learn more about configuring and managing UMA in the  UMA  portion of the docs.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#users",
            "text": "The users tab allows the Gluu admin to perform various user management tasks like adding users, searching users, and importing users from a file. Learn more about managing users in the  user management  portion of the docs.",
            "title": "Users"
        },
        {
            "location": "/admin-guide/oxtrust-ui/#personal",
            "text": "The personal tab allows an individual to view and manage (if enabled) their basic profile information. However, since oxTrust is designed to be an administrative tool it is often not Internet facing, making it a bad choice for user self-service profile management. In general, if user profile management is an important requirement for your organization, we recommend writing a separate app or forking our open source  credential management app .",
            "title": "Personal"
        },
        {
            "location": "/admin-guide/custom-script/",
            "text": "Interception Scripts\n#\n\n\nOverview\n#\n\n\nInterception scripts allow the Gluu Server to support unique requirements for many aspects of a central authentication and authorization service. Interception scripts can be written in \nJython\n. Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers. Jython enables developers to use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.\n\n\nThe web interface for Custom Scripts can be accessed by navigating to \nConfiguration\n > \nManage Custom Scritps\n.\n\n\nInterception Script Methods\n#\n\n\nThere are three methods that inherit a base interface\n\n\n\n\n\n\n\n\nInherited Methods\n\n\nMethod description\n\n\n\n\n\n\n\n\n\n\ndef init(self, configurationAttributes)\n\n\nThis method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc\n\n\n\n\n\n\ndef destroy(self, configurationAttributes)\n\n\nThis method is called once to destroy events. It can be used to free resource and objects created in the \ninit()\n method\n\n\n\n\n\n\ndef getApiVersion(self)\n\n\nThe \ngetApiVersion\n method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return \n1\n\n\n\n\n\n\n\n\nThe \nconfigurationAttributes\n parameter is \njava.util.Map<String, SimpleCustomProperty>\n with properties specified in \noxConfigurationProperty\n attributes.\n\n\nThe script manager only loads enabled scripts. Hence, after enabling or disabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script, respectively. All scripts are stored in LDAP in the\n\nou=scripts,o=<org_inum>,o=gluu\n branch.\n\n\nHere is a sample entry:\n\n\n    dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\n    objectClass: oxCustomScript\n    objectClass: top\n    description: <custom_script_description>\n    displayName: <display_name>\n    gluuStatus: true\n    inum: @!1111!031C.4A65\n    oxLevel: <priority>\n    oxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\n    oxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\n    oxRevision: <revision>\n    oxScript: <custom_script>\n    oxScriptType: <script_type>\n    programmingLanguage: python\n\n\n\n\nThe script manager reloads scripts automatically without needing to\nrestart the application once \noxRevision\n is increased.\n\n\nInterception Script Logs\n#\n\n\nThe log files regarding interception scripts are stored in the\n\noxauth.log\n file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in \noxauth_script.log\n\nand the oxTrust custom script logs are stored in the\n\noxtrust_script.log\n. Please refer to these log files to troubleshoot errors in\nthe interception scripts or following the workflow of the script.\n\n\nMore details on Logs can be found in \nLog Management\n\n\nPerson Authentication\n#\n\n\nFor a list of pre-written, open source Gluu authentication scripts, \nview our \nserver integrations\n\n\nAn authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth offers basic username/password authentication. Authentication \nscripts allow an admin to implement more secure workflows to meet\nan organizations security requirements. It extends the base script type\nwith the \ninit\n, \ndestroy\n and \ngetApiVersion\n methods but also adds the\nfollowing methods:\n\n\n\n\n\n\n\n\nMethod\n\n\nisValidAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nusageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if \nisValidAuthenticationMethod\n returns False. As a result it should return the reserved authentication method name\n\n\n\n\n\n\nMethod Parameter\n\n\nuageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authenticate(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is java integer\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef prepareForStep(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is a java integer\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getCountAuthenticationSteps(self, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method should return an integer value with the number of steps in the authentication workflow\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getExtraParametersForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getPageForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page \n/login.xhtml\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef logout(self, configurationAttributes, requestParameters)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns \nFalse\n. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameters\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nrequestParameters\n is \njava.util.Map<String, String[]>\n\n\n\n\n\n\n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Authentication Script\n\n\n\n\nCertificate Authentication\n#\n\n\nGluu Server CE offers a person authentication module enabling Certificate Authentication.\nThe image below contains the design diagram for this module.\n\n\n\n\nThe script has a few properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nAllowed Values\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nchain_cert_file_path\n\n\nmandatory property pointing to certificate chains in \npem\n format\n\n\nfile path\n\n\n/etc/certs/chain_cert.pem\n\n\n\n\n\n\nmap_user_cert\n\n\nspecifies if the script should map new user to local account\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_generic_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_path_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_oscp_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_crl_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\ncrl_max_response_size\n\n\nspecifies the maximum allowed size of [CRL][crl] response\n\n\nInteger > 0\n\n\n2\n\n\n\n\n\n\n\n\n\n\nSample Certificate Authentication Script\n        \n\n\n\n\nUpdate User\n#\n\n\noxTrust allows an admin to add and modify users which belong to groups.\nIn order to simplify this process and apply repeating actions, oxTrust\nsupports an Update User script. In this script it is possible to modify\na person entry before it is stored in LDAP.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateUser(self, user, persisted, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method updates the user\n\n\n\n\n\n\nMethod Parameter\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\npersisted is a boolean value to specify the operation type: add/modify\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample Update User Script\n\n\n\n\nUser Registration\n#\n\n\noxTrust allows users to perform self-registration. In order to\ncontrol/validate user registrations there is the user registration\nscript type.\n\n\nThis script type adds three methods to the base script type:\n\n\n\n\n\n\n\n\nMethods\n\n\ndef initRegistration(self, user, requestParameters, configurationAttributes)\ndef preRegistration(self, user, requestParameters, configurationAttributes)\ndef postRegistration(self, user, requestParameters, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method enables/disables user account based on the custom property's value\n\n\n\n\n\n\nMethod Parameters\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nrequestParameters\n is \njava.util.Map<String, String[]>\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\nCustom Property\n\n\nenable_user\n--> defaults to \nfalse\n\n\n\n\n\n\nDescription\n\n\nIt controls whether or not this user account will be ready for loggin into the Gluu Server CE instance\n\n\n\n\n\n\n\n\nThe methods are executed in the following order:\n\n\n\n\n\n\n\n\nOrder\n\n\nMethod\n\n\nExpected Return\n\n\n\n\n\n\n\n\n\n\nFirst\n\n\ninitRegistration()\n\n\nTrue/False\n\n\n\n\n\n\nSecond\n\n\npreRegistration()\n\n\nTrue/False\n\n\n\n\n\n\nThird\n\n\npostRegistration()\n\n\nTrue/False\n\n\n\n\n\n\n\n\nFirst oxTrust executes the \ninitRegistration\n method to do an initial\nuser entry update. The \npreRegistration\n method is called before storing\nthe user entry in LDAP. Hence in this script it is possible to validate\nthe user entry. The \npostRegistration\n method is called after\nsuccessfully storing the user entry in LDAP. In this method, for\nexample, the script can send an e-mail or send notifications to other\norganization systems about the new user entry.\n\n\n\n\nSample User Registration Script\n\n\n\n\nClient Registration\n#\n\n\noxAuth implements the \nOpenID Connect dynamic client\nregistration\n\nspecification. All new clients have the same default access scopes and\nattributes except password and client ID. The Client Registration script\nallows an admin to modify this limitation. In this script it is possible\nto get a registration request, analyze it, and apply customizations to\nregistered clients. For example, a script can give access to specified\nscopes if \nredirect_uri\n belongs to a specified service or domain.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateClient(self, registerRequest, client, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nregisterRequest\n is \norg.xdi.oxauth.client.RegisterRequest\nclient\n is \norg.xdi.oxauth.model.registration.Client\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Client Registration Script\n\n\n\n\nDynamic Scopes\n#\n\n\nThe dynamic scope custom script allows the parsing of token returned from \nuser_info endpoint\n into \nLDAP attributes. The \nid_token\n is returned from \nuser_info endpoint\n and the values are dynamically placed \nin the LDAP attributes in Gluu Server.\n\n\n\n\nSample Dynamic Scope Script\n \n\n\n\n\nID Generator\n#\n\n\nBy default oxAuth/oxTrust uses an internal method to generate unique\nidentifiers for new person/client, etc. entries. In most cases the\nformat of the ID is:\n\n\n'!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.\n\n\nThe ID generation script enables an admin to implement custom ID\ngeneration rules.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef generateId(self, appId, idType, idPrefix, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nappId\n is application ID\nidType\n is ID Type\nidPrefix\n is ID Prefix\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample ID Generation Script\n      \n\n\n\n\nCache Refresh\n#\n\n\nIn order to integrate an interception script with an existing\nauthentication server oxTrust provides a mechanism called \nCache\nRefresh\n to copy\nuser data to the local LDAP server. During this process it is possible\nto specify key attribute(s) and specify attribute name transformations.\nThere are also cases when it can be used to overwrite attribute values\nor to add new attributes based on other attribute values.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateUser(self, user, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample Cache Refresh Script\n\n\n\n\nUMA Authorization Policies\n#\n\n\nThis is a special script for UMA. It allows an admin to protect UMA\nscopes with policies. It is possible to add more than one UMA policy to\nan UMA scope. On requesting access to a specified resource, the\napplication should call specified UMA policies in order to grant or deny\naccess.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authorize(self, authorizationContext, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nauthorizationContext\n is \norg.xdi.oxauth.service.uma.authorization.AuthorizationContext\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Authorization Script\n\n\n\n\nApplication Session Management\n#\n\n\nThis script allows an admin to notify 3rd party systems about requests\nto end an OAuth session. This method is triggered by an oxAuth call to\nthe \nend_session\n endpoint. It's possible to add multiple scripts with\nthis type. The application should call all of them according to the\nlevel.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef endSession(self, httpRequest, authorizationGrant, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nhttpRequest\n is \njavax.servlet.http.HttpServletRequest\nauthorizationGrant\n is \norg.xdi.oxauth.model.common.AuthorizationGrant\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Application Session Management Script",
            "title": "Interception Scripts"
        },
        {
            "location": "/admin-guide/custom-script/#interception-scripts",
            "text": "",
            "title": "Interception Scripts"
        },
        {
            "location": "/admin-guide/custom-script/#overview",
            "text": "Interception scripts allow the Gluu Server to support unique requirements for many aspects of a central authentication and authorization service. Interception scripts can be written in  Jython . Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers. Jython enables developers to use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.  The web interface for Custom Scripts can be accessed by navigating to  Configuration  >  Manage Custom Scritps .",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/custom-script/#interception-script-methods",
            "text": "There are three methods that inherit a base interface     Inherited Methods  Method description      def init(self, configurationAttributes)  This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc    def destroy(self, configurationAttributes)  This method is called once to destroy events. It can be used to free resource and objects created in the  init()  method    def getApiVersion(self)  The  getApiVersion  method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return  1     The  configurationAttributes  parameter is  java.util.Map<String, SimpleCustomProperty>  with properties specified in  oxConfigurationProperty  attributes.  The script manager only loads enabled scripts. Hence, after enabling or disabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script, respectively. All scripts are stored in LDAP in the ou=scripts,o=<org_inum>,o=gluu  branch.  Here is a sample entry:      dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\n    objectClass: oxCustomScript\n    objectClass: top\n    description: <custom_script_description>\n    displayName: <display_name>\n    gluuStatus: true\n    inum: @!1111!031C.4A65\n    oxLevel: <priority>\n    oxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\n    oxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\n    oxRevision: <revision>\n    oxScript: <custom_script>\n    oxScriptType: <script_type>\n    programmingLanguage: python  The script manager reloads scripts automatically without needing to\nrestart the application once  oxRevision  is increased.",
            "title": "Interception Script Methods"
        },
        {
            "location": "/admin-guide/custom-script/#interception-script-logs",
            "text": "The log files regarding interception scripts are stored in the oxauth.log  file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in  oxauth_script.log \nand the oxTrust custom script logs are stored in the oxtrust_script.log . Please refer to these log files to troubleshoot errors in\nthe interception scripts or following the workflow of the script.  More details on Logs can be found in  Log Management",
            "title": "Interception Script Logs"
        },
        {
            "location": "/admin-guide/custom-script/#person-authentication",
            "text": "For a list of pre-written, open source Gluu authentication scripts, \nview our  server integrations  An authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth offers basic username/password authentication. Authentication \nscripts allow an admin to implement more secure workflows to meet\nan organizations security requirements. It extends the base script type\nwith the  init ,  destroy  and  getApiVersion  methods but also adds the\nfollowing methods:     Method  isValidAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return  True  or  False    Method Parameter  usageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if  isValidAuthenticationMethod  returns False. As a result it should return the reserved authentication method name    Method Parameter  uageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def authenticate(self, configurationAttributes, requestParameters, step)      Description  This method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is java integer configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def prepareForStep(self, configurationAttributes, requestParameters, step)      Description  This method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is a java integer configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getCountAuthenticationSteps(self, configurationAttributes)      Description  This method should return an integer value with the number of steps in the authentication workflow    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getExtraParametersForStep(self, configurationAttributes, step)      Description  This method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integer        Method  def getPageForStep(self, configurationAttributes, step)      Description  This method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page  /login.xhtml    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integer        Method  def logout(self, configurationAttributes, requestParameters)      Description  This method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns  False . As a result it should either return  True  or  False    Method Parameters  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> requestParameters  is  java.util.Map<String, String[]>     This script can be used in oxAuth application only.   Sample Authentication Script",
            "title": "Person Authentication"
        },
        {
            "location": "/admin-guide/custom-script/#certificate-authentication",
            "text": "Gluu Server CE offers a person authentication module enabling Certificate Authentication.\nThe image below contains the design diagram for this module.   The script has a few properties:     Property  Description  Allowed Values  example      chain_cert_file_path  mandatory property pointing to certificate chains in  pem  format  file path  /etc/certs/chain_cert.pem    map_user_cert  specifies if the script should map new user to local account  true/false  true    use_generic_validator  enable/disable specific certificate validation  true/false  false    use_path_validator  enable/disable specific certificate validation  true/false  true    use_oscp_validator  enable/disable specific certificate validation  true/false  false    use_crl_validator  enable/disable specific certificate validation  true/false  false    crl_max_response_size  specifies the maximum allowed size of [CRL][crl] response  Integer > 0  2      Sample Certificate Authentication Script",
            "title": "Certificate Authentication"
        },
        {
            "location": "/admin-guide/custom-script/#update-user",
            "text": "oxTrust allows an admin to add and modify users which belong to groups.\nIn order to simplify this process and apply repeating actions, oxTrust\nsupports an Update User script. In this script it is possible to modify\na person entry before it is stored in LDAP.  This script type adds only one method to the base script type:     Method  def updateUser(self, user, persisted, configurationAttributes)      Description  This method updates the user    Method Parameter  user  is  org.gluu.oxtrust.model.GluuCustomPerson persisted is a boolean value to specify the operation type: add/modify configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample Update User Script",
            "title": "Update User"
        },
        {
            "location": "/admin-guide/custom-script/#user-registration",
            "text": "oxTrust allows users to perform self-registration. In order to\ncontrol/validate user registrations there is the user registration\nscript type.  This script type adds three methods to the base script type:     Methods  def initRegistration(self, user, requestParameters, configurationAttributes) def preRegistration(self, user, requestParameters, configurationAttributes) def postRegistration(self, user, requestParameters, configurationAttributes)      Description  This method enables/disables user account based on the custom property's value    Method Parameters  user  is  org.gluu.oxtrust.model.GluuCustomPerson requestParameters  is  java.util.Map<String, String[]> configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>    Custom Property  enable_user --> defaults to  false    Description  It controls whether or not this user account will be ready for loggin into the Gluu Server CE instance     The methods are executed in the following order:     Order  Method  Expected Return      First  initRegistration()  True/False    Second  preRegistration()  True/False    Third  postRegistration()  True/False     First oxTrust executes the  initRegistration  method to do an initial\nuser entry update. The  preRegistration  method is called before storing\nthe user entry in LDAP. Hence in this script it is possible to validate\nthe user entry. The  postRegistration  method is called after\nsuccessfully storing the user entry in LDAP. In this method, for\nexample, the script can send an e-mail or send notifications to other\norganization systems about the new user entry.   Sample User Registration Script",
            "title": "User Registration"
        },
        {
            "location": "/admin-guide/custom-script/#client-registration",
            "text": "oxAuth implements the  OpenID Connect dynamic client\nregistration \nspecification. All new clients have the same default access scopes and\nattributes except password and client ID. The Client Registration script\nallows an admin to modify this limitation. In this script it is possible\nto get a registration request, analyze it, and apply customizations to\nregistered clients. For example, a script can give access to specified\nscopes if  redirect_uri  belongs to a specified service or domain.  This script type adds only one method to the base script type:     Method  def updateClient(self, registerRequest, client, configurationAttributes)      Method Parameter  registerRequest  is  org.xdi.oxauth.client.RegisterRequest client  is  org.xdi.oxauth.model.registration.Client configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Client Registration Script",
            "title": "Client Registration"
        },
        {
            "location": "/admin-guide/custom-script/#dynamic-scopes",
            "text": "The dynamic scope custom script allows the parsing of token returned from  user_info endpoint  into \nLDAP attributes. The  id_token  is returned from  user_info endpoint  and the values are dynamically placed \nin the LDAP attributes in Gluu Server.   Sample Dynamic Scope Script",
            "title": "Dynamic Scopes"
        },
        {
            "location": "/admin-guide/custom-script/#id-generator",
            "text": "By default oxAuth/oxTrust uses an internal method to generate unique\nidentifiers for new person/client, etc. entries. In most cases the\nformat of the ID is:  '!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.  The ID generation script enables an admin to implement custom ID\ngeneration rules.  This script type adds only one method to the base script type:     Method  def generateId(self, appId, idType, idPrefix, configurationAttributes)      Method Parameter  appId  is application ID idType  is ID Type idPrefix  is ID Prefix user  is  org.gluu.oxtrust.model.GluuCustomPerson configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample ID Generation Script",
            "title": "ID Generator"
        },
        {
            "location": "/admin-guide/custom-script/#cache-refresh",
            "text": "In order to integrate an interception script with an existing\nauthentication server oxTrust provides a mechanism called  Cache\nRefresh  to copy\nuser data to the local LDAP server. During this process it is possible\nto specify key attribute(s) and specify attribute name transformations.\nThere are also cases when it can be used to overwrite attribute values\nor to add new attributes based on other attribute values.  This script type adds only one method to the base script type:     Method  def updateUser(self, user, configurationAttributes)      Method Parameter  user  is  org.gluu.oxtrust.model.GluuCustomPerson configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample Cache Refresh Script",
            "title": "Cache Refresh"
        },
        {
            "location": "/admin-guide/custom-script/#uma-authorization-policies",
            "text": "This is a special script for UMA. It allows an admin to protect UMA\nscopes with policies. It is possible to add more than one UMA policy to\nan UMA scope. On requesting access to a specified resource, the\napplication should call specified UMA policies in order to grant or deny\naccess.  This script type adds only one method to the base script type:     Method  def authorize(self, authorizationContext, configurationAttributes)      Method Parameter  authorizationContext  is  org.xdi.oxauth.service.uma.authorization.AuthorizationContext configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Authorization Script",
            "title": "UMA Authorization Policies"
        },
        {
            "location": "/admin-guide/custom-script/#application-session-management",
            "text": "This script allows an admin to notify 3rd party systems about requests\nto end an OAuth session. This method is triggered by an oxAuth call to\nthe  end_session  endpoint. It's possible to add multiple scripts with\nthis type. The application should call all of them according to the\nlevel.  This script type adds only one method to the base script type:     Method  def endSession(self, httpRequest, authorizationGrant, configurationAttributes)      Method Parameter  httpRequest  is  javax.servlet.http.HttpServletRequest authorizationGrant  is  org.xdi.oxauth.model.common.AuthorizationGrant configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Application Session Management Script",
            "title": "Application Session Management"
        },
        {
            "location": "/authn-guide/intro/",
            "text": "User Authentication Introduction\n#\n\n\nThe Gluu Server is most frequently used to protect web-accessible resources. People navigate to a protected webpage and the application redirects the person to the Gluu Server for authentication and authorization. The Gluu Server determines who the person is, and whether the person has the right to access the protected page. After a successful authentication, the Gluu Server redirects the person back to the protected page with an active session.\n\n\nThe Gluu Server is very flexible in handling authentication. By default, the Gluu Server uses username and password authentication. However, using the Gluu Server's interception script infrastructure, you can define multiple authentication methods and custom business logic for complex multi-step authentication workflows. You can have multiple authentication mechanisms active at the same time--Web or mobile clients can request a certain authentication type by using standard OpenID Connect request parameters. \n\n\nInterception scripts allow you to configure authentication processes and customize how they are applied. Sophisticated authentication logic can implement adaptive authentication. For example, you can add extra authentication steps based on contextual information such as fraud scores, location, or browser profiling. You can also customize the look and feel of a web authentication: html, css, images and javascript can be externalized and managed by your organization.\n\n\nBasic Authentication\n#\n\n\nBy default, LDAP is used to authenticate usernames and passwords. \nYou can set a default authentication method for access to external applications, \nas well as access to the Gluu Server UI. Until additional authentication mechanisms \nare enabled via custom scripts, default authentication will always be some \nvariation of username and password. \n\n\nLearn how to \nconfigure basic authentication\n.\n\n\nConfigure Social Authentication\n#\n\n\nDuring deployment of the Gluu Server you are presented with an option to deploy Passport.js. With over 300 existing \"strategies\", Passport.js provides a crowd-sourced approach to supporting social login at many popular consumer IDPs. Passport not only normalizes authentication, it also provides a standard mapping for user claims.\n\n\nLearn how to \nconfigure social login\n. \n\n\nConfigure Multi-Factor Authentication\n#\n\n\nInterception scripts are used by the Gluu Server to implement multi-factor authentication. A number of scripts are included out-of-the-box, including scripts to support FIDO U2F tokens (like Vasco and Yubikey), Gluu's free Android and iOS two-factor authentication application called Super Gluu, certificate authentication, Duo Security, One-Time Passwords, and more. \n\n\nView all pre-written Gluu Server \ncustom authentication scripts\n. Implementation guides can be found in the pages that follow in this User Authentication Guide.\n\n\nOrganizations frequently have custom requirements for authentication. For instance, an organization may want to implement a policy that enforces two-factor authentication only for users from certain a group; or only when a user tries to access a protected resource from an unknown IP address. Custom interception scripts enable enforcement of these types of policies, as well as any other business driven policy that can be scripted. \n\n\nReview our \ncustom authentication script tutorial\n, where we demonstrate how to write a script to implement OTP authentication using Twilio to send an SMS code for a two-step out-of-band authentication mechanism. \n\n\nSupport Multiple Authentication Mechanisms\n#\n\n\nAll authentications that happen at the Gluu Server are routed through oxAuth, the software that includes Gluu's OpenID Connect Provider (OP) implementation. Using the OpenID Connect \nacr_value\n, an application can request a certain type of authentication at the Gluu Server. This allows you to support multiple authetication mechanisms, and allow applications to request a specific mechanism on a case-by-case basis. Learn more about the \nacr_values\n that are supported out-of-the-box by the Gluu Server in the \nOpenID Connect docs\n.\n\n\n\n\nNote\n\n\nSince all authentications are routed through oxAuth, your Gluu Server can take an incoming SAML or CAS assertion from a 3rd party IDP, for example ADFS, and use that as the basis for an OIDC session, providing seamless SSO across all your apps regardless of protocol.\n\n\n\n\nConfiguring Account Lockout\n#\n\n\nThe Gluu Server is shipped with a custom authentication script that implements a \nbasic account lockout policy which will deactivate a users account \nafter a set number of consecutive failed login attempts.\n\n\nThe script uses authentication settings provided in the \nManage LDAP Authentication\n tab within \nConfiguration\n > \nManage Authentication\n. In case the set threshold of failed logins is reached, the \u201cgluuStatus\u201d attribute of the user in question will be set to \ninactive\n and login counter is reset to zero. The login counter will also be reset to zero if several unsuccessful login attempts are finally followed by a successful one (before exceeding the limit). You can re-enable a locked account by settings \nits \ngluuStatus\n attribute back to \nactive\n via web UI.\n\n\nTo configure this feature navigate to \nConfiguration\n > \nManage custom scripts\n and find \nbasic_lock\n script on the \nPerson Authentication\n tab. There are 2 configurable properties:\n\n\n\n\n\n\nInvalid_login_count_attribute\n sets the name of the attribute used to store the current amount of failed login attempts. It assumes your schema already allows such an attribute to appear in user entries. The default attribute is \noxCountInvalidLogin\n and it\u2019s already supported by Gluu\u2019s LDAP schema.\n\n\n\n\n\n\nMaximum_invalid_login_attemps\n sets the threshold for number of failed login attempts before the user gets locked out.\n\n\n\n\n\n\n\n\n\n\nAfter script is configured tick the \nEnabled\n checkbox \n\n\nClick the \nUpdate\n button \n\n\nClick on \nConfiguration\n > \nManage Authentication\n on the left menu and select \nDefault Authentication Method\n tab. \n\n\nSelect \nbasic_lock\n authentication method for oxAuth and/or oxTrust.\n\n\nClick the \nUpdate\n button there.\n\n\n\n\n\nCustomizing the Login Page\n#\n\n\nLearn how to customize the look and feel of Gluu Server pages in the \nDesign Customizations\n section of the Operations Guide.",
            "title": "User Authentication Introduction"
        },
        {
            "location": "/authn-guide/intro/#user-authentication-introduction",
            "text": "The Gluu Server is most frequently used to protect web-accessible resources. People navigate to a protected webpage and the application redirects the person to the Gluu Server for authentication and authorization. The Gluu Server determines who the person is, and whether the person has the right to access the protected page. After a successful authentication, the Gluu Server redirects the person back to the protected page with an active session.  The Gluu Server is very flexible in handling authentication. By default, the Gluu Server uses username and password authentication. However, using the Gluu Server's interception script infrastructure, you can define multiple authentication methods and custom business logic for complex multi-step authentication workflows. You can have multiple authentication mechanisms active at the same time--Web or mobile clients can request a certain authentication type by using standard OpenID Connect request parameters.   Interception scripts allow you to configure authentication processes and customize how they are applied. Sophisticated authentication logic can implement adaptive authentication. For example, you can add extra authentication steps based on contextual information such as fraud scores, location, or browser profiling. You can also customize the look and feel of a web authentication: html, css, images and javascript can be externalized and managed by your organization.",
            "title": "User Authentication Introduction"
        },
        {
            "location": "/authn-guide/intro/#basic-authentication",
            "text": "By default, LDAP is used to authenticate usernames and passwords. \nYou can set a default authentication method for access to external applications, \nas well as access to the Gluu Server UI. Until additional authentication mechanisms \nare enabled via custom scripts, default authentication will always be some \nvariation of username and password.   Learn how to  configure basic authentication .",
            "title": "Basic Authentication"
        },
        {
            "location": "/authn-guide/intro/#configure-social-authentication",
            "text": "During deployment of the Gluu Server you are presented with an option to deploy Passport.js. With over 300 existing \"strategies\", Passport.js provides a crowd-sourced approach to supporting social login at many popular consumer IDPs. Passport not only normalizes authentication, it also provides a standard mapping for user claims.  Learn how to  configure social login .",
            "title": "Configure Social Authentication"
        },
        {
            "location": "/authn-guide/intro/#configure-multi-factor-authentication",
            "text": "Interception scripts are used by the Gluu Server to implement multi-factor authentication. A number of scripts are included out-of-the-box, including scripts to support FIDO U2F tokens (like Vasco and Yubikey), Gluu's free Android and iOS two-factor authentication application called Super Gluu, certificate authentication, Duo Security, One-Time Passwords, and more.   View all pre-written Gluu Server  custom authentication scripts . Implementation guides can be found in the pages that follow in this User Authentication Guide.  Organizations frequently have custom requirements for authentication. For instance, an organization may want to implement a policy that enforces two-factor authentication only for users from certain a group; or only when a user tries to access a protected resource from an unknown IP address. Custom interception scripts enable enforcement of these types of policies, as well as any other business driven policy that can be scripted.   Review our  custom authentication script tutorial , where we demonstrate how to write a script to implement OTP authentication using Twilio to send an SMS code for a two-step out-of-band authentication mechanism.",
            "title": "Configure Multi-Factor Authentication"
        },
        {
            "location": "/authn-guide/intro/#support-multiple-authentication-mechanisms",
            "text": "All authentications that happen at the Gluu Server are routed through oxAuth, the software that includes Gluu's OpenID Connect Provider (OP) implementation. Using the OpenID Connect  acr_value , an application can request a certain type of authentication at the Gluu Server. This allows you to support multiple authetication mechanisms, and allow applications to request a specific mechanism on a case-by-case basis. Learn more about the  acr_values  that are supported out-of-the-box by the Gluu Server in the  OpenID Connect docs .   Note  Since all authentications are routed through oxAuth, your Gluu Server can take an incoming SAML or CAS assertion from a 3rd party IDP, for example ADFS, and use that as the basis for an OIDC session, providing seamless SSO across all your apps regardless of protocol.",
            "title": "Support Multiple Authentication Mechanisms"
        },
        {
            "location": "/authn-guide/intro/#configuring-account-lockout",
            "text": "The Gluu Server is shipped with a custom authentication script that implements a \nbasic account lockout policy which will deactivate a users account \nafter a set number of consecutive failed login attempts.  The script uses authentication settings provided in the  Manage LDAP Authentication  tab within  Configuration  >  Manage Authentication . In case the set threshold of failed logins is reached, the \u201cgluuStatus\u201d attribute of the user in question will be set to  inactive  and login counter is reset to zero. The login counter will also be reset to zero if several unsuccessful login attempts are finally followed by a successful one (before exceeding the limit). You can re-enable a locked account by settings \nits  gluuStatus  attribute back to  active  via web UI.  To configure this feature navigate to  Configuration  >  Manage custom scripts  and find  basic_lock  script on the  Person Authentication  tab. There are 2 configurable properties:    Invalid_login_count_attribute  sets the name of the attribute used to store the current amount of failed login attempts. It assumes your schema already allows such an attribute to appear in user entries. The default attribute is  oxCountInvalidLogin  and it\u2019s already supported by Gluu\u2019s LDAP schema.    Maximum_invalid_login_attemps  sets the threshold for number of failed login attempts before the user gets locked out.      After script is configured tick the  Enabled  checkbox   Click the  Update  button   Click on  Configuration  >  Manage Authentication  on the left menu and select  Default Authentication Method  tab.   Select  basic_lock  authentication method for oxAuth and/or oxTrust.  Click the  Update  button there.",
            "title": "Configuring Account Lockout"
        },
        {
            "location": "/authn-guide/intro/#customizing-the-login-page",
            "text": "Learn how to customize the look and feel of Gluu Server pages in the  Design Customizations  section of the Operations Guide.",
            "title": "Customizing the Login Page"
        },
        {
            "location": "/authn-guide/basic/",
            "text": "Authentication against LDAP (AKA \u201cBasic\u201d, \u201cInternal\u201d)\n#\n\n\nOverview\n#\n\n\nThe \nBasic authentication script\n is used to implement username / password authentication. Basic authentication relies on a successful LDAP BIND operation against an LDAP directory--either the local LDAP included in the Gluu Server, or a backend LDAP server like Active Directory that has been configured for use with the Gluu Server via \nCache Refresh\n. \n\n\nConfiguring Basic Authentication\n#\n\n\nFollow the steps below to configure the Basic authentication method:\n\n\n\n\nClick on \nConfiguration\n > \nManage authentication\n \n\n\n\n\n\nYou can find a more detailed description of each field in the\n\nManage Authentication\n \nsection of the Gluu docs. \n\n\nLet\u2019s only touch concepts of \nprimary key\n and \nlocal primary key\n for now:\n\n\n\n\n\n\nPrimary key: name of LDAP attribute used to look up user entries in backend LDAP directory. \n\n\n\n\n\n\nLocal primary key:  name of LDAP attribute used to look up user entries in Gluu\u2019s \ninternal LDAP directory.\n\n\n\n\n\n\n\n\nNote\n\n\nA primary key can also be considered a \nuid\n (short for: unique identifier).\n\n\n\n\nBasic Authentication Flow\n#\n\n\nBasic authentication flow can be divided into three phases:\n\n\n\n\n\n\nString provided by user in the \u201cLogin\u201d field of the login form is treated as a local key. \nIt becomes a part of LDAP search filter similar to \n\n&(..set of predefined filter clauses..)(local_primary_key=provided_login_name)\n. \nIf a user entry conforming to this filter is found in Gluu\u2019s internal LDAP directory and \nits \ngluuStatus\n attribute is set to \nactive\n, login flow continues, \notherwise it\u2019s deemed unsuccessful. That means that even when a backend \ndirectory is used for authentication, a mirrored user entry still must be present in \nGluu\u2019s internal directory.      \n\n\n\n\n\n\nString provided by user in the \u201cLogin\u201d field is now treated as a \nprimary key. It becomes a part of LDAP search filter similar to \n\n&(..set hardcoded clauses..)(primary_key=provided_login_name)\n. \nIf a user entry conforming to this filter is found in specified backend LDAP directory \nlogin flows continues, otherwise it\u2019s deemed unsuccessful      \n\n\n\n\n\n\nLDAP BIND operation is initiated against backend LDAP directory with DN \nof user entry found on step 2; for a password it will use string provided \nby user in the \u201cPassword\u201d field of the login form. If bind results in success, \nlogin flow ends and user is treated as authenticated.     \n\n\n\n\n\n\nBasic Authentication Using Remote LDAP backend(s)\n#\n\n\nBy default the Gluu Server is configured to use its own internal LDAP directory for authentication (as opposed to a remote LDAP backend). \n\n\nTo use an external LDAP server like Active Directory instead, you need to provide the backend server's DNS name or IP address in the \nServer\n field. \n\n\nThe login name provided by the user will be used as a search term against both the remote and internal directories, meaning there must be a strict relation between user entries in the two directories that ensures both searches will succeed. \n\n\nThe simplest way to achieve this is to use the Gluu Server's Cache Refresh feature which allows the admin to set \nmappings for user attributes imported from a backend directory. Cache Refresh also allows you to customize default mapping behavior with Jython-based scripts. Learn more about \nCache Refresh\n in the user management portion of these docs.",
            "title": "Basic Authenticatoin"
        },
        {
            "location": "/authn-guide/basic/#authentication-against-ldap-aka-basic-internal",
            "text": "",
            "title": "Authentication against LDAP (AKA \u201cBasic\u201d, \u201cInternal\u201d)"
        },
        {
            "location": "/authn-guide/basic/#overview",
            "text": "The  Basic authentication script  is used to implement username / password authentication. Basic authentication relies on a successful LDAP BIND operation against an LDAP directory--either the local LDAP included in the Gluu Server, or a backend LDAP server like Active Directory that has been configured for use with the Gluu Server via  Cache Refresh .",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/basic/#configuring-basic-authentication",
            "text": "Follow the steps below to configure the Basic authentication method:   Click on  Configuration  >  Manage authentication     You can find a more detailed description of each field in the Manage Authentication  \nsection of the Gluu docs.   Let\u2019s only touch concepts of  primary key  and  local primary key  for now:    Primary key: name of LDAP attribute used to look up user entries in backend LDAP directory.     Local primary key:  name of LDAP attribute used to look up user entries in Gluu\u2019s \ninternal LDAP directory.     Note  A primary key can also be considered a  uid  (short for: unique identifier).",
            "title": "Configuring Basic Authentication"
        },
        {
            "location": "/authn-guide/basic/#basic-authentication-flow",
            "text": "Basic authentication flow can be divided into three phases:    String provided by user in the \u201cLogin\u201d field of the login form is treated as a local key. \nIt becomes a part of LDAP search filter similar to  &(..set of predefined filter clauses..)(local_primary_key=provided_login_name) . \nIf a user entry conforming to this filter is found in Gluu\u2019s internal LDAP directory and \nits  gluuStatus  attribute is set to  active , login flow continues, \notherwise it\u2019s deemed unsuccessful. That means that even when a backend \ndirectory is used for authentication, a mirrored user entry still must be present in \nGluu\u2019s internal directory.          String provided by user in the \u201cLogin\u201d field is now treated as a \nprimary key. It becomes a part of LDAP search filter similar to  &(..set hardcoded clauses..)(primary_key=provided_login_name) . \nIf a user entry conforming to this filter is found in specified backend LDAP directory \nlogin flows continues, otherwise it\u2019s deemed unsuccessful          LDAP BIND operation is initiated against backend LDAP directory with DN \nof user entry found on step 2; for a password it will use string provided \nby user in the \u201cPassword\u201d field of the login form. If bind results in success, \nlogin flow ends and user is treated as authenticated.",
            "title": "Basic Authentication Flow"
        },
        {
            "location": "/authn-guide/basic/#basic-authentication-using-remote-ldap-backends",
            "text": "By default the Gluu Server is configured to use its own internal LDAP directory for authentication (as opposed to a remote LDAP backend).   To use an external LDAP server like Active Directory instead, you need to provide the backend server's DNS name or IP address in the  Server  field.   The login name provided by the user will be used as a search term against both the remote and internal directories, meaning there must be a strict relation between user entries in the two directories that ensures both searches will succeed.   The simplest way to achieve this is to use the Gluu Server's Cache Refresh feature which allows the admin to set \nmappings for user attributes imported from a backend directory. Cache Refresh also allows you to customize default mapping behavior with Jython-based scripts. Learn more about  Cache Refresh  in the user management portion of these docs.",
            "title": "Basic Authentication Using Remote LDAP backend(s)"
        },
        {
            "location": "/authn-guide/passport/",
            "text": "Social Login using Passport.js\n#\n\n\nOverview\n#\n\n\nThe Gluu Server uses a component called \nPassport.js\n to enable social login. With over 300 existing\n\"strategies\", Passport provides a crowd-sourced approach to offering your users\nsocial login at popular consumer IDPs. Passport not only normalizes authentication, \nit also provides a standard mapping for user claims. \n\n\nPassport is an Express-based web application. We've modified it \nto call oxTrust APIs for its non-static configuration. Because its \nconfiguration is stored centrally in LDAP, you can scale Passport even \nin clustered topologies.\n\n\nThe Gluu Server uses the \nPassport interception script\n to enable social login. This \nscript is included in our default distribution. Post-authentication,\nthis script uses just-in-time provisioning to add users to the Gluu\nLDAP server if a local account does not already exist. In this way, \nthe Gluu SAML and OpenID Connect providers can gather claims and maintain\nSSO as normal.\n\n\nSequence Diagram\n#\n\n\nBelow is a sequence diagram to help clarify the workflow for user\nauthentication and provisioning. \n\n\n\n\n\n\nGluu server calls Node-Passport server for JWT token.\n\n\nNode-Passport server generates a JWT token and provides it in response to Gluu server.\n\n\nGluu server requests Node-Passport server with JWT token to authenticate user for a social network provider.\n\n\nNode-Passport server will redirect user to social media authentication provider.\n\n\nAfter successful authentication of user, social network will callback Node-Passport server along with user details and access token.\n\n\nNode-Passport server will redirect user back to Gluu server with user details and access token.\n\n\nGluu server\u2019s interception script will check if the user exists in LDAP server. If the user exists then the user will be logged into the system. If not, the interception script will create a new user with the required details and log the user into the system.\n\n\n\n\nSetup Passport.js with Gluu\n#\n\n\nDuring installation of the Gluu Server select \nyes\n to install Passport.js when prompted.\n\n\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n.\n\n\nEnable passport script in \nPerson Authentication\n Tab.\n\n\nClick on \nupdate\n at the end of the page.\n\n\nEnable UMA authorization policy in \nUMA authorization policy\n tab.\n\n\nClick on \nupdate\n.\n\n\nTo set the strategies navigate to \nConfiguration\n > \nManage Authentication\n > \nDefault Authenticaion\n\n\nChange the Default Authentication mode to \npassport\n\n\nClick on \nPassport Authentication Method\n tab and \nPassport Support\n to enabled.\n\n\nAdd your desired strategies. The \nAdd Strategy\n field values for common providers are:\n\n\ngoogle\n for GPlus Authentication\n\n\ntwitter\n for Twitter Authentication\n\n\nlinkedin\n for LinkedIn Authentication\n\n\ngithub\n for Github Authentication\n\n\nfacebook\n for Facebook Authentication\n\n\n\n\n\n\nAdd the strategy details like clientID and clientSecret \n(obtained from the provider, after the app is created in the provider form). \n\n\n\n\nOnce the configuration and settings have been entered, restart the \npassport service or Gluu Server by following the below instructions:\n\n\na. Login to chroot.\n\n\nb. Enter the following command to stop: \nservice passport stop\n\n\nc. Enter the following command to start: \nservice passport start\n\n\n\n\n\n\n\n\nWarning\n\n\nStrategies names and field names are case sensitive.\n\n\n\n\nHow to make a new app to use Passport\n#\n\n\nEvery provider has different protocols and ways to create the app. We \nwill look at one of the most common providers \"facebook\" and create a new app.\n\n\n\n\nLogin to https://developers.facebook.com\n\n\nClick on Add a new App from My Apps dropdown\n\n\nFill the required details and click the create Create App ID button to create the app.\n\n\nClick on the dashboard menu and get the clientID and clientSecret which can be used with the passport.\n\n\nClick on settings menu and put the domain of your gluu server in the site url field.\n\n\n\n\n\n\nNote: If there is a field for Authorized redirect URIs, make sure your apps list of Authorized redirect URIs contains the passport \nstrategy's callback. For example, if your gluu server points to \nhttps://example.gluu.org\n and the strategy is \nfacebook\n, the list of Authorized redirect URIs should contain \nhttps://example.gluu.org/passport/auth/facebook/callback.\n \n\n\nHow Passport is used in Gluu\n#\n\n\nBefore starting the development it is recommended to switch to node user,\n you can switch to node user by following command.\n\n\nsu - node\n\n\n\n\nTo use node js and npm execute following command.\n\n\nexport PATH=$PATH:/opt/node/bin\n\n\n\n\n All the paths in the following guide is relative to path: \n/opt/gluu/node/passport/\n \n*\n\n\nThe best way to add new strategies to Passport is to find an applicable npm module for your desired strategy. Let's start with an example. In this example we will consider adding facebook strategy.\n\n\n\n\nIf you want to add facebook strategy, search for passport-facebook npm module where you can select the npm module and then add the module to passport server.\n\n\nLet's say we found this module \"passport-facebook\" and want to use this module for facebook authentication. Install the module in passport by executing the following command: \nnpm install passport-facebook --save\n.\n\n\nConfigure the strategy.\n\n\nConfigure routes for the strategy.\n\n\nCall method to configure the strategy\n\n\nAdd button for the configured strategy in passport authentication UI.\n\n\n\n\nConfigure the strategy using setup script\n#\n\n\n\n\nNote\n\n\nAll these configuration are performed during execution of setup script at the time of configuring Gluu. These steps are not required to be followed, these content are for your reference\n\n\n\n\nvar passport = require('passport');\nvar FacebookStrategy = require('passport-facebook').Strategy;\n\nvar setCredentials = function(credentials) {\n    var callbackURL = global.applicationHost.concat(\"/passport/auth/facebook/callback\");\n    passport.use(new FacebookStrategy({\n            clientID: credentials.clientID,\n            clientSecret: credentials.clientSecret,\n            callbackURL: callbackURL,\n            enableProof: true,\n            profileFields: ['id', 'name', 'displayName', 'email']\n        },\n        function(accessToken, refreshToken, profile, done) {\n            var userProfile = {\n                id: profile._json.id,\n                name: profile.displayName,\n                username: profile.username || profile._json.id,\n                email: profile._json.email,\n                givenName: profile._json.first_name,\n                familyName: profile._json.last_name,\n                provider: profile.provider,\n                accessToken: accessToken\n            };\n            return done(null, userProfile);\n        }\n    ));\n};\n\nmodule.exports = {\n    passport: passport,\n    setCredentials: setCredentials\n};\n\n\n\n\nHere is an example of the facebook strategy configured. For facebook \nthe required parameters are \nclientID\n, \nclientSecret\n and \ncallbackURL\n. You \ncan search for more configurations depending on the requirements and \nconfigure accordingly.\n\n\nThe function \nsetCredentials\n is used to configure credentials of a strategy. \nEach strategy has a setCredentials method to configure the strategy. \nThe parameter credentials holds the values that are stored in the oxTrust.\n\n\nThe parameter callbackURL should point to the callback route that we \nwill configure in step 4. As we are configuring facebook strategy, the \n\ncallbackURL\n can be set to \n\"/passport/auth/facebook/callback\"\n \naccording the the convention of the app. You can customise the \n\ncallbackURL\n but it is recommended not to change the convention.\n\n\nThe callback function of passport strategy has different number of parameters and the data in \nthose parameters which are required to be mapped to the userProfile \nkeys which are \nid, name, username, email, givenName, familyName, provider, accessToken\n. \nHere id and provider params are must. Provider param holds the value of \nthe provider, i.e for facebook the provider value will be facebook etc. \nIn most cases the value of provider is received in the user claims itself.\n\n\nThen export the strategy that we configured and also the \nsetCredentials\n \nmethod which will be used to set the details of the strategy.\n\n\nConfigure routes for the strategy\n#\n\n\nWe are going to set the routes for the strategy that we are going to configure.\nThe following changes are to be made in server/routes/index.js. \nFirst require the strategy that we configured in the previous step.\n\n\nvar passportFacebook = require('../auth/facebook').passport;\n\n\n\n\nHere \nrequire('../auth/facebook').passport\n will include the passport \nstrategy that we have configured.\n\n\nThen add the routes for the strategy. First we are going to register the \ncallback route and then the authenticate route.\n\n\nThe authenticate route first validates the jwt token that is been sent by\nGluu Server to passport server. If the JWT is valid then the user is \nredirected to the strategy and user can be authenticated there and the \nresponse of the user authentication is redirected to callback route.\n\n\nIf the callback routes receives the user data then user is been \nredirected to Gluu.\n\n\n//==================== facebook ================\nrouter.get('/auth/facebook/callback',\n    passportFacebook.authenticate('facebook', {\n        failureRedirect: '/passport/login'\n    }),\n    callbackResponse);\n\nrouter.get('/auth/facebook/:token',\n    validateToken,\n    passportFacebook.authenticate('facebook', {\n        scope: ['email']\n    }));\n\n\n\n\nscope value can be set from the strategy itself if the strategy supports that \nor you can set the scope value here too.\n\n\nThe callbackResponse method return the control to Gluu server and \nuser is been enrolled in the system.\n\n\nCall method to configure the strategy\n#\n\n\nIn this step we are going to call the setCredentials method of the \nstrategy that we have created.\n\n\nGo to the file server/auth/configureStrategies.js and require the strategy that we have created.\n\n\nvar FacebookStrategy = require('./facebook');\n\n\n\n\nAnd then in setConfiguratins function, call the setCredentials \nmethod if the strategy data is received.\n\n\n//FacebookStrategy\nif (data.passportStrategies.facebook) {\n    logger.log('info', 'Facebook Strategy details received');\n    logger.sendMQMessage('info: Facebook Strategy details received');\n    FacebookStrategy.setCredentials(data.passportStrategies.facebook);\n}\n\n\n\n\nThis will configure the passport strategy if the details of the \nstrategy are received from passport API.\n\n\nAdd button for the configured strategy in passport authentication UI.\n#\n\n\nSo far the passport server is ready with the new strategy that we have \ncreated, but to call the strategy we need to add a button which calls \nthe new strategy.\n\n\n<a data-p=\"facebook\" class=\"provider\" href=\"javascript:void(0);\" style=\"height:40px; width:120px\">\n    <img alt=\"facebook\" src=\"img/facebook.png\" style=\"height:40px; width:40px\"></img>\n</a>\n\n\n\n\nHere the data-p and class=\"provider\" are required to call the strategy. \nThe data-p attribute should hold the value of the route that we created \nin routes.\n\n\n//==================== facebook ================\nrouter.get('/auth/facebook/callback',\n    passportFacebook.authenticate('facebook', {\n        failureRedirect: '/passport/login'\n    }),\n    callbackResponse);\n\nrouter.get('/auth/facebook/:token',\n    validateToken,\n    passportFacebook.authenticate('facebook', {\n        scope: ['email']\n    }));\n\n\n\n\nIn order to call the Strategy, the request URL to call the API must \nmatch the route that we configured.",
            "title": "Social Authentication"
        },
        {
            "location": "/authn-guide/passport/#social-login-using-passportjs",
            "text": "",
            "title": "Social Login using Passport.js"
        },
        {
            "location": "/authn-guide/passport/#overview",
            "text": "The Gluu Server uses a component called  Passport.js  to enable social login. With over 300 existing\n\"strategies\", Passport provides a crowd-sourced approach to offering your users\nsocial login at popular consumer IDPs. Passport not only normalizes authentication, \nit also provides a standard mapping for user claims.   Passport is an Express-based web application. We've modified it \nto call oxTrust APIs for its non-static configuration. Because its \nconfiguration is stored centrally in LDAP, you can scale Passport even \nin clustered topologies.  The Gluu Server uses the  Passport interception script  to enable social login. This \nscript is included in our default distribution. Post-authentication,\nthis script uses just-in-time provisioning to add users to the Gluu\nLDAP server if a local account does not already exist. In this way, \nthe Gluu SAML and OpenID Connect providers can gather claims and maintain\nSSO as normal.",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/passport/#sequence-diagram",
            "text": "Below is a sequence diagram to help clarify the workflow for user\nauthentication and provisioning.     Gluu server calls Node-Passport server for JWT token.  Node-Passport server generates a JWT token and provides it in response to Gluu server.  Gluu server requests Node-Passport server with JWT token to authenticate user for a social network provider.  Node-Passport server will redirect user to social media authentication provider.  After successful authentication of user, social network will callback Node-Passport server along with user details and access token.  Node-Passport server will redirect user back to Gluu server with user details and access token.  Gluu server\u2019s interception script will check if the user exists in LDAP server. If the user exists then the user will be logged into the system. If not, the interception script will create a new user with the required details and log the user into the system.",
            "title": "Sequence Diagram"
        },
        {
            "location": "/authn-guide/passport/#setup-passportjs-with-gluu",
            "text": "During installation of the Gluu Server select  yes  to install Passport.js when prompted.   Navigate to  Configuration  >  Manage Custom Scripts .  Enable passport script in  Person Authentication  Tab.  Click on  update  at the end of the page.  Enable UMA authorization policy in  UMA authorization policy  tab.  Click on  update .  To set the strategies navigate to  Configuration  >  Manage Authentication  >  Default Authenticaion  Change the Default Authentication mode to  passport  Click on  Passport Authentication Method  tab and  Passport Support  to enabled.  Add your desired strategies. The  Add Strategy  field values for common providers are:  google  for GPlus Authentication  twitter  for Twitter Authentication  linkedin  for LinkedIn Authentication  github  for Github Authentication  facebook  for Facebook Authentication    Add the strategy details like clientID and clientSecret \n(obtained from the provider, after the app is created in the provider form).    Once the configuration and settings have been entered, restart the \npassport service or Gluu Server by following the below instructions:  a. Login to chroot.  b. Enter the following command to stop:  service passport stop  c. Enter the following command to start:  service passport start     Warning  Strategies names and field names are case sensitive.",
            "title": "Setup Passport.js with Gluu"
        },
        {
            "location": "/authn-guide/passport/#how-to-make-a-new-app-to-use-passport",
            "text": "Every provider has different protocols and ways to create the app. We \nwill look at one of the most common providers \"facebook\" and create a new app.   Login to https://developers.facebook.com  Click on Add a new App from My Apps dropdown  Fill the required details and click the create Create App ID button to create the app.  Click on the dashboard menu and get the clientID and clientSecret which can be used with the passport.  Click on settings menu and put the domain of your gluu server in the site url field.    Note: If there is a field for Authorized redirect URIs, make sure your apps list of Authorized redirect URIs contains the passport \nstrategy's callback. For example, if your gluu server points to  https://example.gluu.org  and the strategy is  facebook , the list of Authorized redirect URIs should contain  https://example.gluu.org/passport/auth/facebook/callback.",
            "title": "How to make a new app to use Passport"
        },
        {
            "location": "/authn-guide/passport/#how-passport-is-used-in-gluu",
            "text": "Before starting the development it is recommended to switch to node user,\n you can switch to node user by following command.  su - node  To use node js and npm execute following command.  export PATH=$PATH:/opt/node/bin   All the paths in the following guide is relative to path:  /opt/gluu/node/passport/   *  The best way to add new strategies to Passport is to find an applicable npm module for your desired strategy. Let's start with an example. In this example we will consider adding facebook strategy.   If you want to add facebook strategy, search for passport-facebook npm module where you can select the npm module and then add the module to passport server.  Let's say we found this module \"passport-facebook\" and want to use this module for facebook authentication. Install the module in passport by executing the following command:  npm install passport-facebook --save .  Configure the strategy.  Configure routes for the strategy.  Call method to configure the strategy  Add button for the configured strategy in passport authentication UI.",
            "title": "How Passport is used in Gluu"
        },
        {
            "location": "/authn-guide/passport/#configure-the-strategy-using-setup-script",
            "text": "Note  All these configuration are performed during execution of setup script at the time of configuring Gluu. These steps are not required to be followed, these content are for your reference   var passport = require('passport');\nvar FacebookStrategy = require('passport-facebook').Strategy;\n\nvar setCredentials = function(credentials) {\n    var callbackURL = global.applicationHost.concat(\"/passport/auth/facebook/callback\");\n    passport.use(new FacebookStrategy({\n            clientID: credentials.clientID,\n            clientSecret: credentials.clientSecret,\n            callbackURL: callbackURL,\n            enableProof: true,\n            profileFields: ['id', 'name', 'displayName', 'email']\n        },\n        function(accessToken, refreshToken, profile, done) {\n            var userProfile = {\n                id: profile._json.id,\n                name: profile.displayName,\n                username: profile.username || profile._json.id,\n                email: profile._json.email,\n                givenName: profile._json.first_name,\n                familyName: profile._json.last_name,\n                provider: profile.provider,\n                accessToken: accessToken\n            };\n            return done(null, userProfile);\n        }\n    ));\n};\n\nmodule.exports = {\n    passport: passport,\n    setCredentials: setCredentials\n};  Here is an example of the facebook strategy configured. For facebook \nthe required parameters are  clientID ,  clientSecret  and  callbackURL . You \ncan search for more configurations depending on the requirements and \nconfigure accordingly.  The function  setCredentials  is used to configure credentials of a strategy. \nEach strategy has a setCredentials method to configure the strategy. \nThe parameter credentials holds the values that are stored in the oxTrust.  The parameter callbackURL should point to the callback route that we \nwill configure in step 4. As we are configuring facebook strategy, the  callbackURL  can be set to  \"/passport/auth/facebook/callback\"  \naccording the the convention of the app. You can customise the  callbackURL  but it is recommended not to change the convention.  The callback function of passport strategy has different number of parameters and the data in \nthose parameters which are required to be mapped to the userProfile \nkeys which are  id, name, username, email, givenName, familyName, provider, accessToken . \nHere id and provider params are must. Provider param holds the value of \nthe provider, i.e for facebook the provider value will be facebook etc. \nIn most cases the value of provider is received in the user claims itself.  Then export the strategy that we configured and also the  setCredentials  \nmethod which will be used to set the details of the strategy.",
            "title": "Configure the strategy using setup script"
        },
        {
            "location": "/authn-guide/passport/#configure-routes-for-the-strategy",
            "text": "We are going to set the routes for the strategy that we are going to configure.\nThe following changes are to be made in server/routes/index.js. \nFirst require the strategy that we configured in the previous step.  var passportFacebook = require('../auth/facebook').passport;  Here  require('../auth/facebook').passport  will include the passport \nstrategy that we have configured.  Then add the routes for the strategy. First we are going to register the \ncallback route and then the authenticate route.  The authenticate route first validates the jwt token that is been sent by\nGluu Server to passport server. If the JWT is valid then the user is \nredirected to the strategy and user can be authenticated there and the \nresponse of the user authentication is redirected to callback route.  If the callback routes receives the user data then user is been \nredirected to Gluu.  //==================== facebook ================\nrouter.get('/auth/facebook/callback',\n    passportFacebook.authenticate('facebook', {\n        failureRedirect: '/passport/login'\n    }),\n    callbackResponse);\n\nrouter.get('/auth/facebook/:token',\n    validateToken,\n    passportFacebook.authenticate('facebook', {\n        scope: ['email']\n    }));  scope value can be set from the strategy itself if the strategy supports that \nor you can set the scope value here too.  The callbackResponse method return the control to Gluu server and \nuser is been enrolled in the system.",
            "title": "Configure routes for the strategy"
        },
        {
            "location": "/authn-guide/passport/#call-method-to-configure-the-strategy",
            "text": "In this step we are going to call the setCredentials method of the \nstrategy that we have created.  Go to the file server/auth/configureStrategies.js and require the strategy that we have created.  var FacebookStrategy = require('./facebook');  And then in setConfiguratins function, call the setCredentials \nmethod if the strategy data is received.  //FacebookStrategy\nif (data.passportStrategies.facebook) {\n    logger.log('info', 'Facebook Strategy details received');\n    logger.sendMQMessage('info: Facebook Strategy details received');\n    FacebookStrategy.setCredentials(data.passportStrategies.facebook);\n}  This will configure the passport strategy if the details of the \nstrategy are received from passport API.",
            "title": "Call method to configure the strategy"
        },
        {
            "location": "/authn-guide/passport/#add-button-for-the-configured-strategy-in-passport-authentication-ui",
            "text": "So far the passport server is ready with the new strategy that we have \ncreated, but to call the strategy we need to add a button which calls \nthe new strategy.  <a data-p=\"facebook\" class=\"provider\" href=\"javascript:void(0);\" style=\"height:40px; width:120px\">\n    <img alt=\"facebook\" src=\"img/facebook.png\" style=\"height:40px; width:40px\"></img>\n</a>  Here the data-p and class=\"provider\" are required to call the strategy. \nThe data-p attribute should hold the value of the route that we created \nin routes.  //==================== facebook ================\nrouter.get('/auth/facebook/callback',\n    passportFacebook.authenticate('facebook', {\n        failureRedirect: '/passport/login'\n    }),\n    callbackResponse);\n\nrouter.get('/auth/facebook/:token',\n    validateToken,\n    passportFacebook.authenticate('facebook', {\n        scope: ['email']\n    }));  In order to call the Strategy, the request URL to call the API must \nmatch the route that we configured.",
            "title": "Add button for the configured strategy in passport authentication UI."
        },
        {
            "location": "/authn-guide/supergluu/",
            "text": "Super Gluu\n#\n\n\nOverview\n#\n\n\nSuper Gluu\n is a free and secure two-factor authentication mobile application developed by Gluu. It is based on the free open source \noxPush2\n two-factor authentication application. \n\n\nThis document will explain how to use the \noxPush2 interception script\n to configure the Gluu Server for a two-step authentication process with username and password as the first step, and Super Gluu as the second step. \n\n\nIn order to use this authentication mechanism users will need to download the Super Gluu mobile app from the \nAndroid\n or \niOS\n  marketplace. \n\n\nProperties\n#\n\n\nThe script has the following properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\napplication_id\n\n\nURL of the identity server\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\nauthentication_mode\n\n\nDetermine factor of authentication\n\n\ntwo_step\n\n\n\n\n\n\ncredentials_file\n\n\nJSON file for oxPush2\n\n\n/etc/certs/oxpush2_creds.json\n\n\n\n\n\n\n\n\nConfigure oxTrust\n#\n\n\n\n\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n.               \n\n\n\n\n\n\nClick on the \nPerosn Authentication\n tab.            \n\n\n\n\n\n\n\n\nSelect the oxPush2 Script                \n\n\n\n\n\n\n\n\nEnable the script by ticking the check box        \n\n\n\n\n\n\n\n\nClick \nUpdate\n         \n\n\n\n\n\n\nChange the \nAuthentication method\n to oxPush2",
            "title": "Super Gluu"
        },
        {
            "location": "/authn-guide/supergluu/#super-gluu",
            "text": "",
            "title": "Super Gluu"
        },
        {
            "location": "/authn-guide/supergluu/#overview",
            "text": "Super Gluu  is a free and secure two-factor authentication mobile application developed by Gluu. It is based on the free open source  oxPush2  two-factor authentication application.   This document will explain how to use the  oxPush2 interception script  to configure the Gluu Server for a two-step authentication process with username and password as the first step, and Super Gluu as the second step.   In order to use this authentication mechanism users will need to download the Super Gluu mobile app from the  Android  or  iOS   marketplace.",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/supergluu/#properties",
            "text": "The script has the following properties     Property  Description  Example      application_id  URL of the identity server  https://idp.gluu.info    authentication_mode  Determine factor of authentication  two_step    credentials_file  JSON file for oxPush2  /etc/certs/oxpush2_creds.json",
            "title": "Properties"
        },
        {
            "location": "/authn-guide/supergluu/#configure-oxtrust",
            "text": "Navigate to  Configuration  >  Manage Custom Scripts .                   Click on the  Perosn Authentication  tab.                 Select the oxPush2 Script                     Enable the script by ticking the check box             Click  Update              Change the  Authentication method  to oxPush2",
            "title": "Configure oxTrust"
        },
        {
            "location": "/authn-guide/U2F/",
            "text": "FIDO U2F\n#\n\n\nOverview\n#\n\n\nFIDO Universal 2nd Factor (U2F) is an open authentication standard that strengthens and simplifies two-factor authentication using specialized USB or NFC devices based on similar security technology found in smart cards. Learn more about the U2F standard \non Gluu's website\n.\n\n\nThis document will explain how to use Gluu's \nFIDO U2F interception script\n \nto configure the Gluu Server for a two-step authentication process with username and password as the first step, \nand FIDO U2F as the second step.\n\n\nIn order to use this authentication mechanism users will need a U2F device. Some well known devices and manufacturers include:         \n\n- \nVasco DIGIPASS SecureClick\n    \n\n- \nYubico\n    \n\n- \nHyperFIDO\n     \n\n- \nFeitian Technologies\n      \n\n\nFor a comprehensive list of U2F devices, check \nFIDO's certified products\n. \n\n\n\n\nNote\n\n\nSort by Specification == U2F\n\n\n\n\nProperties\n#\n\n\nThe script has the following properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nu2f_server_uri\n\n\nURL of the u2f server\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\nu2f_server_metadata_uri\n\n\nURL of the u2f server metadata\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\n\n\nConfigure U2F\n#\n\n\nFollow the steps below to configure the U2F module in the oxTrust Admin GUI.\n\n\n\n\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n.    \n\n\n\n\n\n\nClick on the \nPerson Authentication\n tab     \n\n\n\n\n\n\n\n\nSelect the U2F script     \n\n\n\n\n\n\n\n\nEnable the script by ticking the check box     \n\n\n\n\n\n\n\n\nClick \nUpdate\n\n\n\n\n\n\nChange the \nDefault Authentication Method\n to \nu2f",
            "title": "FIDO U2F"
        },
        {
            "location": "/authn-guide/U2F/#fido-u2f",
            "text": "",
            "title": "FIDO U2F"
        },
        {
            "location": "/authn-guide/U2F/#overview",
            "text": "FIDO Universal 2nd Factor (U2F) is an open authentication standard that strengthens and simplifies two-factor authentication using specialized USB or NFC devices based on similar security technology found in smart cards. Learn more about the U2F standard  on Gluu's website .  This document will explain how to use Gluu's  FIDO U2F interception script  \nto configure the Gluu Server for a two-step authentication process with username and password as the first step, \nand FIDO U2F as the second step.  In order to use this authentication mechanism users will need a U2F device. Some well known devices and manufacturers include:          \n-  Vasco DIGIPASS SecureClick      \n-  Yubico      \n-  HyperFIDO       \n-  Feitian Technologies         For a comprehensive list of U2F devices, check  FIDO's certified products .    Note  Sort by Specification == U2F",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/U2F/#properties",
            "text": "The script has the following properties     Property  Description  Example      u2f_server_uri  URL of the u2f server  https://idp.gluu.info    u2f_server_metadata_uri  URL of the u2f server metadata  https://idp.gluu.info",
            "title": "Properties"
        },
        {
            "location": "/authn-guide/U2F/#configure-u2f",
            "text": "Follow the steps below to configure the U2F module in the oxTrust Admin GUI.    Navigate to  Configuration  >  Manage Custom Scripts .        Click on the  Person Authentication  tab          Select the U2F script          Enable the script by ticking the check box          Click  Update    Change the  Default Authentication Method  to  u2f",
            "title": "Configure U2F"
        },
        {
            "location": "/authn-guide/duo/",
            "text": "Duo Security\n#\n\n\nOverview\n#\n\n\nDuo Security\n is a SaaS authentication provider. This document will explain how to use Gluu's \nDuo interception script\n to configure the Gluu Server for a two-step authentication process with username and password as the first step, and Duo as the second step. \n\n\nIn order to use this authentication mechanism your organization will need a Duo account and users will need to download the Duo mobile app. \n\n\nProperties\n#\n\n\nThere are a few properties in the Duo Security authentication script:\n\n\n\n\n\n\n\n\nProperty\n\n\nStatus\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nduo_creds_file\n\n\nMandatory\n\n\nPath to ikey, skey, akey\n\n\n/etc/certs/duo_creds.json\n\n\n\n\n\n\nduo_host\n\n\nMandatory\n\n\nURL of the Duo API Server\n\n\napi-random.duosecurity.com\n\n\n\n\n\n\naudit_attribute\n\n\nOptional\n\n\nAttribute to determine user group\n\n\nmemberOf\n\n\n\n\n\n\nduo_group\n\n\nOptional\n\n\nAttribute to enable Duo for specific user\n\n\nmemberOf\n\n\n\n\n\n\naudit_group\n\n\nOptional\n\n\nNotify administrator via email upon user login\n\n\nmemberOf\n\n\n\n\n\n\naudit_group_email\n\n\nOptional\n\n\nAdministrator email\n\n\nadmin@organization.com\n\n\n\n\n\n\n\n\nConfigure Duo Account\n#\n\n\n\n\n\n\nSign up\n for a Duo account.\n\n\n\n\n\n\nLog in to the Duo Admin Panel and navigate to Applications.\n\n\n\n\n\n\nClick Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your integration key, secret key, and API hostname.\n\n\n\n\n\n\nGenerate an \nakey\n value for your instance. \nLearn more\n.\n\n\n\n\n\n\nFor additional info on Duo's Web SDK, check \nthis article\n. \n\n\nConfigure CE Chroot\n#\n\n\n\n\nPrepare the Duo credential file \n/etc/certs/duo_creds.json\n with \nikey, akey & skey\n\n\n\n\nConfigure oxTrust\n\n\nFollow the steps below to configure the Duo module in the oxTrust Admin GUI.\n\n\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n.\n\n\nClick on the \nPerson Authentication\n tab.\n\n\n\n\nScroll down to the Duo authentication script \n\n\n\n\n\n\n\n\nChange the value of \nduo_host\n to your API    \n\n\n\n\n\n\nEnable the script by ticking the check box  \n\n\n\n\n\n\n\n\nChange the \nDefault authentication method\n to Duo",
            "title": "Duo Security"
        },
        {
            "location": "/authn-guide/duo/#duo-security",
            "text": "",
            "title": "Duo Security"
        },
        {
            "location": "/authn-guide/duo/#overview",
            "text": "Duo Security  is a SaaS authentication provider. This document will explain how to use Gluu's  Duo interception script  to configure the Gluu Server for a two-step authentication process with username and password as the first step, and Duo as the second step.   In order to use this authentication mechanism your organization will need a Duo account and users will need to download the Duo mobile app.",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/duo/#properties",
            "text": "There are a few properties in the Duo Security authentication script:     Property  Status  Description  Example      duo_creds_file  Mandatory  Path to ikey, skey, akey  /etc/certs/duo_creds.json    duo_host  Mandatory  URL of the Duo API Server  api-random.duosecurity.com    audit_attribute  Optional  Attribute to determine user group  memberOf    duo_group  Optional  Attribute to enable Duo for specific user  memberOf    audit_group  Optional  Notify administrator via email upon user login  memberOf    audit_group_email  Optional  Administrator email  admin@organization.com",
            "title": "Properties"
        },
        {
            "location": "/authn-guide/duo/#configure-duo-account",
            "text": "Sign up  for a Duo account.    Log in to the Duo Admin Panel and navigate to Applications.    Click Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your integration key, secret key, and API hostname.    Generate an  akey  value for your instance.  Learn more .    For additional info on Duo's Web SDK, check  this article .",
            "title": "Configure Duo Account"
        },
        {
            "location": "/authn-guide/duo/#configure-ce-chroot",
            "text": "Prepare the Duo credential file  /etc/certs/duo_creds.json  with  ikey, akey & skey   Configure oxTrust  Follow the steps below to configure the Duo module in the oxTrust Admin GUI.   Navigate to  Configuration  >  Manage Custom Scripts .  Click on the  Person Authentication  tab.   Scroll down to the Duo authentication script      Change the value of  duo_host  to your API        Enable the script by ticking the check box       Change the  Default authentication method  to Duo",
            "title": "Configure CE Chroot"
        },
        {
            "location": "/authn-guide/cert-auth/",
            "text": "Certificate Authentication\n#\n\n\nThe image below contains the design diagram for this module.\n\n\n\n\nThe script has a few properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nAllowed Values\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nchain_cert_file_path\n\n\nmandatory property pointing to certificate chains in [pem][pem] format\n\n\nfile path\n\n\n/etc/certs/chain_cert.pem\n\n\n\n\n\n\nmap_user_cert\n\n\nspecifies if the script should map new user to local account\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_generic_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_path_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_oscp_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_crl_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\ncrl_max_response_size\n\n\nspecifies the maximum allowed size of [CRL][crl] response\n\n\nInteger > 0\n\n\n2\n\n\n\n\n\n\n\n\nConfigure oxTrust\n\nFollow the steps below to configure the certificate authentication in the oxTrust Admin GUI.\n\n\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n.\n\n\nClick on the \nPerson Authentication\n tab.\n\n\nClick on the \nAdd Custom Scritp\n button.\n\n\n\nFill up the from and add the \nCertificate Authentication Script\n\n\nEnable the script by ticking the check box\n\n\n\nChange the \nDefault Authentication Method\n to \nCert",
            "title": "Certificate Authentication"
        },
        {
            "location": "/authn-guide/cert-auth/#certificate-authentication",
            "text": "The image below contains the design diagram for this module.   The script has a few properties:     Property  Description  Allowed Values  example      chain_cert_file_path  mandatory property pointing to certificate chains in [pem][pem] format  file path  /etc/certs/chain_cert.pem    map_user_cert  specifies if the script should map new user to local account  true/false  true    use_generic_validator  enable/disable specific certificate validation  true/false  false    use_path_validator  enable/disable specific certificate validation  true/false  true    use_oscp_validator  enable/disable specific certificate validation  true/false  false    use_crl_validator  enable/disable specific certificate validation  true/false  false    crl_max_response_size  specifies the maximum allowed size of [CRL][crl] response  Integer > 0  2     Configure oxTrust \nFollow the steps below to configure the certificate authentication in the oxTrust Admin GUI.   Navigate to  Configuration  >  Manage Custom Scripts .  Click on the  Person Authentication  tab.  Click on the  Add Custom Scritp  button.  Fill up the from and add the  Certificate Authentication Script  Enable the script by ticking the check box  Change the  Default Authentication Method  to  Cert",
            "title": "Certificate Authentication"
        },
        {
            "location": "/authn-guide/google/",
            "text": "Google+ OAuth 2.0 Login\n#\n\n\nOverview\n#\n\n\nThis document will explain how to use Gluu's \n\ngplus interception script\n to configure the Gluu Server to send users to Google for authentication. \n\n\nConfigure Google\n#\n\n\nIn order to call Google API's you will need to register as a developer and\ncreate client credentials. You can follow these \n\ninstructions\n.\n\n\nThe first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter your desired\nproject name.        \n\n\n              \n\n\nThen click on your newly created project from the listing on the\ndashboard, and under the Credentials section, create a new \"OAuth 2.0\nclient ID\".        \n\n\n       \n\n\nGoogle will ask you to configure your consent screen, to add your logo\nand other information displayed to the user to authorize Google to\nrelease information.       \n\n\n       \n\n\nFill out the form...       \n\n\n       \n\n\nNow you're ready to create the credentials. Enter \"Authorized JavaScript\norigins\". It should be the uri of your Gluu Server--for example \nhttps://idp.example.com\n.       \n\n\n       \n\n\nGoogle will display the client-id and secret. Ignore that for now. Instead, download the JSON file which you are going to upload into\nyour Gluu Server next.       \n\n\n       \n\n\nMove this file to the location \n/etc/gluu/conf/google.json\n. The JSON\nfile will look something like this example:       \n\n\n{\n  \"web\": {\n    \"client_id\": \"7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\",\n    \"auth_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\",\n    \"token_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\",\n    \"auth_provider_x509_cert_url\": \"https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\",\n    \"client_secret\": \"bb76a2c99be94e35b874\",\n    \"javascript_origins\": [\n    \"https:\\/\\/brookie.gluu.info\"\n    ]\n  }\n}\n\n\n\n\nThe last step is to enable Google+ API's:       \n\n\n\n\nNavigate back to the Google API \nconsole\n\n\nSelect project and enter project name\n\n\nOpen new project \"API & auth -> API\" menu item in configuration navigation tree\n\n\nClick \"Google+ API\"\n\n\nClick \"Enable API\" button\n\n\n\n\nConfigure oxTrust\n#\n\n\nFollow the steps below to configure the certificate authentication in the oxTrust Admin GUI.       \n\n\n\n\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n > \nPerson Authentication\n.        \n\n\n\n\n\n\nClick the \nAdd Custom Scritp\n button     \n\n\nadd-script-button\n       \n\n\n\n\n\n\nFill in the form and add the \nGoogle External Authenticator\n Script.       \n\n\n\n\n\n\nYou'll also need to add some custom properties:       \n\n\n\n\ngplus_client_secrets_file\n: \n/etc/gluu/conf/google.json\n\n\ngplus_deployment_type\n: enroll\n\n\ngplus_remote_attributes_list\n: email, given_name, family_name, and locale\n\n\n\n\ngplus_local_attributes_list\n: uid, mail, givenName, sn, cn, preferredLanguage\n\n\n\n\n\n\ngplus_client_secrets_file\n - It is a mandatory property that holds\n   the path to the application configuration file downloaded from Google\n   console for application. An example is \n/etc/certs/gplus_client_secrets.json\n.\n\n\n\n\n\n\nSetting Google App\n#\n\n\nThese are the single steps needed to ClientSecret and ClientID or Google JSON:\n\n\na) Log into: \nhttps://console.developers.google.com/project\n\n\nb) Click \"Create project\" and enter project name\n\n\nc) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree\n\n\nd) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n\n\ne) Select \"Web application\" application type\n\n\nf) Enter \"Authorized JavaScript origins\". It should be CE server DNS\n       name, for example \nhttps://gluu.info\n.\n\n\ng) Click \"Create\" and Click \"OK\" in next dialog\n\n\nh) Click \"Download JSON\" in order to download\n       \ngplus_client_secrets.json\n file.\n\n\nAlso it is mandatory to enable Google+ API:\n\n\na) Log into \nhttps://console.developers.google.com/project\n\n\nb) Select project and enter project name\n\n\nc) Open new project \"API & auth -> API\" menu item in configuration navigation tree\n\n\nd) Click \"Google+ API\"\n\n\ne) Click \"Enable API\" button\n\n\n\n\n\n\ngplus_deployment_type\n - Specify the deployment mode. It is an\noptional property. If this property isn't specified the script tries to\nfind the user in the local LDAP by 'subject_identifier' claim specified\nin id_token. If this property has a 'map' value the script allows to map\n'subject_identifier' to the local user account. If this property has an\n'enroll' value the script adds a new user to the local LDAP with status\n'active'. In order to map the IDP attributes to the local attributes it\nuses properties from both gplus_remote_attributes_list and\ngplus_local_attributes_list. The allowed values are map and enroll.\n\n\n\n\n\n\ngplus_remote_attributes_list\n - Comma-separated list of attribute\nnames (user claims) that Google+ returns which map to local attributes\nin the \ngplus_local_attributes_list\n property. It is mandatory only if\n\ngplus_deployment_type\n is set to 'enroll'.\n\n\n\n\n\n\ngplus_local_attributes_list\n - Comma-separated list of Gluu Server\nLDAP attribute names that are mapped to Google user claims from the\n\ngplus_remote_attributes_list\n property. It is mandatory only if\n\ngplus_deployment_type\n is set to 'enroll'.\n\n\n\n\n\n\nextension_module\n - Optional property to specify the full path of\nan external module that implements two methods:\n\n\n\n\n\n\n    # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False\n\n\n\n\n\n\ngplus_client_configuration_attribute\n - Optional property to\nspecify the client entry attribute name which can override\n\ngplus_client_secrets_file file\n content. It can be used in cases when\nall clients should use a separate \ngplus_client_secrets.json\n\nconfiguration.\n\n\n\n\nTesting\n#\n\n\nOne simple way to test the configuration is to use oxTrust. In the\n\"Configure Authentication\" dropdown menu, select \"Google\" (or whatever\nyou entered as the \"Name\" of the custom authentication script--as the\ndefault authentication method.       \n\n\n       \n\n\nAfter you login and logout, you should be presented with a new login\nform that has the Google login button:       \n\n\n       \n\n\nAfter clicking the Google login button, you are presented for\nauthorization--Google needs to make sure its ok to release attributes to\nthe Gluu Server:       \n\n\n       \n\n\nIf the script doesn't work, and you locked yourself out of oxTrust,\ndon't worry! You can create an LDIF file, for example \nrevert.ldif\n, to\nset back the default authentication method, like this:       \n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\n\noxAuthenticationMode corresponds to the 'Name' of the customer\nauthentication script in oxTrust. Use \ninternal\n to revert to the\ndefault LDAP authentication. You'll have to change the \ninum\n with the\n\ninum\n of your installation. You can find it using ldapsearch like this:\n\n\nroot@gluu3-ubuntu:/opt/symas/bin# ./ldapsearch -h locahost -p 1389 -D \"cn=directory manager,o=gluu\" -w \"{password provided during setup}\" -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum\n\n\n\n\n~/.pw\n is a file with your Directory Manager password. If you don't\nremember it, try to find it using \ngrep\n: \n\n\ngrep ldapPass= /install/community-edition-setup/setup.properties.last\n\n\n\n\nOnce your LDIF looks ok, then use \nldapmodify\n to revert back to\npassword authentication:\n\n\nroot@gluu3-ubuntu:/opt/symas/bin# ./ldapmodify -h localhost -p 1389 -D \"cn=directory manager,o=gluu\" -w \"{password provided during setup}\" -f revert.ldif\n\n\n\n\nIf things go wrong, it can leave the sessions in your browser in a bad\nstate. If things get really weird, remove the cookies in your browser\nfor the hostname of your Gluu Server.",
            "title": "Google+ OAuth 2.0"
        },
        {
            "location": "/authn-guide/google/#google-oauth-20-login",
            "text": "",
            "title": "Google+ OAuth 2.0 Login"
        },
        {
            "location": "/authn-guide/google/#overview",
            "text": "This document will explain how to use Gluu's  gplus interception script  to configure the Gluu Server to send users to Google for authentication.",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/google/#configure-google",
            "text": "In order to call Google API's you will need to register as a developer and\ncreate client credentials. You can follow these  instructions .  The first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter your desired\nproject name.                          Then click on your newly created project from the listing on the\ndashboard, and under the Credentials section, create a new \"OAuth 2.0\nclient ID\".                   Google will ask you to configure your consent screen, to add your logo\nand other information displayed to the user to authorize Google to\nrelease information.                  Fill out the form...                  Now you're ready to create the credentials. Enter \"Authorized JavaScript\norigins\". It should be the uri of your Gluu Server--for example  https://idp.example.com .                  Google will display the client-id and secret. Ignore that for now. Instead, download the JSON file which you are going to upload into\nyour Gluu Server next.                  Move this file to the location  /etc/gluu/conf/google.json . The JSON\nfile will look something like this example:         {\n  \"web\": {\n    \"client_id\": \"7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\",\n    \"auth_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\",\n    \"token_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\",\n    \"auth_provider_x509_cert_url\": \"https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\",\n    \"client_secret\": \"bb76a2c99be94e35b874\",\n    \"javascript_origins\": [\n    \"https:\\/\\/brookie.gluu.info\"\n    ]\n  }\n}  The last step is to enable Google+ API's:          Navigate back to the Google API  console  Select project and enter project name  Open new project \"API & auth -> API\" menu item in configuration navigation tree  Click \"Google+ API\"  Click \"Enable API\" button",
            "title": "Configure Google"
        },
        {
            "location": "/authn-guide/google/#configure-oxtrust",
            "text": "Follow the steps below to configure the certificate authentication in the oxTrust Admin GUI.           Navigate to  Configuration  >  Manage Custom Scripts  >  Person Authentication .            Click the  Add Custom Scritp  button       add-script-button            Fill in the form and add the  Google External Authenticator  Script.           You'll also need to add some custom properties:          gplus_client_secrets_file :  /etc/gluu/conf/google.json  gplus_deployment_type : enroll  gplus_remote_attributes_list : email, given_name, family_name, and locale   gplus_local_attributes_list : uid, mail, givenName, sn, cn, preferredLanguage    gplus_client_secrets_file  - It is a mandatory property that holds\n   the path to the application configuration file downloaded from Google\n   console for application. An example is  /etc/certs/gplus_client_secrets.json .",
            "title": "Configure oxTrust"
        },
        {
            "location": "/authn-guide/google/#setting-google-app",
            "text": "These are the single steps needed to ClientSecret and ClientID or Google JSON:  a) Log into:  https://console.developers.google.com/project  b) Click \"Create project\" and enter project name  c) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree  d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"  e) Select \"Web application\" application type  f) Enter \"Authorized JavaScript origins\". It should be CE server DNS\n       name, for example  https://gluu.info .  g) Click \"Create\" and Click \"OK\" in next dialog  h) Click \"Download JSON\" in order to download\n        gplus_client_secrets.json  file.  Also it is mandatory to enable Google+ API:  a) Log into  https://console.developers.google.com/project  b) Select project and enter project name  c) Open new project \"API & auth -> API\" menu item in configuration navigation tree  d) Click \"Google+ API\"  e) Click \"Enable API\" button    gplus_deployment_type  - Specify the deployment mode. It is an\noptional property. If this property isn't specified the script tries to\nfind the user in the local LDAP by 'subject_identifier' claim specified\nin id_token. If this property has a 'map' value the script allows to map\n'subject_identifier' to the local user account. If this property has an\n'enroll' value the script adds a new user to the local LDAP with status\n'active'. In order to map the IDP attributes to the local attributes it\nuses properties from both gplus_remote_attributes_list and\ngplus_local_attributes_list. The allowed values are map and enroll.    gplus_remote_attributes_list  - Comma-separated list of attribute\nnames (user claims) that Google+ returns which map to local attributes\nin the  gplus_local_attributes_list  property. It is mandatory only if gplus_deployment_type  is set to 'enroll'.    gplus_local_attributes_list  - Comma-separated list of Gluu Server\nLDAP attribute names that are mapped to Google user claims from the gplus_remote_attributes_list  property. It is mandatory only if gplus_deployment_type  is set to 'enroll'.    extension_module  - Optional property to specify the full path of\nan external module that implements two methods:        # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False   gplus_client_configuration_attribute  - Optional property to\nspecify the client entry attribute name which can override gplus_client_secrets_file file  content. It can be used in cases when\nall clients should use a separate  gplus_client_secrets.json \nconfiguration.",
            "title": "Setting Google App"
        },
        {
            "location": "/authn-guide/google/#testing",
            "text": "One simple way to test the configuration is to use oxTrust. In the\n\"Configure Authentication\" dropdown menu, select \"Google\" (or whatever\nyou entered as the \"Name\" of the custom authentication script--as the\ndefault authentication method.                  After you login and logout, you should be presented with a new login\nform that has the Google login button:                  After clicking the Google login button, you are presented for\nauthorization--Google needs to make sure its ok to release attributes to\nthe Gluu Server:                  If the script doesn't work, and you locked yourself out of oxTrust,\ndon't worry! You can create an LDIF file, for example  revert.ldif , to\nset back the default authentication method, like this:         dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  oxAuthenticationMode corresponds to the 'Name' of the customer\nauthentication script in oxTrust. Use  internal  to revert to the\ndefault LDAP authentication. You'll have to change the  inum  with the inum  of your installation. You can find it using ldapsearch like this:  root@gluu3-ubuntu:/opt/symas/bin# ./ldapsearch -h locahost -p 1389 -D \"cn=directory manager,o=gluu\" -w \"{password provided during setup}\" -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum  ~/.pw  is a file with your Directory Manager password. If you don't\nremember it, try to find it using  grep :   grep ldapPass= /install/community-edition-setup/setup.properties.last  Once your LDIF looks ok, then use  ldapmodify  to revert back to\npassword authentication:  root@gluu3-ubuntu:/opt/symas/bin# ./ldapmodify -h localhost -p 1389 -D \"cn=directory manager,o=gluu\" -w \"{password provided during setup}\" -f revert.ldif  If things go wrong, it can leave the sessions in your browser in a bad\nstate. If things get really weird, remove the cookies in your browser\nfor the hostname of your Gluu Server.",
            "title": "Testing"
        },
        {
            "location": "/authn-guide/otp/",
            "text": "One-Time Password (OTP) Authentication\n#\n\n\nOverview\n#\n\n\nThis document will explain how to use Gluu's \nOne-Time Password (OTP) interception script\n to configure the Gluu Server for a two-step authentication process with username and password as the first step, and OTP as the second step.\n\n\nIn order to use this authentication mechanism users will need to install a mobile app that supports HOTP/TOTP, like \nGoogle Authenticator\n.\n\n\n\n\nNote\n\n\nGluu's OTP interception script uses the two-factor event/counter-based HOTP algorithm \nRFC4226\n and the time-based TOTP algorithm \nRFC6238\n.\n\n\n\n\nSequence Diagram\n#\n\n\nBelow is the sequence diagram for TOTP/HOTP and its flow explained:\n\n\n\n\nTOTP/HOTP enrollment/authentication workflow\n#\n\n\nPerson->Browser: Open RP URL\n\nBrowser->RP: Protected resource\n\nRP->Gluu Server: Start AuthZ & AuthN\n\nOTP Script->OTP Script: Verify user/password\n\nalt: User enrollment\n    OTP Script->OTP Script: Check if person not issued OTP key already\n    OTP Script->Browser: Render otpauth QR code with OTP key \n    Person->OTP comp. auth.: Scan QR code\n    OTP comp. auth.->Person: New one time passowrd\n    Person->Browser: Enter one time password\n    Browser->OTP Script:\n    OTP Script->OTP Script: Validate one time passowrd\n    OTP Script->OTP Script: Strore OTP key in user entry\n    OTP Script->Gluu Server: User pass enrollment\nelse User authentication\n    OTP Script->OTP Script: Check if person issued OTP key already\n    OTP comp. auth.->Person: New one time passowrd\n    Person->Browser: Enter one time password\n    Browser->OTP Script:\n    OTP Script->OTP Script: Validate one time passowrd\n    OTP Script->Gluu Server: User pass enrollment\nend\n\nGluu Server->Browser: Return code\nBrowser->RP: Return code\n\nRP->Gluu Server: Request tokens\nRP->Gluu Server: Request user_info\n\n\n\n\nProperties\n#\n\n\nThe module has a few properties:\n\n\n1) otp_type - It's mandatory property. It's specify OTP mode: HOTP/ TOTP.\n   Allowed values: hotp/totp\n   Example: hotp\n\n\n2) issuer - It's mandatory property. It's company name.\n   Example: Gluu Inc\n\n\n3) otp_conf_file - It's mandatory property. It's specify path to OTP configuration JSON file.\n   Example: /etc/certs/otp_configuration.json\n\n\n4) label - It's label inside QR code. It's optional property.\n    Example: Gluu OTP\n\n\n5) qr_options - Specify width and height of QR image. It's optional property.\n    Example: qr_options: { width: 400, height: 400 }\n\n\n6) registration_uri - It's URL to page where user can register new account. It's optional property.\n    Example: https://hostname/identity/register\n\n\nConfigure OTP with Gluu Server\n#\n\n\nThis list of steps needed to  enable OTP person authentication module.\n\n\n\n\nConfire new custom module in oxTrust:\n\n\nLog into oxTrust with administrative permissions.\n\n\nOpen \nConfiguration\n > \nManage Custom Scripts\n.\n\n\nSelect `Person Authentication tab.\n\n\nEnter name = otp\n\n\nEnter level = 0-100 (priority of this method).\n\n\nSelect usage type \nInteractive\n.\n\n\nSelect the \nLocation Type\n, if the \nLocation type\n is LDAP, \n  script would be automatically populated in the \nscript\n box below.\n\n\nIf \nLocation type\n is selected as text, follow the below\n\n\nCopy/paste script from TotpExternalAuthenticator.py.\n\n\n\n\n\n\nActivate it via \nEnabled\n checkbox.\n\n\nClick \nUpdate\n button at the bottom of this page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure oxAuth to use OTP authentication by default:\n\n\nLog into oxTrust with administrative permissions.\n\n\nNavigate to \nConfiguration\n > \nManage Authentication\n.\n\n\nSelect \nDefault Authentication Method\n tab. Select \"otp\" authentication mode.\n\n\nClick \nUpdate\n button at the bottom of this page.\n\n\n\n\n\n\n\n\n\n\n\n\nTry to log in using OTP authentication method:\n\n\nWait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules.\n\n\nOnce the scanning of QR is done on your mobile, click on Finish to get the OTP page to enter otp from your mobile.\n\n\nOpen second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nEven if you have OTP generated on the mobile authenticator app, \nyou might have to scan the qr code again, if you are logging in \nfrom different computer or at a different time or for a different session. \nSince the QR code would expire after some time.\n\n\n\n\n\n\n\n\nThere are log messages in this custom authentication script. \nIn order to debug this module we can use below command.\n\n\ntail -f /opt/gluu/jetty/identity/logs/oxtrust.log | grep \"OTP\"\n\n\n\n\nand\n\n\ntail -f /opt/gluu/jetty/identity/logs/oxtrust_script.log | grep \"OTP\"\n\n\n\n\nDon't have a QR code to scan:\n#\n\n\nIf you have changed your mobile or you have reinstalled Google Authenticator app, \nand if the app is looking for QR code to scan, and you don't see a QR code.\nOpen Gluu LDAP server using a LDAP browser and navigate to  \nappliances\n \nand search for an attribute \noxExternalUid\n. Remove the values of this attribute. \n\n\n\n\nNote\n\n\nLogs are populated only if logs are enabled. For more info on logs refer to the \nLog management\n section of the docs.",
            "title": "HOTP/TOTP"
        },
        {
            "location": "/authn-guide/otp/#one-time-password-otp-authentication",
            "text": "",
            "title": "One-Time Password (OTP) Authentication"
        },
        {
            "location": "/authn-guide/otp/#overview",
            "text": "This document will explain how to use Gluu's  One-Time Password (OTP) interception script  to configure the Gluu Server for a two-step authentication process with username and password as the first step, and OTP as the second step.  In order to use this authentication mechanism users will need to install a mobile app that supports HOTP/TOTP, like  Google Authenticator .   Note  Gluu's OTP interception script uses the two-factor event/counter-based HOTP algorithm  RFC4226  and the time-based TOTP algorithm  RFC6238 .",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/otp/#sequence-diagram",
            "text": "Below is the sequence diagram for TOTP/HOTP and its flow explained:",
            "title": "Sequence Diagram"
        },
        {
            "location": "/authn-guide/otp/#totphotp-enrollmentauthentication-workflow",
            "text": "Person->Browser: Open RP URL\n\nBrowser->RP: Protected resource\n\nRP->Gluu Server: Start AuthZ & AuthN\n\nOTP Script->OTP Script: Verify user/password\n\nalt: User enrollment\n    OTP Script->OTP Script: Check if person not issued OTP key already\n    OTP Script->Browser: Render otpauth QR code with OTP key \n    Person->OTP comp. auth.: Scan QR code\n    OTP comp. auth.->Person: New one time passowrd\n    Person->Browser: Enter one time password\n    Browser->OTP Script:\n    OTP Script->OTP Script: Validate one time passowrd\n    OTP Script->OTP Script: Strore OTP key in user entry\n    OTP Script->Gluu Server: User pass enrollment\nelse User authentication\n    OTP Script->OTP Script: Check if person issued OTP key already\n    OTP comp. auth.->Person: New one time passowrd\n    Person->Browser: Enter one time password\n    Browser->OTP Script:\n    OTP Script->OTP Script: Validate one time passowrd\n    OTP Script->Gluu Server: User pass enrollment\nend\n\nGluu Server->Browser: Return code\nBrowser->RP: Return code\n\nRP->Gluu Server: Request tokens\nRP->Gluu Server: Request user_info",
            "title": "TOTP/HOTP enrollment/authentication workflow"
        },
        {
            "location": "/authn-guide/otp/#properties",
            "text": "The module has a few properties:  1) otp_type - It's mandatory property. It's specify OTP mode: HOTP/ TOTP.\n   Allowed values: hotp/totp\n   Example: hotp  2) issuer - It's mandatory property. It's company name.\n   Example: Gluu Inc  3) otp_conf_file - It's mandatory property. It's specify path to OTP configuration JSON file.\n   Example: /etc/certs/otp_configuration.json  4) label - It's label inside QR code. It's optional property.\n    Example: Gluu OTP  5) qr_options - Specify width and height of QR image. It's optional property.\n    Example: qr_options: { width: 400, height: 400 }  6) registration_uri - It's URL to page where user can register new account. It's optional property.\n    Example: https://hostname/identity/register",
            "title": "Properties"
        },
        {
            "location": "/authn-guide/otp/#configure-otp-with-gluu-server",
            "text": "This list of steps needed to  enable OTP person authentication module.   Confire new custom module in oxTrust:  Log into oxTrust with administrative permissions.  Open  Configuration  >  Manage Custom Scripts .  Select `Person Authentication tab.  Enter name = otp  Enter level = 0-100 (priority of this method).  Select usage type  Interactive .  Select the  Location Type , if the  Location type  is LDAP, \n  script would be automatically populated in the  script  box below.  If  Location type  is selected as text, follow the below  Copy/paste script from TotpExternalAuthenticator.py.    Activate it via  Enabled  checkbox.  Click  Update  button at the bottom of this page.         Configure oxAuth to use OTP authentication by default:  Log into oxTrust with administrative permissions.  Navigate to  Configuration  >  Manage Authentication .  Select  Default Authentication Method  tab. Select \"otp\" authentication mode.  Click  Update  button at the bottom of this page.       Try to log in using OTP authentication method:  Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules.  Once the scanning of QR is done on your mobile, click on Finish to get the OTP page to enter otp from your mobile.  Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong.      Note  Even if you have OTP generated on the mobile authenticator app, \nyou might have to scan the qr code again, if you are logging in \nfrom different computer or at a different time or for a different session. \nSince the QR code would expire after some time.     There are log messages in this custom authentication script. \nIn order to debug this module we can use below command.  tail -f /opt/gluu/jetty/identity/logs/oxtrust.log | grep \"OTP\"  and  tail -f /opt/gluu/jetty/identity/logs/oxtrust_script.log | grep \"OTP\"",
            "title": "Configure OTP with Gluu Server"
        },
        {
            "location": "/authn-guide/otp/#dont-have-a-qr-code-to-scan",
            "text": "If you have changed your mobile or you have reinstalled Google Authenticator app, \nand if the app is looking for QR code to scan, and you don't see a QR code.\nOpen Gluu LDAP server using a LDAP browser and navigate to   appliances  \nand search for an attribute  oxExternalUid . Remove the values of this attribute.    Note  Logs are populated only if logs are enabled. For more info on logs refer to the  Log management  section of the docs.",
            "title": "Don't have a QR code to scan:"
        },
        {
            "location": "/authn-guide/customauthn/",
            "text": "Custom Authentication Script Tutorial\n#\n\n\nOverview\n#\n\n\nInterception scripts\n enable you to customize your Gluu authentication service. In an interception script you can call external APIs, like a commercial authentication service, a DDoS protection service, a fraud detection service, etc., to make your authentication process more secure. In addition, interception scripts give you the ability to implement business driven policies during authentication. \n\n\nFor example, you may want to only prompt users in a certain group for two-factor authentication. Or, you may want to only prompt a user for two-factor authentication if the request is coming from an unknown IP address. These types of policies can be incorporated into your authentication service by writing an interception script that uses the \nmethods\n described below.\n\n\nThis tutorial explains how to write a script to implement a two-step out-of-band authentication using Twilio to send an SMS with a one-time password. At the end of this tutorial you should have a better understanding of how to write your own custom scripts. For reference, you can review the completed Twilio custom authentication script \nhere\n. \n\n\nSuggested Development Environment\n#\n\n\nGluu Server custom scripts are written in \nJython\n. We recommended using Eclipse for coding purposes.\n\n\nCustom Script Location\n#\n\n\nThe GUI for custom authentication scripts can be found by navigating to \n\n\nConfiguration\n > \nManage Custom Scripts\n > \nPerson Authentication\n. \n\n\nCustom scripts can either be inserted directly into the GUI or you can \nspecify a path to the script. We recommend specifying a path in order to \nmake development easier. To specify a path, select \nFile\n from the \nScript Location Type\n field in oxTrust and the \nScript Path\n input box will be displayed:\n\n\n\n\nThe \nLDAP\n option in the \nScript Location Type\n can be used to store the script in the LDAP tree once development is complete. Remember that selecting the \nLDAP\n method requires the script to be copied in the input box that appears upon LDAP selection:\n\n\n\n\nFields in Custom Script:\n#\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nName of the Script\n\n\n\n\n\n\nDescription\n\n\n[optional] Description of the script\n\n\n\n\n\n\nProgramming Language\n\n\nCurrently Python is supported, in the future jscript and Java will be added\n\n\n\n\n\n\nLevel\n\n\nAuthentication Level for the authentication, which determines the security level\n\n\n\n\n\n\nLocation Type\n\n\nThe script can be stored in a \"File\" or in \"LDAP\"\n\n\n\n\n\n\nUsage Type\n\n\nThe script can be written for Web, Native or Both types of applications\n\n\n\n\n\n\nCustome Property\n\n\nDetermines the key and value of the custom property, which can be added to the authentication to pass values between steps\n\n\n\n\n\n\nScript Box\n\n\nScript Box will displayed if Location Type is selected as \"File\", to enter the path of the script\n\n\n\n\n\n\nScript\n\n\nScript Box will be displayed when Location Type is selected as \"LDAP\"\n\n\n\n\n\n\n\n\nCreate Initial Files\n#\n\n\nCreate the following files:\n\n\n\n\nA Python file for your script;\n\n\nOne or more XHTML files if you have a custom form for your authentication;\n\n\nOne or more XML files (you'll need one for each XHTML file) that provide information to the Tomcat server about how to display the XHTML file.\n\n\n\n\nSamples and Documentation\n#\n\n\nThere are many good examples of authentication interception scripts in Gluu's \noxAuth integrations folder\n. The respective \nXHTML\n and \nXML\n files are checked into the \nauth folder\n. The interfaces for authentication interception scripts can be found in the \nGluu Documentation\n.\n\n\nWe used the \nBasic Script\n \nas a template. The \nWikid forms\n \nwere also used as a template since it requires that we pass the value of the \ncode\n obtained from Twilio to step 2 of the authentication to validate and authenticate the user.\n\n\nThe \nWikid authentication\n script was also looked upon for examples on how to process the form.\n\n\nImplement methods - Using Twilio SMS\n#\n\n\nSteps to add a custom template and pass values between 2 steps of authentication for our sample \n\nTwilio script\n:\n\n\n\n\nLogin to Gluu UI;\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n;\n\n\nScroll to the end of the page and click \nAdd custom script configuration\n;\n\n\nEnter the Name, Description, and Programming Language (Python will be by default);\n\n\nSelect the Level to set a security level;\n\n\nSelect Location Type for the script;\n\n\nSelect the Usage Type for the authentication;\n\n\nDefine Custom property, which in our example is provided by Twilio;\n\n\nClick on Enabled to enable the script;\n\n\nScroll down to the bottom of the form and click \nsubmit\n;\n\n\nAfter the custom script is added, navigate to \nConfiguration\n > \nManage Authenticaion\n > \nDefault Authentication Method\n and change the oxTrust authentication mode to \"Twilio\" (or the custom name of your script). \n\n\n\n\nNote: All three below custom properties are mandatory for the Twilio Two-Factor Authentication script to work\n     \n\n\n\n\nACCOUNT_SID - Numerical sequence of numbers, to identify the token assigned to the user associated with Twilio.      \n\n\nAUTH TOKEN  - Alphanumerical number provided by Twilio for the account holder to identify the user.      \n\n\nFROM_NUMBER - Number which is either assigned by Twilio or can be a number user provides to send the code from.       \n\n\n\n\nAs shown in the below illustration:\n\n\n\n\nMethods\n#\n\n\nauthenticate():\n    \n\nThe most important method to implement is the \nauthenticate\n method. This is where the main business logic is located for\nthe authentication workflow. It is possible to switch on the step, with the \nif (step == 1):\n statement. In oxAuth, there is no\nassumption that step 1 and step 2 happen on the same server, therefore the value is stored in LDAP using a temporarily created attribute that can be retrieved in step 2. The step is sent to the \nauthenticate\n method, which helps to save and retrieve the values as required.\n\n\nBelow are a few Methods and Libraries used to Save the Value to LDAP and retrieve the values as required:\n\n\nrandom.randit()\n   \n\n\nrandom.randit(\"start number\",\"\"end number\")\n Generates the code as required.     \n\n\nExample: \nrandom.randit(10000,99999)\n\n\ncontext.set()\n   \n\nThis particular method is obtained from jboss to pass the session attribute value to LDAP by creating a temporary attribute which has a limited lifetime and can be retrieved within the life span, otherwise it expires and the session becomes invalid. Save the value of the code obtained through the code generator method. \ncontext.set(\"Name of the temp attribute\", <key>)\n where \n<key>\n is the value that needs to be stored temporarily in ldap.\n\n\nExample: \ncontext.set(\"code\",code)\n       \n\n\nUserService.instance()\n          \n\nGets the user login instance      \n\n\nServerUtil.getFirstValue():\n         \n\nTo access  information from \nrequestParameters\n in your script with \nServerUtil.getFirstValue(requestParameters, <key>)\n where \n<key>\n\nspecifies the value you want to retrieve, you can also use another method \nrequestParameters.get(\"<key>\")\n\nwhere \n<key>\n specifies the value you want to retrieve .     \n\n\nuserService.getUserByAttribute():\n   \n\n\ngetUserByAttribute(\"LDAP Attribute\", <key>)\n method accesses information in LDAP and retrieves the value of the attribute comparing the value of the \n<Key>\n.      \n\n\nExample: \nuserService.getUserByAttribute(\"uid\", user_name)\n       \n\n\ngetAttribute():\n    \n\nTo retrieve the value of an attribute from LDAP, \ngetAttribute(\"LDAP Attribute name\")\n can be used. \n\n\nExample: \ngetAttribute(\"mobile\")\n     \n\n\nrequestParameters.get():\n      \n\n\nrequestParameters.get(<key>)\n can be used to retrieve values passed from the form through the headers. This will retrieve the values from the form via header and can be stored in a string. Where \n<key>\n is the value to be retrieved from header.\n\n\nExample: \nabc = requestParameters.get(\"passcode\")[0].strip()\n        \n\n\ngetCountAuthenticationSteps():\n       \n\nAnother method usually needed to implement is \ngetCountAuthenticationSteps\n. This method normally just returns 1, 2, or 3. If implementing an adaptive authentication strategy, where the number of steps depends on the context. \n\n\n\n\nNote\n\n\nCheck the \nDuo script\n \nfor a good example of how \ngetCountAuthenticationSteps\n can be used to implement adaptive authentication. The Duo script is scripted so that two-factor authentication is only presented for users in the IT group. The script checks for group membership and dynamically adjusts the number of steps. This can be implemented to check for any logic or attribute during the authentication, like \"country\" or \"region\".\n\n\n\n\ngetExtraParametersForStep():\n   \n\nIf required to save session variables between steps, use the \ngetExtraParametersForStep\n method. The Gluu Server persists\nthese variables in LDAP in able to support stateless, clustered two-step authentications.      \n\n\ngetPageForStep():\n     \n\nIf required to display a special Web page for an interactive login, or even a custom first page, you'll need to implement the\n\ngetPageForStep\n method to specify the page you want to return for a given step.       \n\n\nsession_attributes.get():\n      \n\nThe attribute value that are saved by the session using \ncontext.set\n. This method is derived from the oxauth core java libraries and called using the \nSessionState\n parameters which is defined in the code or program as \nsession_attributes.get(<key>)\n, where \n<key>\n is the session atribute value that is stored in the ldap.     \n\n\nExample: \nsession_attributes.get(\"code\")\n        \n\n\nSaving and Passing Values\n#\n\n\nSaving Values:\n#\n\n\ncontext.set\n can be used to save values of the required key to an attribute temporarily and the created temporary attribute will be alive only for limited time and expires and gets removed, by that way, adding new attribute to the user is not messed up. And also the expired attribute kills the validity of the session and becomes invalid.       \n\n\nRetriving and passing values between steps\n#\n\n\nUsing \nsession_attribute.get()\n method, stored session attribute can be retrieved anywhere between the authentication method, enabling values to be passed between multiple authentication methods for verification and validation. Generated code and the entered \"code\" in the form can be verified using a simple if and the \"code\" from the form can be obtained using the \nrequestParameters.get()\n method or \nserviceUtil.getFirstValue()\n method.\n\n\nCustom Properties\n#\n\n\nSometimes it is helpful to enable system administrators to enter properties that might frequently change. If administrators are not allowed to modify the script, the Custom Property feature can be used as illustrated in below screenshot:\n\n\n\n\nconfigurationAttributes.get(\"<key>\").getValue2\"()\n:\n\n\nTo access this information in your script with \nconfigurationAttributes.get(\"<key>\").getValue2()\n where \n<key>\n specifies the value you want to retrieve.\n\n\nReturning a message to the user\n#\n\n\nIt is possible to use the Context to return a message to the user, which could be especially useful if an error occurs or some kind of user action is required.\n\n\nAdding Libraries\n#\n\n\nPure Python libraries can be added to \n/opt/gluu/python/libs\n, and jar files can be added to  \n/opt/gluu/jetty/oxauth/lib/ext\n.\n\n\n\n\nNote\n\n\njar files should be added within chroot. \n\n\n\n\nTesting\n#\n\n\nWhen the scripting is done, you can test the script by printing the statments to \noxtrust.log\n under \n/opt/gluu/jetty/identity/logs/oxtrust.log\n. \n\n\nPrefixing the logs will help to find the script using tail command \ntail -f | grep <prefix>\n, the prefix logs will provide the script output while one trys to login using the script.\n\n\nIn the Twilio test script, a specific method called \nprintOut\n has been scripted to make it easier to add this prefix.\n\n\nAlso, remember that putting all the code in a \ntry / catch\n is a good practice to avoid unhandled exceptions, since during debugging exceptions may provide a hint at what's causing the issue.\n\n\nFurther logs to debug and monitor the sequence can be done using \noxauth_script.log\n and \noxauth.log\n under \n/opt/gluu/jetty/identity/logs/\n which is within the chroot.\n\n\nReverting Authentication Method\n#\n\n\nIt is not uncommon to get locked out of the Gluu Server while testing the authentication script.\n\n\nIn such a case the following method can be used to revert back to the older authentication method:\n\n\n\n\nOpen LDAP in a LDAP Browser (jxlorer is used here and recommended).\n\n\nNavigate to \"gluu > appliances > {GUID or applicance number}\". \n\n\nSearch for \"oxAuthenticationMode\"  and \"oxTrustAuthenticationMode\" attribute and delete the values. \n\n\nOxAuthenticationMode attribute is used for Login pages, which stores the name of the custom script used.\n\n\nOxTrustAuthenticationMode is used for OxTrsut Admin UI page.\n\n\n\n\n\n\nSubmit the changes.\n\n\nTry to access the login page or Gluu Admin UI.\nAs a secondary option, InPrivate or Incognito or Private Browser from various Browsers can be used.",
            "title": "Custom Authentication"
        },
        {
            "location": "/authn-guide/customauthn/#custom-authentication-script-tutorial",
            "text": "",
            "title": "Custom Authentication Script Tutorial"
        },
        {
            "location": "/authn-guide/customauthn/#overview",
            "text": "Interception scripts  enable you to customize your Gluu authentication service. In an interception script you can call external APIs, like a commercial authentication service, a DDoS protection service, a fraud detection service, etc., to make your authentication process more secure. In addition, interception scripts give you the ability to implement business driven policies during authentication.   For example, you may want to only prompt users in a certain group for two-factor authentication. Or, you may want to only prompt a user for two-factor authentication if the request is coming from an unknown IP address. These types of policies can be incorporated into your authentication service by writing an interception script that uses the  methods  described below.  This tutorial explains how to write a script to implement a two-step out-of-band authentication using Twilio to send an SMS with a one-time password. At the end of this tutorial you should have a better understanding of how to write your own custom scripts. For reference, you can review the completed Twilio custom authentication script  here .",
            "title": "Overview"
        },
        {
            "location": "/authn-guide/customauthn/#suggested-development-environment",
            "text": "Gluu Server custom scripts are written in  Jython . We recommended using Eclipse for coding purposes.",
            "title": "Suggested Development Environment"
        },
        {
            "location": "/authn-guide/customauthn/#custom-script-location",
            "text": "The GUI for custom authentication scripts can be found by navigating to   Configuration  >  Manage Custom Scripts  >  Person Authentication .   Custom scripts can either be inserted directly into the GUI or you can \nspecify a path to the script. We recommend specifying a path in order to \nmake development easier. To specify a path, select  File  from the  Script Location Type  field in oxTrust and the  Script Path  input box will be displayed:   The  LDAP  option in the  Script Location Type  can be used to store the script in the LDAP tree once development is complete. Remember that selecting the  LDAP  method requires the script to be copied in the input box that appears upon LDAP selection:",
            "title": "Custom Script Location"
        },
        {
            "location": "/authn-guide/customauthn/#fields-in-custom-script",
            "text": "Field  Description      Name  Name of the Script    Description  [optional] Description of the script    Programming Language  Currently Python is supported, in the future jscript and Java will be added    Level  Authentication Level for the authentication, which determines the security level    Location Type  The script can be stored in a \"File\" or in \"LDAP\"    Usage Type  The script can be written for Web, Native or Both types of applications    Custome Property  Determines the key and value of the custom property, which can be added to the authentication to pass values between steps    Script Box  Script Box will displayed if Location Type is selected as \"File\", to enter the path of the script    Script  Script Box will be displayed when Location Type is selected as \"LDAP\"",
            "title": "Fields in Custom Script:"
        },
        {
            "location": "/authn-guide/customauthn/#create-initial-files",
            "text": "Create the following files:   A Python file for your script;  One or more XHTML files if you have a custom form for your authentication;  One or more XML files (you'll need one for each XHTML file) that provide information to the Tomcat server about how to display the XHTML file.",
            "title": "Create Initial Files"
        },
        {
            "location": "/authn-guide/customauthn/#samples-and-documentation",
            "text": "There are many good examples of authentication interception scripts in Gluu's  oxAuth integrations folder . The respective  XHTML  and  XML  files are checked into the  auth folder . The interfaces for authentication interception scripts can be found in the  Gluu Documentation .  We used the  Basic Script  \nas a template. The  Wikid forms  \nwere also used as a template since it requires that we pass the value of the  code  obtained from Twilio to step 2 of the authentication to validate and authenticate the user.  The  Wikid authentication  script was also looked upon for examples on how to process the form.",
            "title": "Samples and Documentation"
        },
        {
            "location": "/authn-guide/customauthn/#implement-methods-using-twilio-sms",
            "text": "Steps to add a custom template and pass values between 2 steps of authentication for our sample  Twilio script :   Login to Gluu UI;  Navigate to  Configuration  >  Manage Custom Scripts ;  Scroll to the end of the page and click  Add custom script configuration ;  Enter the Name, Description, and Programming Language (Python will be by default);  Select the Level to set a security level;  Select Location Type for the script;  Select the Usage Type for the authentication;  Define Custom property, which in our example is provided by Twilio;  Click on Enabled to enable the script;  Scroll down to the bottom of the form and click  submit ;  After the custom script is added, navigate to  Configuration  >  Manage Authenticaion  >  Default Authentication Method  and change the oxTrust authentication mode to \"Twilio\" (or the custom name of your script).    Note: All three below custom properties are mandatory for the Twilio Two-Factor Authentication script to work         ACCOUNT_SID - Numerical sequence of numbers, to identify the token assigned to the user associated with Twilio.        AUTH TOKEN  - Alphanumerical number provided by Twilio for the account holder to identify the user.        FROM_NUMBER - Number which is either assigned by Twilio or can be a number user provides to send the code from.          As shown in the below illustration:",
            "title": "Implement methods - Using Twilio SMS"
        },
        {
            "location": "/authn-guide/customauthn/#methods",
            "text": "authenticate():      \nThe most important method to implement is the  authenticate  method. This is where the main business logic is located for\nthe authentication workflow. It is possible to switch on the step, with the  if (step == 1):  statement. In oxAuth, there is no\nassumption that step 1 and step 2 happen on the same server, therefore the value is stored in LDAP using a temporarily created attribute that can be retrieved in step 2. The step is sent to the  authenticate  method, which helps to save and retrieve the values as required.  Below are a few Methods and Libraries used to Save the Value to LDAP and retrieve the values as required:  random.randit()      random.randit(\"start number\",\"\"end number\")  Generates the code as required.       Example:  random.randit(10000,99999)  context.set()     \nThis particular method is obtained from jboss to pass the session attribute value to LDAP by creating a temporary attribute which has a limited lifetime and can be retrieved within the life span, otherwise it expires and the session becomes invalid. Save the value of the code obtained through the code generator method.  context.set(\"Name of the temp attribute\", <key>)  where  <key>  is the value that needs to be stored temporarily in ldap.  Example:  context.set(\"code\",code)          UserService.instance()            \nGets the user login instance        ServerUtil.getFirstValue():           \nTo access  information from  requestParameters  in your script with  ServerUtil.getFirstValue(requestParameters, <key>)  where  <key> \nspecifies the value you want to retrieve, you can also use another method  requestParameters.get(\"<key>\") \nwhere  <key>  specifies the value you want to retrieve .       userService.getUserByAttribute():      getUserByAttribute(\"LDAP Attribute\", <key>)  method accesses information in LDAP and retrieves the value of the attribute comparing the value of the  <Key> .        Example:  userService.getUserByAttribute(\"uid\", user_name)          getAttribute():      \nTo retrieve the value of an attribute from LDAP,  getAttribute(\"LDAP Attribute name\")  can be used.   Example:  getAttribute(\"mobile\")        requestParameters.get():         requestParameters.get(<key>)  can be used to retrieve values passed from the form through the headers. This will retrieve the values from the form via header and can be stored in a string. Where  <key>  is the value to be retrieved from header.  Example:  abc = requestParameters.get(\"passcode\")[0].strip()           getCountAuthenticationSteps():         \nAnother method usually needed to implement is  getCountAuthenticationSteps . This method normally just returns 1, 2, or 3. If implementing an adaptive authentication strategy, where the number of steps depends on the context.    Note  Check the  Duo script  \nfor a good example of how  getCountAuthenticationSteps  can be used to implement adaptive authentication. The Duo script is scripted so that two-factor authentication is only presented for users in the IT group. The script checks for group membership and dynamically adjusts the number of steps. This can be implemented to check for any logic or attribute during the authentication, like \"country\" or \"region\".   getExtraParametersForStep():     \nIf required to save session variables between steps, use the  getExtraParametersForStep  method. The Gluu Server persists\nthese variables in LDAP in able to support stateless, clustered two-step authentications.        getPageForStep():       \nIf required to display a special Web page for an interactive login, or even a custom first page, you'll need to implement the getPageForStep  method to specify the page you want to return for a given step.         session_attributes.get():        \nThe attribute value that are saved by the session using  context.set . This method is derived from the oxauth core java libraries and called using the  SessionState  parameters which is defined in the code or program as  session_attributes.get(<key>) , where  <key>  is the session atribute value that is stored in the ldap.       Example:  session_attributes.get(\"code\")",
            "title": "Methods"
        },
        {
            "location": "/authn-guide/customauthn/#saving-and-passing-values",
            "text": "",
            "title": "Saving and Passing Values"
        },
        {
            "location": "/authn-guide/customauthn/#saving-values",
            "text": "context.set  can be used to save values of the required key to an attribute temporarily and the created temporary attribute will be alive only for limited time and expires and gets removed, by that way, adding new attribute to the user is not messed up. And also the expired attribute kills the validity of the session and becomes invalid.",
            "title": "Saving Values:"
        },
        {
            "location": "/authn-guide/customauthn/#retriving-and-passing-values-between-steps",
            "text": "Using  session_attribute.get()  method, stored session attribute can be retrieved anywhere between the authentication method, enabling values to be passed between multiple authentication methods for verification and validation. Generated code and the entered \"code\" in the form can be verified using a simple if and the \"code\" from the form can be obtained using the  requestParameters.get()  method or  serviceUtil.getFirstValue()  method.",
            "title": "Retriving and passing values between steps"
        },
        {
            "location": "/authn-guide/customauthn/#custom-properties",
            "text": "Sometimes it is helpful to enable system administrators to enter properties that might frequently change. If administrators are not allowed to modify the script, the Custom Property feature can be used as illustrated in below screenshot:   configurationAttributes.get(\"<key>\").getValue2\"() :  To access this information in your script with  configurationAttributes.get(\"<key>\").getValue2()  where  <key>  specifies the value you want to retrieve.",
            "title": "Custom Properties"
        },
        {
            "location": "/authn-guide/customauthn/#returning-a-message-to-the-user",
            "text": "It is possible to use the Context to return a message to the user, which could be especially useful if an error occurs or some kind of user action is required.",
            "title": "Returning a message to the user"
        },
        {
            "location": "/authn-guide/customauthn/#adding-libraries",
            "text": "Pure Python libraries can be added to  /opt/gluu/python/libs , and jar files can be added to   /opt/gluu/jetty/oxauth/lib/ext .   Note  jar files should be added within chroot.",
            "title": "Adding Libraries"
        },
        {
            "location": "/authn-guide/customauthn/#testing",
            "text": "When the scripting is done, you can test the script by printing the statments to  oxtrust.log  under  /opt/gluu/jetty/identity/logs/oxtrust.log .   Prefixing the logs will help to find the script using tail command  tail -f | grep <prefix> , the prefix logs will provide the script output while one trys to login using the script.  In the Twilio test script, a specific method called  printOut  has been scripted to make it easier to add this prefix.  Also, remember that putting all the code in a  try / catch  is a good practice to avoid unhandled exceptions, since during debugging exceptions may provide a hint at what's causing the issue.  Further logs to debug and monitor the sequence can be done using  oxauth_script.log  and  oxauth.log  under  /opt/gluu/jetty/identity/logs/  which is within the chroot.",
            "title": "Testing"
        },
        {
            "location": "/authn-guide/customauthn/#reverting-authentication-method",
            "text": "It is not uncommon to get locked out of the Gluu Server while testing the authentication script.  In such a case the following method can be used to revert back to the older authentication method:   Open LDAP in a LDAP Browser (jxlorer is used here and recommended).  Navigate to \"gluu > appliances > {GUID or applicance number}\".   Search for \"oxAuthenticationMode\"  and \"oxTrustAuthenticationMode\" attribute and delete the values.   OxAuthenticationMode attribute is used for Login pages, which stores the name of the custom script used.  OxTrustAuthenticationMode is used for OxTrsut Admin UI page.    Submit the changes.  Try to access the login page or Gluu Admin UI.\nAs a secondary option, InPrivate or Incognito or Private Browser from various Browsers can be used.",
            "title": "Reverting Authentication Method"
        },
        {
            "location": "/admin-guide/user-group/",
            "text": "User Management in Gluu Server\n#\n\n\nOverview\n#\n\n\nYou can either \"push\" or \"pull\" identity data to the Gluu server to keep \nit up-to-date with the latest user claims. In the \"pull\" mode, otherwise known as LDAP Synchronization or Cache Refresh, the Gluu Server can use one or more existing LDAP identity sources (like Microsoft Active Directory) as the authoritative source of identity information. To \"push\" identities to the Gluu Server you can use the JSON/REST SCIM API. Local user management can also be performed inside oxTrust. Each method is detailed below.\n\n\nLocal User Management\n#\n\n\nIn oxTrust, you can add, edit and manage people, groups and user\nattributes and claims to ensure the proper information is released about\nthe right people.\n\n\nManage People\n#\n\n\nTo manage people, navigate to \nUser\n > \nManage People\n.\n\n\nFrom this interface you can add and search users. Because the user database can potentially be very large, a value is required in the search field. In other words, you can not click search with a blank entry to populate all users. If you need to see all users, this would be best performed manually within the Gluu LDAP server. Upon performing a user search in oxTrust a list will be populated with all users that match the search.\n\n\n\n\nTo edit a user, simply click on any of the hyperlinks associated with\nthat user and you will be taken to a user management interface where you\ncan modify specific attributes relating to that user.\n\n\n\n\nManage Groups\n#\n\n\nOut of the box, the Gluu Server includes one group: the Gluu Manager\nGroup (\ngluuManager\n). Groups can be added and populated as\nneeded. By using the \nManage Groups\n feature, the Gluu Server\nAdministrator can add, delete or modify any group or user within a\ngroup. The list of available groups can be viewed by hitting the\n\nSearch\n button with a blank search box.\n\n\n\nThe Gluu Server Administrator can modify information such as Display\nName, Group Owner, Visibility type etc. The Server Administrator can\nalso add or delete users within existing groups. The group information\nis represented as shown below.\n\n\n\nIf any member of the Organization is required to be added in any\nspecific group, this can be achieved be clicking on the Add Member\nbutton. The flow is \nAdd Member --> Search the name/email of the user\n--> Select the user --> Click OK --> Update.\n\n\n\n\nImport People\n#\n\n\nGluu Server allows the administrator to import users from a file. This can be accessed by navigating to \nUsers\n > \nImport People\n.\n\n\n\n\n\n\nClick on the \nAdd\n button to select the file from which the users will be imported. This feature has been tested with a \nxls\n file.\n\n\n\n\n\n\n\n\nThe file needs to be validated before it can be imported. Click on the \nValidate\n button.\n\n\n\n\n\n\n\n\nClick on the \nImport\n button to complete the import of users.\n\n\n\n\nFile Structure\n#\n\n\nThe file needs to contain the following fields from which the user data will be pulled. Please remember to use the exact spelling as shown here.\n\n\n\n\n\n\nUsername\n\n\n\n\n\n\nFirst Name\n\n\n\n\n\n\nLast Name\n\n\n\n\n\n\nEmail\n\n\n\n\n\n\nUser Registration\n#\n\n\nThe Gluu Server is shipped with a very basic user registration feature. The registration page can typically be found at \nhttps://<hostname>/identity/register\n. It's important to note that when user registration is handled via oxTrust, the users can \nnot\n be added to a backend LDAP or Active Directory server. This means that self-registration via oxTrust is only effective if users are authenticated by GluuLDAP (and not a backend LDAP or AD server).\n\n\n\n\nNote\n\n\nWhen possible, we recommend handling user registration in your app locally, then pushing the user information to the Gluu Server via SCIM. This will give you more control and flexibility in defining the exact registration process. Also, since it was primarily designed as an interface for admins, frequently oxTrust is not Internet facing.\n\n\n\n\nA limited number of attributes are present in the default registration form. If more attributes are needed they can be added via the GUI by navigating to \nOrganization Configuration\n > \nManage Registration\n. Learn how to \nadd attributes\n to the default registration form. \n\n\nUser Registration Custom Script\n#\n\n\nThe \nUser Registration\n custom script can be used to control and validate user registrations. In the oxTrust GUI, navigate to \nConfiguration\n > \nManage Custom Scripts\n > \nUser Registration\n. \n\n\n\n\nSet the \nenable_user\n value to \ntrue\n so that the user can login as soon as the registration is complete. If you want to manually review and approve new user registrations, you can leave this value set to \nfalse\n.\n\n\n\n\nClick \nEnable\n checkbox at the bottom of the page.\n\n\n\n\nNow users should be able to self-register through the user registration link, which should be available at \n<hostname>/identity/register\n.\n\n\n\n\nLDAP Synchronization\n#\n\n\nLDAP Synchronization, a.k.a. Cache Refresh, is the process of connecting one or more existing backend LDAP servers, like Microsoft Active Directory, with the Gluu Server's local LDAP server. Synching people and attributes from a backend server speeds up authentication transactions. It is possible to perform attribute transformations, changing the name of attributes, or even using an interception script to change the values. Transformations are stored in the Gluu LDAP service. \n\n\n\n\nNote\n\n\nIf you are synching user information from multiple backend servers (AD or LDAP) simultaneously, the backend tree structure should be identical.\n\n\n\n\nVideo Tutorial\n#\n\n\nFor a guided video overview of configuring Cache Refresh, please watch the following three videos:  \n\n- \nPart 1: What is 'Cache Refresh' and How Does it Work?\n   \n\n- \nPart 2: Configuring Cache Refresh in the Gluu Server\n  \n\n- \nPart 3: Managing Authentication After You've Setup Cache Refresh\n    \n\n\nThings To Remember\n#\n\n\nThe Gluu Server supports two LDAP modes: \n\n\n\n\nAuthentication \n\n\nIdentity mapping\n\n\n\n\nOnly sometimes is it the same LDAP server. To synchronize user accounts from an external LDAP directory server, you can use the built-in oxTrust features for Cache Refresh, which supports mapping identities from one or more source directory servers.\n\n\nAfter configuring Cache Refresh, you should give it some time to run and populate the LDAP server. Here are some tips before you get started:\n\n\n\n\n\n\nEnable 'Keep External Person' during CR setup. This will allow your\n  default user 'admin' to log into Gluu Server after initial Cache \n  Refresh iteration. If you do not enable 'Keep External Person', your \n  'admin' user including all other test users will be gone after first \n  Cache Refresh iteration.\n\n\n\n\n\n\nMake sure you are using LDAP authentication, not VDS. You will only\n  need VDS setting if you are using the Radiant Logic Virtual Directory\n  Server.\n\n\n\n\n\n\nCheck the snapshots folder to see if files are being created.\n\n\n\n\n\n\nUse the oxTrust admin to browse users.\n\n\n\n\n\n\nUse the command \nldapsearch\n to check to see if results are starting\n  to come in. The following command will search for the total number of\n  users in the Gluu LDAP:\n\n\n\n\n\n\n# /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w 'pass_of_ldap_ -b 'ou=people,o=DA....,o=gluu' dn | grep \"dn\\:\" | wc -l\n\n\n\n\n\n\nTry to login with one of these users. We assume that you have also\n  setup your Gluu Server to use the correct LDAP server for\n  authentication.\n\n\n\n\nThings To Know\n#\n\n\nThe deployer needs to know various values of the backend AD to\nconfigure Cache Refresh. For example, host & port, bindDN user information,\nbindDN password, Objectclasses, attributes which will be\npulled etc.\n\n\nIn addition, the deployer needs to know generic information about the\nGluu Server's LDAP. By default, the deployer can use \nlocalhost:1636\n,\n\ncn=directory manager\n, \npassword\n chosen during installation,\n\nou=people,o=site\n as server information, \nbindDN\n, \nbindDN password\n and\n\nbaseDN\n respectively.\n\n\nAfter collecting this information, the deployer can move forward with\nthe Cache Refresh setup.\n\n\n\n\n\n\n\n\nLast Run:\n The date and time of the latest cache refresh cycle\n  completion is shown here.\n\n\n\n\n\n\nUpdates at the Last Run:\n This shows the total number of users who\n  have been updated in the last Cache Refresh cycle. For example an user\n  who has any of his attribute updated will show up here.\n\n\n\n\n\n\nProblem at the Last Run:\n This shows the number of users who have\n  been rejected by the Gluu Server during the update. If there are any\n  rejections, please contact Gluu Support for clarification and help.\n\n\n\n\n\n\n\n\nCustomer Backend Key and Attributes\n#\n\n\n\n\n\n\n\n\nKey Attribute:\n This is the unique key attribute of backend Active\n  Directory/LDAP Server such as SAMAccountname for any Active Directory.\n\n\n\n\n\n\nObject Class:\n This contains the Object Classes of the backend Active\n  Directory/LDAP which has permission to talk to Gluu Server Cache Refresh\n  such as person, organizationalPerson, user etc.\n\n\n\n\n\n\nSource Attribute:\n This contains the list of attributes which will be\n  pulled and read by the Gluu Server.\n\n\n\n\n\n\nCustom LDAP Filter:\n If there is any custom search required, this\nfiltering mechanism can be used such as \"sn=*\" whereas the value of this\nfield ensures that every user must contain an attribute named SN.\n\n\n\n\n\n\nSource Backend LDAP Servers\n#\n\n\n\n\nThis section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of the organization.\n\n\n\n\n\n\nName:\n Please input \nsource\n as the value.\n\n\n\n\n\n\nUse Anonymous Bind:\n Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.\n\n\n\n\n\n\nBind DN:\n This contains the username to connect to the backend\n  server. You need to use full DN here. As for example,\n  \ncn=gluu,dc=company,dc=org\n.\n\n\n\n\n\n\nUse SSL:\n Use this feature if the backend server allows SSL\n  connectivity.\n\n\n\n\n\n\nMax Connections:\n This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value of 2 or 3.\n\n\n\n\n\n\nServer:\n This contains the backend Active Directory/LDAP server\n  hostname with port i.e. backend.organization.com:389. If organization\n  has a failover server, click \nAdd Server\n and add more hostnames with\n  port.\n\n\n\n\n\n\nBase DN:\n This contains the location of the Active Directory/LDAP\n  tree from where the Gluu Server shall read the user information.\n\n\n\n\n\n\nEnabled:\n This check-box is used to save and push the changes. Do not\n  use this unless the server administrator has entered all the required\n  values.\n\n\n\n\n\n\nChange Bind Password:\n This can be used for a new password or to\n  change any existing password.\n\n\n\n\n\n\nIf your organization has a multiple Active Directory/LDAP server, click\non \nAdd source LDAP server\n and add the additional server information.\nPlease remember that a \nfailover server\n is not a new server.\n\n\nInum LDAP Server\n#\n\n\n\n\nThis section of the application allows the server administrator to\nconnect to the internal LDAP of the Gluu Server. As Gluu Server\nadministrator, you do not need to insert anything here in this section\nas new Gluu Server versions automatically populates this for you (unless\nyou try to manually configure it anyway).\n\n\n\n\n\n\nRefresh Method:\n The Gluu Server allows the Server Administrator to\n  apply two types of Cache Refresh mechanism--(i) VDS Method and (ii) Copy\n  Method.\n\n\n\n\n\n\nVDS Method:\n Any organization with a database like \nmysql\n can use\n  the VDS method. This option can be enabled via the drop-down menu in\n  Refresh Method option.\n\n\n\n\n\n\n\n\n\n\nCopy Method:\n If the organization has any kind of Active\n  Directory/LDAP server, they are strongly recommended to use the \nCopy\n  Method\n from the drop-down menu.\n\n\n\n\n\n\nAttributes Mapping\n#\n\n\nWhen the Copy method is selected, a section for Attribute mapping will\nbe exposed. In this section, the Gluu Server Administrator can map any\nattribute from the backend Active Directory/LDAP to the LDAP cache of\nthe Gluu Server.\n\n\n\n\nIn the source attribute to destination attribute mapping field, you can\nenter the source attribute value on the left, and the destination\nattribute on the right. In other words, you can specify what the\nattribute is on the backend in the left field, and what it should be\nrendered as when it comes through the Gluu Server in the right field.\n\n\nThe Administrator can select any Cache Refresh Method according to the\nbackend Active Directory/LDAP server, but there are some essential\nvalues for both types of cache refresh method. The values are given\nbelow.\n\n\n\n\n\n\nPooling Interval (Minutes):\n This is the interval value for running\n    the Cache Refresh mechanism in the Gluu Server. It is recommended to \n    be kept higher than 15 minutes.\n\n\n\n\n\n\nScript File Name:\n The Gluu Server cache refresh can accept any\n    kind of Jython Script which might help to calculate any custom/complex\n    attribute i.e. eduPersonScopedAffiliation. For more information please\n    contact Gluu Support.\n\n\n\n\n\n\nSnapshot Folder:\n Every cycle of of Gluu Server Cache Refresh cycle\n    saves an overall snapshot and problem-list record on a specified\n    location. This is where the Gluu Server Administrator can specify the\n    location. You can easily decide whether cache refresh synchronizes all\n    users or not. Generally the rejected users are enclosed in the\n    problem-list file. An overall report is displayed at the top of the\n    cache refresh page with headings \nUpdated at the last run\n and\n    \nProblems at the last run\n.\n\n\n\n\n\n\nSnapshot Count:\n This defines the total number of snapshots that\n    are allowed to be saved in the hard drive of the VM. It is recommended\n    to be kept to 20 snapshots.\n\n\n\n\n\n\nLatest Gluu Servers (including Community Edition) introduced two\nupgraded sections here.\n\n\n\n\n\n\nServer IP Address:\n Include the IP of your Gluu Server here. This\n    feature helps to run Cache Refresh mechanism perfectly in a clustered\n    environment.\n\n\n\n\n\n\nRemoved Script File Name location:\n New version of the Gluu Server\n    allows the administrator to manage your custom scripts with more\n    interactive section under configuration named Manage Custom Scripts.\n\n\n\n\n\n\nUpdate:\n This button is used to push the changes in the Gluu\n    Server. Hit this button only when the values have been entered,\n    completely.\n\n\n\n\n\n\nUpdate and Validate Script:\n This button is used to test the\n    operation and integrity of any custom script such as a Jython Script.\n\n\n\n\n\n\nSCIM 2.0\n#\n\n\nThis section outlines how to add/remove user from Gluu Server CE using \nSCIM-Client\n.\n\n\nAdd User\n#\n\n\nThere are two methods to add users:\n\n\n\n\nJSON Sting\n\n\nUser Object\n\n\n\n\nRequired Parameters\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuserName\n\n\nThe intended username for the end-user\n\n\n\n\n\n\ngivenName\n\n\nThe first name of the end-user\n\n\n\n\n\n\nfamilyName\n\n\nThe last name of the end-user\n\n\n\n\n\n\ndisplayName\n\n\nThe formatted first name followed by last name\n\n\n\n\n\n\ngroups\n\n\nOptional parameter if the user is added to any specific group\n\n\n\n\n\n\n\n\nJSON String\n#\n\n\nThe user is added using a JSON object string using the required parameters; however it is possible to add more parameters. The following is an example of a JSON string used to add a user.\n\n\n        Scim2Client client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        String createJson = {\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\"externalId\":\"12345\",\"userName\":\"newUser\",\"name\":{\"givenName\":\"json\",\"familyName\":\"json\",\"middleName\":\"N/A\",\"honorificPrefix\":\"\",\"honorificSuffix\":\"\"},\"displayName\":\"json json\",\"nickName\":\"json\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"json@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"json2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynytest_user\",\"type\":\"Skype\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Test Group\",\"value\":\"@!9B22.5F33.7D8D.B890!0001!880B.F95A!0003!60B7\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"cert-12345\"}]}\n        ScimResponse response = client.createPersonString(createJson, MediaType.APPLICATION_JSON);\n\n\n\n\nUser Object\n#\n\n\nThe following code snippet uses the User object.\n\n\n        User user = new User();\n\n        Name name = new Name();\n        name.setGivenName(\"Given Name\");\n        name.setMiddleName(\"Middle Name\");\n        name.setFamilyName(\"Family Name\");\n        user.setName(name);\n\n        user.setActive(true);\n\n        user.setUserName(\"newUser_\" +  + new Date().getTime());\n        user.setPassword(\"secret\");\n        user.setDisplayName(\"Display Name\");\n        user.setNickName(\"Nickname\");\n        user.setProfileUrl(\"\");\n        user.setLocale(\"en\");\n        user.setPreferredLanguage(\"US_en\");\n\n        List<Email> emails = new ArrayList<Email>();\n        Email email = new Email();\n        email.setPrimary(true);\n        email.setValue(\"a@b.com\");\n        email.setDisplay(\"a@b.com\");\n        email.setType(Email.Type.WORK);\n        email.setReference(\"\");\n        emails.add(email);\n        user.setEmails(emails);\n\n        List<PhoneNumber> phoneNumbers = new ArrayList<PhoneNumber>();\n        PhoneNumber phoneNumber = new PhoneNumber();\n        phoneNumber.setPrimary(true);\n        phoneNumber.setValue(\"123-456-7890\");\n        phoneNumber.setDisplay(\"123-456-7890\");\n        phoneNumber.setType(PhoneNumber.Type.WORK);\n        phoneNumber.setReference(\"\");\n        phoneNumbers.add(phoneNumber);\n        user.setPhoneNumbers(phoneNumbers);\n\n        List<Address> addresses = new ArrayList<Address>();\n        Address address = new Address();\n        address.setPrimary(true);\n        address.setValue(\"test\");\n        address.setDisplay(\"My Address\");\n        address.setType(Address.Type.WORK);\n        address.setReference(\"\");\n        address.setStreetAddress(\"My Street\");\n        address.setLocality(\"My Locality\");\n        address.setPostalCode(\"12345\");\n        address.setRegion(\"My Region\");\n        address.setCountry(\"My Country\");\n        address.setFormatted(\"My Formatted Address\");\n        addresses.add(address);\n        user.setAddresses(addresses);\n\n        ScimResponse response = client.createUser(user, new String[]{});\n        System.out.println(\"response body = \" + response.getResponseBodyString());\n\n        assertEquals(response.getStatusCode(), 201, \"Could not add user, status != 201\");\n\n        User userCreated = Util.toUser(response, client.getUserExtensionSchema());\n        String id = userCreated.getId();\n\n\n\n\nDelete User\n#\n\n\nTo delete a user only the id (the LDAP \ninum\n) is needed.\n\n\n        ScimResponse response = client.deletePerson(id);\n        assertEquals(response.getStatusCode(), 200, \"User could not be deleted, status != 200\");\n\n\n\n\nRequired Parameter\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe LDAP \ninum\n of the user to be deleted\n\n\n\n\n\n\n\n\nUser Extensions\n#\n\n\nUser Extensions allow you to create Custom Attributes in SCIM 2.0. \nSet the custom attribute's \nSCIM Attribute\n parameter to \ntrue\n in oxTrust GUI and \nit will be recognized as a User Extension. This is required to create new custom attributes.\n\n\n\n\nYou can verify the User Extensions via the \nSchema\n endpoint:\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:gluu:2.0:User\n\n\n\n\nNow for the actual code, you can refer to the unit tests in SCIM-Client:\n\n\n\n\nUserExtensionsObjectTest\n\n\nUserExtensionsJsonTest",
            "title": "User Management"
        },
        {
            "location": "/admin-guide/user-group/#user-management-in-gluu-server",
            "text": "",
            "title": "User Management in Gluu Server"
        },
        {
            "location": "/admin-guide/user-group/#overview",
            "text": "You can either \"push\" or \"pull\" identity data to the Gluu server to keep \nit up-to-date with the latest user claims. In the \"pull\" mode, otherwise known as LDAP Synchronization or Cache Refresh, the Gluu Server can use one or more existing LDAP identity sources (like Microsoft Active Directory) as the authoritative source of identity information. To \"push\" identities to the Gluu Server you can use the JSON/REST SCIM API. Local user management can also be performed inside oxTrust. Each method is detailed below.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/user-group/#local-user-management",
            "text": "In oxTrust, you can add, edit and manage people, groups and user\nattributes and claims to ensure the proper information is released about\nthe right people.",
            "title": "Local User Management"
        },
        {
            "location": "/admin-guide/user-group/#manage-people",
            "text": "To manage people, navigate to  User  >  Manage People .  From this interface you can add and search users. Because the user database can potentially be very large, a value is required in the search field. In other words, you can not click search with a blank entry to populate all users. If you need to see all users, this would be best performed manually within the Gluu LDAP server. Upon performing a user search in oxTrust a list will be populated with all users that match the search.   To edit a user, simply click on any of the hyperlinks associated with\nthat user and you will be taken to a user management interface where you\ncan modify specific attributes relating to that user.",
            "title": "Manage People"
        },
        {
            "location": "/admin-guide/user-group/#manage-groups",
            "text": "Out of the box, the Gluu Server includes one group: the Gluu Manager\nGroup ( gluuManager ). Groups can be added and populated as\nneeded. By using the  Manage Groups  feature, the Gluu Server\nAdministrator can add, delete or modify any group or user within a\ngroup. The list of available groups can be viewed by hitting the Search  button with a blank search box.  The Gluu Server Administrator can modify information such as Display\nName, Group Owner, Visibility type etc. The Server Administrator can\nalso add or delete users within existing groups. The group information\nis represented as shown below.  If any member of the Organization is required to be added in any\nspecific group, this can be achieved be clicking on the Add Member\nbutton. The flow is  Add Member --> Search the name/email of the user\n--> Select the user --> Click OK --> Update.",
            "title": "Manage Groups"
        },
        {
            "location": "/admin-guide/user-group/#import-people",
            "text": "Gluu Server allows the administrator to import users from a file. This can be accessed by navigating to  Users  >  Import People .    Click on the  Add  button to select the file from which the users will be imported. This feature has been tested with a  xls  file.     The file needs to be validated before it can be imported. Click on the  Validate  button.     Click on the  Import  button to complete the import of users.",
            "title": "Import People"
        },
        {
            "location": "/admin-guide/user-group/#file-structure",
            "text": "The file needs to contain the following fields from which the user data will be pulled. Please remember to use the exact spelling as shown here.    Username    First Name    Last Name    Email",
            "title": "File Structure"
        },
        {
            "location": "/admin-guide/user-group/#user-registration",
            "text": "The Gluu Server is shipped with a very basic user registration feature. The registration page can typically be found at  https://<hostname>/identity/register . It's important to note that when user registration is handled via oxTrust, the users can  not  be added to a backend LDAP or Active Directory server. This means that self-registration via oxTrust is only effective if users are authenticated by GluuLDAP (and not a backend LDAP or AD server).   Note  When possible, we recommend handling user registration in your app locally, then pushing the user information to the Gluu Server via SCIM. This will give you more control and flexibility in defining the exact registration process. Also, since it was primarily designed as an interface for admins, frequently oxTrust is not Internet facing.   A limited number of attributes are present in the default registration form. If more attributes are needed they can be added via the GUI by navigating to  Organization Configuration  >  Manage Registration . Learn how to  add attributes  to the default registration form.",
            "title": "User Registration"
        },
        {
            "location": "/admin-guide/user-group/#user-registration-custom-script",
            "text": "The  User Registration  custom script can be used to control and validate user registrations. In the oxTrust GUI, navigate to  Configuration  >  Manage Custom Scripts  >  User Registration .    Set the  enable_user  value to  true  so that the user can login as soon as the registration is complete. If you want to manually review and approve new user registrations, you can leave this value set to  false .   Click  Enable  checkbox at the bottom of the page.   Now users should be able to self-register through the user registration link, which should be available at  <hostname>/identity/register .",
            "title": "User Registration Custom Script"
        },
        {
            "location": "/admin-guide/user-group/#ldap-synchronization",
            "text": "LDAP Synchronization, a.k.a. Cache Refresh, is the process of connecting one or more existing backend LDAP servers, like Microsoft Active Directory, with the Gluu Server's local LDAP server. Synching people and attributes from a backend server speeds up authentication transactions. It is possible to perform attribute transformations, changing the name of attributes, or even using an interception script to change the values. Transformations are stored in the Gluu LDAP service.    Note  If you are synching user information from multiple backend servers (AD or LDAP) simultaneously, the backend tree structure should be identical.",
            "title": "LDAP Synchronization"
        },
        {
            "location": "/admin-guide/user-group/#video-tutorial",
            "text": "For a guided video overview of configuring Cache Refresh, please watch the following three videos:   \n-  Part 1: What is 'Cache Refresh' and How Does it Work?     \n-  Part 2: Configuring Cache Refresh in the Gluu Server    \n-  Part 3: Managing Authentication After You've Setup Cache Refresh",
            "title": "Video Tutorial"
        },
        {
            "location": "/admin-guide/user-group/#things-to-remember",
            "text": "The Gluu Server supports two LDAP modes:    Authentication   Identity mapping   Only sometimes is it the same LDAP server. To synchronize user accounts from an external LDAP directory server, you can use the built-in oxTrust features for Cache Refresh, which supports mapping identities from one or more source directory servers.  After configuring Cache Refresh, you should give it some time to run and populate the LDAP server. Here are some tips before you get started:    Enable 'Keep External Person' during CR setup. This will allow your\n  default user 'admin' to log into Gluu Server after initial Cache \n  Refresh iteration. If you do not enable 'Keep External Person', your \n  'admin' user including all other test users will be gone after first \n  Cache Refresh iteration.    Make sure you are using LDAP authentication, not VDS. You will only\n  need VDS setting if you are using the Radiant Logic Virtual Directory\n  Server.    Check the snapshots folder to see if files are being created.    Use the oxTrust admin to browse users.    Use the command  ldapsearch  to check to see if results are starting\n  to come in. The following command will search for the total number of\n  users in the Gluu LDAP:    # /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w 'pass_of_ldap_ -b 'ou=people,o=DA....,o=gluu' dn | grep \"dn\\:\" | wc -l   Try to login with one of these users. We assume that you have also\n  setup your Gluu Server to use the correct LDAP server for\n  authentication.",
            "title": "Things To Remember"
        },
        {
            "location": "/admin-guide/user-group/#things-to-know",
            "text": "The deployer needs to know various values of the backend AD to\nconfigure Cache Refresh. For example, host & port, bindDN user information,\nbindDN password, Objectclasses, attributes which will be\npulled etc.  In addition, the deployer needs to know generic information about the\nGluu Server's LDAP. By default, the deployer can use  localhost:1636 , cn=directory manager ,  password  chosen during installation, ou=people,o=site  as server information,  bindDN ,  bindDN password  and baseDN  respectively.  After collecting this information, the deployer can move forward with\nthe Cache Refresh setup.     Last Run:  The date and time of the latest cache refresh cycle\n  completion is shown here.    Updates at the Last Run:  This shows the total number of users who\n  have been updated in the last Cache Refresh cycle. For example an user\n  who has any of his attribute updated will show up here.    Problem at the Last Run:  This shows the number of users who have\n  been rejected by the Gluu Server during the update. If there are any\n  rejections, please contact Gluu Support for clarification and help.",
            "title": "Things To Know"
        },
        {
            "location": "/admin-guide/user-group/#customer-backend-key-and-attributes",
            "text": "Key Attribute:  This is the unique key attribute of backend Active\n  Directory/LDAP Server such as SAMAccountname for any Active Directory.    Object Class:  This contains the Object Classes of the backend Active\n  Directory/LDAP which has permission to talk to Gluu Server Cache Refresh\n  such as person, organizationalPerson, user etc.    Source Attribute:  This contains the list of attributes which will be\n  pulled and read by the Gluu Server.    Custom LDAP Filter:  If there is any custom search required, this\nfiltering mechanism can be used such as \"sn=*\" whereas the value of this\nfield ensures that every user must contain an attribute named SN.",
            "title": "Customer Backend Key and Attributes"
        },
        {
            "location": "/admin-guide/user-group/#source-backend-ldap-servers",
            "text": "This section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of the organization.    Name:  Please input  source  as the value.    Use Anonymous Bind:  Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.    Bind DN:  This contains the username to connect to the backend\n  server. You need to use full DN here. As for example,\n   cn=gluu,dc=company,dc=org .    Use SSL:  Use this feature if the backend server allows SSL\n  connectivity.    Max Connections:  This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value of 2 or 3.    Server:  This contains the backend Active Directory/LDAP server\n  hostname with port i.e. backend.organization.com:389. If organization\n  has a failover server, click  Add Server  and add more hostnames with\n  port.    Base DN:  This contains the location of the Active Directory/LDAP\n  tree from where the Gluu Server shall read the user information.    Enabled:  This check-box is used to save and push the changes. Do not\n  use this unless the server administrator has entered all the required\n  values.    Change Bind Password:  This can be used for a new password or to\n  change any existing password.    If your organization has a multiple Active Directory/LDAP server, click\non  Add source LDAP server  and add the additional server information.\nPlease remember that a  failover server  is not a new server.",
            "title": "Source Backend LDAP Servers"
        },
        {
            "location": "/admin-guide/user-group/#inum-ldap-server",
            "text": "This section of the application allows the server administrator to\nconnect to the internal LDAP of the Gluu Server. As Gluu Server\nadministrator, you do not need to insert anything here in this section\nas new Gluu Server versions automatically populates this for you (unless\nyou try to manually configure it anyway).    Refresh Method:  The Gluu Server allows the Server Administrator to\n  apply two types of Cache Refresh mechanism--(i) VDS Method and (ii) Copy\n  Method.    VDS Method:  Any organization with a database like  mysql  can use\n  the VDS method. This option can be enabled via the drop-down menu in\n  Refresh Method option.      Copy Method:  If the organization has any kind of Active\n  Directory/LDAP server, they are strongly recommended to use the  Copy\n  Method  from the drop-down menu.",
            "title": "Inum LDAP Server"
        },
        {
            "location": "/admin-guide/user-group/#attributes-mapping",
            "text": "When the Copy method is selected, a section for Attribute mapping will\nbe exposed. In this section, the Gluu Server Administrator can map any\nattribute from the backend Active Directory/LDAP to the LDAP cache of\nthe Gluu Server.   In the source attribute to destination attribute mapping field, you can\nenter the source attribute value on the left, and the destination\nattribute on the right. In other words, you can specify what the\nattribute is on the backend in the left field, and what it should be\nrendered as when it comes through the Gluu Server in the right field.  The Administrator can select any Cache Refresh Method according to the\nbackend Active Directory/LDAP server, but there are some essential\nvalues for both types of cache refresh method. The values are given\nbelow.    Pooling Interval (Minutes):  This is the interval value for running\n    the Cache Refresh mechanism in the Gluu Server. It is recommended to \n    be kept higher than 15 minutes.    Script File Name:  The Gluu Server cache refresh can accept any\n    kind of Jython Script which might help to calculate any custom/complex\n    attribute i.e. eduPersonScopedAffiliation. For more information please\n    contact Gluu Support.    Snapshot Folder:  Every cycle of of Gluu Server Cache Refresh cycle\n    saves an overall snapshot and problem-list record on a specified\n    location. This is where the Gluu Server Administrator can specify the\n    location. You can easily decide whether cache refresh synchronizes all\n    users or not. Generally the rejected users are enclosed in the\n    problem-list file. An overall report is displayed at the top of the\n    cache refresh page with headings  Updated at the last run  and\n     Problems at the last run .    Snapshot Count:  This defines the total number of snapshots that\n    are allowed to be saved in the hard drive of the VM. It is recommended\n    to be kept to 20 snapshots.    Latest Gluu Servers (including Community Edition) introduced two\nupgraded sections here.    Server IP Address:  Include the IP of your Gluu Server here. This\n    feature helps to run Cache Refresh mechanism perfectly in a clustered\n    environment.    Removed Script File Name location:  New version of the Gluu Server\n    allows the administrator to manage your custom scripts with more\n    interactive section under configuration named Manage Custom Scripts.    Update:  This button is used to push the changes in the Gluu\n    Server. Hit this button only when the values have been entered,\n    completely.    Update and Validate Script:  This button is used to test the\n    operation and integrity of any custom script such as a Jython Script.",
            "title": "Attributes Mapping"
        },
        {
            "location": "/admin-guide/user-group/#scim-20",
            "text": "This section outlines how to add/remove user from Gluu Server CE using  SCIM-Client .",
            "title": "SCIM 2.0"
        },
        {
            "location": "/admin-guide/user-group/#add-user",
            "text": "There are two methods to add users:   JSON Sting  User Object",
            "title": "Add User"
        },
        {
            "location": "/admin-guide/user-group/#required-parameters",
            "text": "Parameter  Description      userName  The intended username for the end-user    givenName  The first name of the end-user    familyName  The last name of the end-user    displayName  The formatted first name followed by last name    groups  Optional parameter if the user is added to any specific group",
            "title": "Required Parameters"
        },
        {
            "location": "/admin-guide/user-group/#json-string",
            "text": "The user is added using a JSON object string using the required parameters; however it is possible to add more parameters. The following is an example of a JSON string used to add a user.          Scim2Client client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        String createJson = {\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\"externalId\":\"12345\",\"userName\":\"newUser\",\"name\":{\"givenName\":\"json\",\"familyName\":\"json\",\"middleName\":\"N/A\",\"honorificPrefix\":\"\",\"honorificSuffix\":\"\"},\"displayName\":\"json json\",\"nickName\":\"json\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"json@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"json2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynytest_user\",\"type\":\"Skype\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Test Group\",\"value\":\"@!9B22.5F33.7D8D.B890!0001!880B.F95A!0003!60B7\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"cert-12345\"}]}\n        ScimResponse response = client.createPersonString(createJson, MediaType.APPLICATION_JSON);",
            "title": "JSON String"
        },
        {
            "location": "/admin-guide/user-group/#user-object",
            "text": "The following code snippet uses the User object.          User user = new User();\n\n        Name name = new Name();\n        name.setGivenName(\"Given Name\");\n        name.setMiddleName(\"Middle Name\");\n        name.setFamilyName(\"Family Name\");\n        user.setName(name);\n\n        user.setActive(true);\n\n        user.setUserName(\"newUser_\" +  + new Date().getTime());\n        user.setPassword(\"secret\");\n        user.setDisplayName(\"Display Name\");\n        user.setNickName(\"Nickname\");\n        user.setProfileUrl(\"\");\n        user.setLocale(\"en\");\n        user.setPreferredLanguage(\"US_en\");\n\n        List<Email> emails = new ArrayList<Email>();\n        Email email = new Email();\n        email.setPrimary(true);\n        email.setValue(\"a@b.com\");\n        email.setDisplay(\"a@b.com\");\n        email.setType(Email.Type.WORK);\n        email.setReference(\"\");\n        emails.add(email);\n        user.setEmails(emails);\n\n        List<PhoneNumber> phoneNumbers = new ArrayList<PhoneNumber>();\n        PhoneNumber phoneNumber = new PhoneNumber();\n        phoneNumber.setPrimary(true);\n        phoneNumber.setValue(\"123-456-7890\");\n        phoneNumber.setDisplay(\"123-456-7890\");\n        phoneNumber.setType(PhoneNumber.Type.WORK);\n        phoneNumber.setReference(\"\");\n        phoneNumbers.add(phoneNumber);\n        user.setPhoneNumbers(phoneNumbers);\n\n        List<Address> addresses = new ArrayList<Address>();\n        Address address = new Address();\n        address.setPrimary(true);\n        address.setValue(\"test\");\n        address.setDisplay(\"My Address\");\n        address.setType(Address.Type.WORK);\n        address.setReference(\"\");\n        address.setStreetAddress(\"My Street\");\n        address.setLocality(\"My Locality\");\n        address.setPostalCode(\"12345\");\n        address.setRegion(\"My Region\");\n        address.setCountry(\"My Country\");\n        address.setFormatted(\"My Formatted Address\");\n        addresses.add(address);\n        user.setAddresses(addresses);\n\n        ScimResponse response = client.createUser(user, new String[]{});\n        System.out.println(\"response body = \" + response.getResponseBodyString());\n\n        assertEquals(response.getStatusCode(), 201, \"Could not add user, status != 201\");\n\n        User userCreated = Util.toUser(response, client.getUserExtensionSchema());\n        String id = userCreated.getId();",
            "title": "User Object"
        },
        {
            "location": "/admin-guide/user-group/#delete-user",
            "text": "To delete a user only the id (the LDAP  inum ) is needed.          ScimResponse response = client.deletePerson(id);\n        assertEquals(response.getStatusCode(), 200, \"User could not be deleted, status != 200\");",
            "title": "Delete User"
        },
        {
            "location": "/admin-guide/user-group/#required-parameter",
            "text": "Parameter  Description      id  The LDAP  inum  of the user to be deleted",
            "title": "Required Parameter"
        },
        {
            "location": "/admin-guide/user-group/#user-extensions",
            "text": "User Extensions allow you to create Custom Attributes in SCIM 2.0. \nSet the custom attribute's  SCIM Attribute  parameter to  true  in oxTrust GUI and \nit will be recognized as a User Extension. This is required to create new custom attributes.   You can verify the User Extensions via the  Schema  endpoint:  <domain root>/identity/seam/resource/restv1/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:gluu:2.0:User   Now for the actual code, you can refer to the unit tests in SCIM-Client:   UserExtensionsObjectTest  UserExtensionsJsonTest",
            "title": "User Extensions"
        },
        {
            "location": "/admin-guide/session/",
            "text": "Session Timeout in Gluu\n#\n\n\nSession Timeout can be configured under \nJSON Configuration>OxAuth Properties.\n\n\nThese properties are\n\n\n\n\nSessionUnusedLifeTime\n\n\nsessionIdUnauthenticatedUnusedLifetime\n\n\n\n\nSessionUnusedLifeTime\n#\n\n\nSessionUnusedLifeTime property is set to default for a day. \nSession timeout works in such way that if the application is logged out, \nif SessionUnusedLifeTime gets expired. If specific session timeout is set \nin an application, it would be overrided by the SessionUnusedLifeTime from \nGluu.\n\n\nIf application's Session time is less than the session time out \nconfigured in Gluu, the application's session would be reauthorized and \nset to a future time for timeout, where the applicatin's session timeout \nwill be overrided by Gluu's Session timeout property.\n\n\nSessionIdUnauthenticatedUnusedLifeTime\n#\n\n\nList of OxAuth Properties for reference can be found in \n\nOxAuth JSON Properties",
            "title": "Session Timeout"
        },
        {
            "location": "/admin-guide/session/#session-timeout-in-gluu",
            "text": "Session Timeout can be configured under \nJSON Configuration>OxAuth Properties.  These properties are   SessionUnusedLifeTime  sessionIdUnauthenticatedUnusedLifetime",
            "title": "Session Timeout in Gluu"
        },
        {
            "location": "/admin-guide/session/#sessionunusedlifetime",
            "text": "SessionUnusedLifeTime property is set to default for a day. \nSession timeout works in such way that if the application is logged out, \nif SessionUnusedLifeTime gets expired. If specific session timeout is set \nin an application, it would be overrided by the SessionUnusedLifeTime from \nGluu.  If application's Session time is less than the session time out \nconfigured in Gluu, the application's session would be reauthorized and \nset to a future time for timeout, where the applicatin's session timeout \nwill be overrided by Gluu's Session timeout property.",
            "title": "SessionUnusedLifeTime"
        },
        {
            "location": "/admin-guide/session/#sessionidunauthenticatedunusedlifetime",
            "text": "List of OxAuth Properties for reference can be found in  OxAuth JSON Properties",
            "title": "SessionIdUnauthenticatedUnusedLifeTime"
        },
        {
            "location": "/admin-guide/saml/",
            "text": "SAML\n#\n\n\nOverview\n#\n\n\nSAML is an XML-based, open-standard data format for exchanging \nauthentication and authorization data between an identity provider \n(like the Gluu Server) and a service provider (like Dropbox, O365, etc.). \nSAML is a stable and mature standard, and is well supported at many of the \nInternet's largest domains. However, the last major release of SAML was in 2005! \nTherefore it is important to understand when to use SAML and when to use a \nnewer protocol like OpenID Connect to achieve your identity goals. \n\n\nRefer to these four considerations to determine which protocol \nto use for single sign-on (SSO):\n\n\n\n\nIf you have an application that already supports SAML, use SAML.\n\n\nIf you need to support user login at an external IDP (like a customer or partner IDP), use SAML.\n\n\nIf you have a mobile application, use OpenID Connect.\n\n\nIf you are writing a new application, use OpenID Connect.\n\n\n\n\nIf you are continuing with the SAML documentation it is presumed your use case aligns with one or both of the first two bullet points above. If not, we recommend that you review the \nOpenID Connect\n portion of the Gluu Server docs. \n\n\nOutbound vs. Inbound SAML\n#\n\n\nThere are two main SAML authentication workflows: outbound SAML and inbound SAML. \nOutbound SAML can also be called SP-initiated Single Sign-On (SSO) or traditional SAML. \nIn an outbound SAML transaction a website or application (SP) redirects a user to a \ndesignated Identity Provider (IDP) for authentication and authorization. \nThe IDP asks for the user's credentials and upon successful authentication redirects the user to the protected content. \n\n\nInbound SAML enables an organization to offer SAML authentication as a front door to their digital service. Inbound SAML is a common requirement for SaaS providers who need to support the authentication requirements of large enterprise customers.\n\n\nThe Gluu Server bundles separate components to support both workflows (installation of each component is optional during Gluu Server deployment):\n\n\n\n\n\n\nFor outbound SAML, the Gluu Server bundles the \nShibboleth SAML IDP\n. \n\n\n\n\n\n\nFor inbound SAML, the Gluu Server bundles the \nAsimba SAML Proxy\n. \n\n\n\n\n\n\nDocumentation for each service follows in the sections below. \n\n\nOutbound SAML (Shibboleth)\n#\n\n\nOutbound SAML can also be called SP-initiated Single Sign-On (SSO) \nor traditional SAML. In an outbound SAML transaction a website or application (SP) \nredirects a user to a designated Identity Provider (IDP) for authentication \nand authorization. The IDP will ask for the user's credentials and upon successful \nauthentication, the user is sent back to the SP logged in. \n\n\nIn order for this transaction to happen successfully there must be pre-established \ntrust between the IDP and the SP. In the Gluu Server, the IDPs SSO configuration is \ncalled a Trust Relationship (TR). The following sections cover how to create a TR in the Gluu Server. \n\n\n\n\nNote\n\n\nFor any outbound SAML transaction, a trust relationship must be created in the IDP.\n\n\n\n\nTrust Relationship Requirements\n#\n\n\nEach Trust Relationship requires the infomation listed below.\n\n\nMetadata of the SP\n     \n\nMetadata is an XML file which has configuration data used to establish trust between the website (SP) and IDP (Gluu Server). Websites (SP) can provide metadata via a URL or as a separate file. Metadata can change, so a static URL typically requires the least amount of ongoing maintenance. \n\n\nMetadata of the Gluu Server\n     \n\nThe Gluu Server's SAML metadata may be needed from time to time. It can be found at \nhttps://hostname/idp/shibboleth\n.\n\n\nRequired Attributes\n    \n\nEach SP may require one or many attributes in order to grant a user access. \nRequired attributes vary depending on the application, and should be \nexplicitly listed in the application's documentation. The Gluu Server ships with \ncertain preconfigured attributes and also supports the creation of custom attributes. \nOnce the attributes are available in the Gluu Server, the administrator only needs \nto click on the desired attribute(s) and it will be released to the SP upon \nsuccessful user authentication.\n\n\nSAML Attributes\n#\n\n\nAttrubute in oxTrust\n#\n\n\nAn \nActive\n attribute list can be seen from the Configuration > Attributes section.\n\n\n\n\nThe Gluu Server has a large LDAP tree which includes all standard\nattributes. It is not necessary for all of them to be \nActive\n. The\nactive LDAP trees can be sorted using the \nShow only Active Attributes\n\nlink.\n\n\n\n\nThe Gluu Server administrator can make changes, such as changing the\nstatus to active/inactive, to an attribute after clicking on it.\n\n\n\n\nAdditional custom attributes can be added in below way\n\n\n\n\nAdd custom attribute to /opt/gluu/schema/openldap/custom.schema \n\n\nIn this below example 'customTest' is our custom attribute : \n\n\n\n\nattributetype ( oxAttribute:1003 NAME 'customTest'\n        SUBSTR caseIgnoreSubstringsMatch EQUALITY caseIgnoreMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.15        \n       X-ORIGIN 'Gluu - custom person attribute' )\n\n\n\n\n\n\nAdd custom attribute to gluuCustomPerson objectClass\n\n\nExample: \n\n\n\n\nobjectclass ( oxObjectClass:101 NAME 'gluuCustomPerson' SUP top AUXILIARY MAY (customTest) X-ORIGIN 'Gluu - Custom person objectclass' )\n\n\n\n\n\n\n\nStop LDAP server with command \nservice solserver stop\n\n\nCreate custom configuration holder with \nmkdir -p /opt/symas/etc/openldap/slapd.d\n\n\nTest custom configuration with \n/opt/symas/bin/slaptest -f /opt/symas/etc/openldap/slapd.conf -F /opt/symas/etc/openldap/slapd.d\n\n\nStart LDAP server with command \nservice solserver start\n\n\n\n\nRegister new attribute with Gluu Server GUI, oxTrust, by\nclicking the \nRegister Attribute\n button. Then, the following screen will\nappear:\n\n\n\n\n\n\n\n\nName:\n This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.\n\n\n\n\n\n\nSAML1 URI:\n This field contains the SAML1 uri for the custom attribute.\n\n\n\n\n\n\nSAML2 URI:\n This field contains the SAML2 uri for the custom attribute.\n\n\n\n\n\n\nDisplay Name:\n This display name can be anything that is human readable.\n\n\n\n\n\n\nType:\n The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:\n\n\n\n\nText\n\n\nNumeric\n\n\nPhoto\n\n\n\n\nDate\n\n\n\n\n\n\nEdit Type:\n This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).\n\n\n\n\n\n\nView Type:\n This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.\n\n\n\n\n\n\nPrivacy Level:\n Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.\n\n\n\n\n\n\nMultivalued:\n Please select multivalue in this field if the attribute\n  contains more than one value.\n\n\n\n\n\n\nSCIM Attributes:\n If the attribute is a part of SCIM architecture select true.\n\n\n\n\n\n\nDescription:\n This contains a few words to describe the attribute.\n\n\n\n\n\n\nStatus:\n The status, when selected active, will release and publish\n  the attribute in IdP.\n\n\n\n\n\n\nCustom NameID\n#\n\n\nGluu Server comes with the \ntransientID\n attribute which is the default \nNameID\n.\nIf there are other \nNameID\n requirements, it is possible to create them as well.\nThe custom attribute must be created in oxTrust first before defining it as the \nNameID\n.\nPlease see the \noxTrust custom attribute guide\n to create the custom attribute in oxTrust.\n\n\nDefining NameID\n#\n\n\nThe template file for \nNameID\n definitions are located in the \nattribute-resolver.xml.vm\n file under \n/opt/gluu/jetty/identity/conf/shibboleth3/idp/\n.\n  The example below adds \ntestcustomattribute\n as \nNameID\n based on UID attribute. The following are put into the \nattribute-resolver.xml.vm\n file.\n\n\n\n\nAdd declaration for the new attribute\n  \nif( ! ($attribute.name.equals('transientId') or $attribute.name.equals('testcustomattribute') ) )\n\n\nAdd definition for the new attribute\n\n\n\n\n <resolver:AttributeDefinition id=\"testcustomattribute\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"uid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition> \n\n\n\n\n\n\nRestart identity service using below command\n\n\n\n\nservice identity restart\n \n\n\nHowever it is recommended to stop and start service using \n\n\nservice identity stop\n\n\nservice identity start\n\n\nCreate a Trust Relationship in the Gluu Server\n#\n\n\n\n\nGo to \nSAML\n > \nTrust Relationships\n\n\nClick on \nAdd Trust Relationship\n\n\nA new page will appear where you can provide all the required information to create a Trust\n  Relationship(TR).\n\n\n\n\n\n\n\n\nDisplay Name\n: Name of the Trust Relationship (it should be unique for every trust relationship)     \n\n\nDescription\n: Little description. Purpose and SSO link can be added here.    \n\n\n\n\nMetadata Type\n: There are four available options to choose from. The correct Type depends on how the SP is delivering Metadata to your IDP.      \n\n\n\n\nFile\n: Choose File if the SP has provided an uploadable metadata document in XML format.\n\n\nURI\n: Chose URI if the SP metadata is hosted on a URI that is accessible from the Internet.\n\n\nGenerate\n: Choose Generate if the SP is an \"inhouse application\" or the \u201cShibboleth SP\u201d is going to be installed in the target application (SP). This option will generate a how-to guide for installing the Shibboleth SP. If you plan on using the Generate method, please note the following:        \n\n        * \nURL\n : This is the hostname of the SP.   \n\n        * \nPublic certificate\n : You must provide the certificate, which is a Base64 encoded ASCII file, and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate \ncan not\n be password protected.             \n\n        * After creating the Trust Relationship, download the generated configuration files from the \nDownload Shibboleth2 configuration files\n link and place these configuration files inside your SP configuration.         \n\n\nFederation\n: Choose this option if the target application (SP) is affiliated with a federation service (e.g. InCommon, NJEdge etc.). Once you select \u201cFederation\u201d as the Metadata Type, another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu you can select the appropriate federation. After selecting the \u201cFederation Name\u201d, a new link called \u201cClick to select\nentity id\u201d will appear. Use this link to find and select the SP entityIDs that you wish to create SSO with. Learn how to establish trust with a federation \nbelow\n.     \n\n\n\n\n\n\n\n\nReleased\n: The SPs required attributes must be added to this panel. The required attributes can be selected from the menu on the left with the heading \u201cRelease Additional Attributes\u201d.     \n\n\n\n\n\n\nThe Trust Relationship(TR) is added by clicking the \nAdd\n button located in the lower left side of the page.     \n\n\nRelying Party Configuration\n#\n\n\nIf the target application does not already support SAML, the Relying Party software must be configured. The relying party configuration is accessible on the TR Creation page. The checkbox \nConfigure specific Relying Party\n must be checked.     \n\n\n     \n\n\nThe checkbox will result in a link which can be accessed to find information about configuring the relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.     \n\n\n     \n\n\n\n\nNote\n\n\nIf the target application does not already support a federation standard like SAML, and you or the developer are planning on adding federation to the application, we strongly recommend using OpenID Connect rather than SAML. OpenID Connect is newer, easier to use, and follows modern best practices. Learn more in our blog: \nOAuth vs. SAML vs. OpenID Connect\n.\n\n\n\n\nFederation Configuration\n#\n\n\nIf the SP is part of an identity federation such as InCommon, the administrator must add the federation as an SP in the Gluu Server. This will enable the administrator to more easily create TRs with SPs in the federation. The example below shows how an administrator would add a TR for the InCommon Federation.\n\n\n\n\nOnce a TR has been established with the federation, the Gluu Server administrator can easily create TRs with any SP included in the federation by selecting the federation from the \nFederation Name\n drop down menu and selecting the entity-id for the SP.\n\n\n\n\nInbound SAML (Asimba)\n#\n\n\nInbound SAML allows users from external domains to login at their home identity provider to gain access to resources protected by the Gluu Server. The Gluu Server uses an open source product called \nAsimba\n to normalize inbound SAML. \n\n\nThe following documentation provides a step-by-step guide for configuring Asimba with two (2) IDPs and a single (1) SP. The guide includes use of a SAML interception script which is shipped with the Gluu Server and simplifies the process of using Asimba. The administrator can add multiple IDPs or SPs (as required) using the method outlined below. Each SP and IDP must be connected to the IDP that has the Asimba module enabled.\n\n\n\n\nNote\n\n\nA description of the SAML interception script is available \nhere\n.\n\n\n\n\n\n\nRequired Setup\n#\n\n\n\n\n\n\n\n\nSetup hostname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://sp.gluu.org/protected/print.py\n\n\nThis is a shibboleth SP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\nhttps://test.gluu.org\n\n\nThis is a Gluu Server with Asimba installed\n\n\n\n\n\n\nhttps://nest.gluu.org\n\n\nThis is a second Gluu Server with Shibboleth installed that is connected to \nhttps://test.gluu.org\n\n\n\n\n\n\n\n\nThe Gluu Server with hostname \nhttps://test.gluu.org\n must include Asimba. The Gluu Server with hostname \nhttps://nest.gluu.org\n must include Shibboleth. This is done by entering \nyes\n to the respective options while running the \nsetup script prompt\n during installation. \n\n\nAdd Custom Script\n#\n\n\nLogin to the Gluu Server with hostname \nhttps://test.gluu.org\n and add the SAML script: \n\n\n\n\nLog into the oxTrust interface as \nadmin\n\n\nNavigate to \nConfiguration\n > \nManage Custom Scripts\n\n\nIn the \nPerson Authentication\n tab Select/Add \nsaml\n script \n\n\n\n\n\n\n\n\nName: asimba\n\n\nDescription: Inbound Saml via Asimba Authentication module\n\n\nProgramming Language: Python\n\n\nLevel: 50\n\n\nLocation Type: LDAP\n\n\nUsage Type: Web\n\n\nCustom property (key/value)\n\n\nasimba_saml_certificate_file: /etc/certs/saml/pem\n\n\nasimba_entity_id: {gluu ce url}/saml eg; https://gluu-ubuntu.workgroup.com/saml\n\n\nsaml_deployment_type: enroll\n\n\nsaml_idp_sso_target_url: \nhttps://test.gluu.org/asimba/profiles/saml2/sso/web\n\n\nsaml_validate_response: false\n\n\nasimba_entity_id: \nhttps://test.gluu.org/saml\n\n\nasimba_saml_certificate_file: \n/etc/certs/saml.pem\n\n\nnote: Deployer need to copy 'asimba.crt' in 'saml.pem' without the 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag. \n\n\n\n\n\n\nuser_object_classes: \neduPerson\n\n\nsaml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] } \n\n\nexample: \n{\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }\n\n\n\n\n\n\nenforce_uniqueness_attr_list: \nattribute1\n, \nattribute2\n\n\nexample: \nedupersonprincipalname, uid, mail, givenName\n\n\n\n\n\n\nsaml_use_authn_context: false\n\n\nsaml_generate_name_id: true\n\n\nScript: Please copy the \nSAML Script\n from Github. \n\n\nEnabled: True\n\n\n\n\n\n\n\n\nAdd External IDP\n#\n\n\nLogin to the Gluu Server with hostname \nhttps://test.gluu.org\n and add the external IDP: \n\n\n\n\nLog into the oxTrust interface\n\n\nNavigate to \nSAML\n > \nIDP\n\n\nClick \nAdd IDP\n  \n\n\n  \n\n\n\n\nFill in the form with the following information:\n\n\n\n\n\n\nID: The entityID of the remote ID/ADFS \n\n\n\n\nExample: \nhttps:nest.gluu.org/idp/shibboleth\n  \n\n\n\n\n\n\n\n\nFriendly Name: Provide a human-readable name, like an organization or site name.\n\n\n\n\n\n\nMetadata URL: Leave this field blank, we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Leave this field as is. \n\n\n\n\n\n\nMetadata File: Download the remote IDPs metadata and upload that XML file. \n\n\n\n\nExample: The metadata for a Gluu IDP can be downloaded using \nwget -c https:<hostname_of_gluu_server>/idp/shibboleth\n\n\n\n\n\n\n\n\nTrust Certificate File: Get the SAML cert from the remote IDP and upload that x509 certificate\n\n\n\n\nExample: You can get a Gluu Server's SAML certificate in the metadata or in \n/etc/certs/shibIDP.crt\n\n\n\n\n\n\n\n\nNameIDFormat: If the remote IDP is a Gluu Server use SAML2 URI nameID format. If not ask for the nameID format.\n\n\n\n\nExample: \nurn:oasis:names:tc:SAML:2.0:nameid-format:transient\n\n\n\n\n\n\n\n\nEnabled: Yes\n\n\n\n\n\n\nSend Scoping: Yes\n\n\n\n\n\n\nAllowCreate: Yes\n\n\n\n\n\n\nDisable SSO for IDP: No\n\n\n\n\n\n\nACS index: Yes\n\n\n\n\n\n\nSend NameIDPolicy: Yes\n\n\n\n\n\n\nAvoid Subject Confirmations: No\n\n\n\n\n\n\n\n\n\n\nAdd SP Requestor\n#\n\n\nLogin to the Gluu Server with hostname \nhttps://test.gluu.org\n and add the SP Requestor: \n\n\n\n\nLog into oxTrust interface\n\n\nNavigate to \nSAML\n > \nSP Requestor\n\n\nClick \nAdd SP Requestor\n\n\n\n\nFill in the form with the information below:\n\n\nSelect parent SP Pool: requestorpool.1\n\n\nID: https://test.gluu.org/saml\n\n\nFriendly Name: oxAuth SAML\n\n\nMetadata URL: Not required\n\n\nMetadata Timeout: -1\n\n\nMetadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata. \n\n\nTrust Certificate File: Not required\n\n\nProperties: Not required\n\n\nEnabled: Yes\n\n\nSigning: No\n\n\nmetadata snippet: \n\n\n\n\n\n\n\n\n<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor> \n\n\n\n\nAdd Trust Relationship\n#\n\n\nLogin to the Gluu Server with hostname \nhttps://nest.gluu.org\n and create a Trust Relationship for all SPs which are included in the SAML Proxy SSO workflow. Documentation for creating a Trust Relationship is available in \nSection 2.1\n. \n\n\nIn our test setup we have created a Trust Relationship for one remote SP with the entityID \nhttps://sp.gluu.org/shibboleth\n.\n\n\n\n\nThe Asimba metadata can be retrieved and downloaded from \nhttps://test.gluu.org/asimba/profiles/saml2\n\n\nWhile creating the Trust Relationship, choose \nFile\n as the \nMetadata Type\n and upload the Asumba metadata. \n\n\nRelying Party Configuration: \nSAML2SSO\n Profile \n\n\n\n\n\n\n\n\n- example: \n    - includeAttributeStatement: Yes\n    - assertionLifeTime: 300000\n    - assertionProxyCount: 0\n    - signResponses: conditional\n    - signAssertions: never`\n    - signRequests: conditional\n    - encryptAssertions: never\n    - encryptNameIds: never\n\n\n\n\n\nAttribute: Any attribute Service Providers require. Any kind of nameID from below list is mandatory. \n\n\nnameID: \n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"\n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n\n\n\n\n\n\nHow to create nameID in Gluu Server is available \nhere\n\n\n\n\n\n\n\n\nTest SSO\n#\n\n\nHere is a \nquick video\n to demonstrate how SSO should look with everything properly configured. In this video the protected resource is \nhttps://sp.gluu.org/protected/print.py\n. When we try to access the page SSO is initiated and we are redirected to the SAML Proxy discovery page on \nhttps://test.gluu.org\n. From there we select \nNest\n as our desired authentication server and get directed to \nhttps://nest.gluu.org/oxAuth/login\n. After logging in we are redirected and able to access to the protected resource. \n\n\n\n\nYoutube Video Link",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/saml/#saml",
            "text": "",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/saml/#overview",
            "text": "SAML is an XML-based, open-standard data format for exchanging \nauthentication and authorization data between an identity provider \n(like the Gluu Server) and a service provider (like Dropbox, O365, etc.). \nSAML is a stable and mature standard, and is well supported at many of the \nInternet's largest domains. However, the last major release of SAML was in 2005! \nTherefore it is important to understand when to use SAML and when to use a \nnewer protocol like OpenID Connect to achieve your identity goals.   Refer to these four considerations to determine which protocol \nto use for single sign-on (SSO):   If you have an application that already supports SAML, use SAML.  If you need to support user login at an external IDP (like a customer or partner IDP), use SAML.  If you have a mobile application, use OpenID Connect.  If you are writing a new application, use OpenID Connect.   If you are continuing with the SAML documentation it is presumed your use case aligns with one or both of the first two bullet points above. If not, we recommend that you review the  OpenID Connect  portion of the Gluu Server docs.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/saml/#outbound-vs-inbound-saml",
            "text": "There are two main SAML authentication workflows: outbound SAML and inbound SAML. \nOutbound SAML can also be called SP-initiated Single Sign-On (SSO) or traditional SAML. \nIn an outbound SAML transaction a website or application (SP) redirects a user to a \ndesignated Identity Provider (IDP) for authentication and authorization. \nThe IDP asks for the user's credentials and upon successful authentication redirects the user to the protected content.   Inbound SAML enables an organization to offer SAML authentication as a front door to their digital service. Inbound SAML is a common requirement for SaaS providers who need to support the authentication requirements of large enterprise customers.  The Gluu Server bundles separate components to support both workflows (installation of each component is optional during Gluu Server deployment):    For outbound SAML, the Gluu Server bundles the  Shibboleth SAML IDP .     For inbound SAML, the Gluu Server bundles the  Asimba SAML Proxy .     Documentation for each service follows in the sections below.",
            "title": "Outbound vs. Inbound SAML"
        },
        {
            "location": "/admin-guide/saml/#outbound-saml-shibboleth",
            "text": "Outbound SAML can also be called SP-initiated Single Sign-On (SSO) \nor traditional SAML. In an outbound SAML transaction a website or application (SP) \nredirects a user to a designated Identity Provider (IDP) for authentication \nand authorization. The IDP will ask for the user's credentials and upon successful \nauthentication, the user is sent back to the SP logged in.   In order for this transaction to happen successfully there must be pre-established \ntrust between the IDP and the SP. In the Gluu Server, the IDPs SSO configuration is \ncalled a Trust Relationship (TR). The following sections cover how to create a TR in the Gluu Server.    Note  For any outbound SAML transaction, a trust relationship must be created in the IDP.",
            "title": "Outbound SAML (Shibboleth)"
        },
        {
            "location": "/admin-guide/saml/#trust-relationship-requirements",
            "text": "Each Trust Relationship requires the infomation listed below.  Metadata of the SP       \nMetadata is an XML file which has configuration data used to establish trust between the website (SP) and IDP (Gluu Server). Websites (SP) can provide metadata via a URL or as a separate file. Metadata can change, so a static URL typically requires the least amount of ongoing maintenance.   Metadata of the Gluu Server       \nThe Gluu Server's SAML metadata may be needed from time to time. It can be found at  https://hostname/idp/shibboleth .  Required Attributes      \nEach SP may require one or many attributes in order to grant a user access. \nRequired attributes vary depending on the application, and should be \nexplicitly listed in the application's documentation. The Gluu Server ships with \ncertain preconfigured attributes and also supports the creation of custom attributes. \nOnce the attributes are available in the Gluu Server, the administrator only needs \nto click on the desired attribute(s) and it will be released to the SP upon \nsuccessful user authentication.",
            "title": "Trust Relationship Requirements"
        },
        {
            "location": "/admin-guide/saml/#saml-attributes",
            "text": "",
            "title": "SAML Attributes"
        },
        {
            "location": "/admin-guide/saml/#attrubute-in-oxtrust",
            "text": "An  Active  attribute list can be seen from the Configuration > Attributes section.   The Gluu Server has a large LDAP tree which includes all standard\nattributes. It is not necessary for all of them to be  Active . The\nactive LDAP trees can be sorted using the  Show only Active Attributes \nlink.   The Gluu Server administrator can make changes, such as changing the\nstatus to active/inactive, to an attribute after clicking on it.   Additional custom attributes can be added in below way   Add custom attribute to /opt/gluu/schema/openldap/custom.schema   In this below example 'customTest' is our custom attribute :    attributetype ( oxAttribute:1003 NAME 'customTest'\n        SUBSTR caseIgnoreSubstringsMatch EQUALITY caseIgnoreMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.15        \n       X-ORIGIN 'Gluu - custom person attribute' )   Add custom attribute to gluuCustomPerson objectClass  Example:    objectclass ( oxObjectClass:101 NAME 'gluuCustomPerson' SUP top AUXILIARY MAY (customTest) X-ORIGIN 'Gluu - Custom person objectclass' )   Stop LDAP server with command  service solserver stop  Create custom configuration holder with  mkdir -p /opt/symas/etc/openldap/slapd.d  Test custom configuration with  /opt/symas/bin/slaptest -f /opt/symas/etc/openldap/slapd.conf -F /opt/symas/etc/openldap/slapd.d  Start LDAP server with command  service solserver start   Register new attribute with Gluu Server GUI, oxTrust, by\nclicking the  Register Attribute  button. Then, the following screen will\nappear:     Name:  This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.    SAML1 URI:  This field contains the SAML1 uri for the custom attribute.    SAML2 URI:  This field contains the SAML2 uri for the custom attribute.    Display Name:  This display name can be anything that is human readable.    Type:  The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:   Text  Numeric  Photo   Date    Edit Type:  This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).    View Type:  This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.    Privacy Level:  Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.    Multivalued:  Please select multivalue in this field if the attribute\n  contains more than one value.    SCIM Attributes:  If the attribute is a part of SCIM architecture select true.    Description:  This contains a few words to describe the attribute.    Status:  The status, when selected active, will release and publish\n  the attribute in IdP.",
            "title": "Attrubute in oxTrust"
        },
        {
            "location": "/admin-guide/saml/#custom-nameid",
            "text": "Gluu Server comes with the  transientID  attribute which is the default  NameID .\nIf there are other  NameID  requirements, it is possible to create them as well.\nThe custom attribute must be created in oxTrust first before defining it as the  NameID .\nPlease see the  oxTrust custom attribute guide  to create the custom attribute in oxTrust.",
            "title": "Custom NameID"
        },
        {
            "location": "/admin-guide/saml/#defining-nameid",
            "text": "The template file for  NameID  definitions are located in the  attribute-resolver.xml.vm  file under  /opt/gluu/jetty/identity/conf/shibboleth3/idp/ .\n  The example below adds  testcustomattribute  as  NameID  based on UID attribute. The following are put into the  attribute-resolver.xml.vm  file.   Add declaration for the new attribute\n   if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('testcustomattribute') ) )  Add definition for the new attribute    <resolver:AttributeDefinition id=\"testcustomattribute\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"uid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition>    Restart identity service using below command   service identity restart    However it is recommended to stop and start service using   service identity stop  service identity start",
            "title": "Defining NameID"
        },
        {
            "location": "/admin-guide/saml/#create-a-trust-relationship-in-the-gluu-server",
            "text": "Go to  SAML  >  Trust Relationships  Click on  Add Trust Relationship  A new page will appear where you can provide all the required information to create a Trust\n  Relationship(TR).     Display Name : Name of the Trust Relationship (it should be unique for every trust relationship)       Description : Little description. Purpose and SSO link can be added here.       Metadata Type : There are four available options to choose from. The correct Type depends on how the SP is delivering Metadata to your IDP.         File : Choose File if the SP has provided an uploadable metadata document in XML format.  URI : Chose URI if the SP metadata is hosted on a URI that is accessible from the Internet.  Generate : Choose Generate if the SP is an \"inhouse application\" or the \u201cShibboleth SP\u201d is going to be installed in the target application (SP). This option will generate a how-to guide for installing the Shibboleth SP. If you plan on using the Generate method, please note the following:         \n        *  URL  : This is the hostname of the SP.    \n        *  Public certificate  : You must provide the certificate, which is a Base64 encoded ASCII file, and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate  can not  be password protected.              \n        * After creating the Trust Relationship, download the generated configuration files from the  Download Shibboleth2 configuration files  link and place these configuration files inside your SP configuration.           Federation : Choose this option if the target application (SP) is affiliated with a federation service (e.g. InCommon, NJEdge etc.). Once you select \u201cFederation\u201d as the Metadata Type, another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu you can select the appropriate federation. After selecting the \u201cFederation Name\u201d, a new link called \u201cClick to select\nentity id\u201d will appear. Use this link to find and select the SP entityIDs that you wish to create SSO with. Learn how to establish trust with a federation  below .          Released : The SPs required attributes must be added to this panel. The required attributes can be selected from the menu on the left with the heading \u201cRelease Additional Attributes\u201d.         The Trust Relationship(TR) is added by clicking the  Add  button located in the lower left side of the page.",
            "title": "Create a Trust Relationship in the Gluu Server"
        },
        {
            "location": "/admin-guide/saml/#relying-party-configuration",
            "text": "If the target application does not already support SAML, the Relying Party software must be configured. The relying party configuration is accessible on the TR Creation page. The checkbox  Configure specific Relying Party  must be checked.              The checkbox will result in a link which can be accessed to find information about configuring the relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.               Note  If the target application does not already support a federation standard like SAML, and you or the developer are planning on adding federation to the application, we strongly recommend using OpenID Connect rather than SAML. OpenID Connect is newer, easier to use, and follows modern best practices. Learn more in our blog:  OAuth vs. SAML vs. OpenID Connect .",
            "title": "Relying Party Configuration"
        },
        {
            "location": "/admin-guide/saml/#federation-configuration",
            "text": "If the SP is part of an identity federation such as InCommon, the administrator must add the federation as an SP in the Gluu Server. This will enable the administrator to more easily create TRs with SPs in the federation. The example below shows how an administrator would add a TR for the InCommon Federation.   Once a TR has been established with the federation, the Gluu Server administrator can easily create TRs with any SP included in the federation by selecting the federation from the  Federation Name  drop down menu and selecting the entity-id for the SP.",
            "title": "Federation Configuration"
        },
        {
            "location": "/admin-guide/saml/#inbound-saml-asimba",
            "text": "Inbound SAML allows users from external domains to login at their home identity provider to gain access to resources protected by the Gluu Server. The Gluu Server uses an open source product called  Asimba  to normalize inbound SAML.   The following documentation provides a step-by-step guide for configuring Asimba with two (2) IDPs and a single (1) SP. The guide includes use of a SAML interception script which is shipped with the Gluu Server and simplifies the process of using Asimba. The administrator can add multiple IDPs or SPs (as required) using the method outlined below. Each SP and IDP must be connected to the IDP that has the Asimba module enabled.   Note  A description of the SAML interception script is available  here .",
            "title": "Inbound SAML (Asimba)"
        },
        {
            "location": "/admin-guide/saml/#required-setup",
            "text": "Setup hostname  Description      https://sp.gluu.org/protected/print.py  This is a shibboleth SP connected to  https://test.gluu.org    https://test.gluu.org  This is a Gluu Server with Asimba installed    https://nest.gluu.org  This is a second Gluu Server with Shibboleth installed that is connected to  https://test.gluu.org     The Gluu Server with hostname  https://test.gluu.org  must include Asimba. The Gluu Server with hostname  https://nest.gluu.org  must include Shibboleth. This is done by entering  yes  to the respective options while running the  setup script prompt  during installation.",
            "title": "Required Setup"
        },
        {
            "location": "/admin-guide/saml/#add-custom-script",
            "text": "Login to the Gluu Server with hostname  https://test.gluu.org  and add the SAML script:    Log into the oxTrust interface as  admin  Navigate to  Configuration  >  Manage Custom Scripts  In the  Person Authentication  tab Select/Add  saml  script      Name: asimba  Description: Inbound Saml via Asimba Authentication module  Programming Language: Python  Level: 50  Location Type: LDAP  Usage Type: Web  Custom property (key/value)  asimba_saml_certificate_file: /etc/certs/saml/pem  asimba_entity_id: {gluu ce url}/saml eg; https://gluu-ubuntu.workgroup.com/saml  saml_deployment_type: enroll  saml_idp_sso_target_url:  https://test.gluu.org/asimba/profiles/saml2/sso/web  saml_validate_response: false  asimba_entity_id:  https://test.gluu.org/saml  asimba_saml_certificate_file:  /etc/certs/saml.pem  note: Deployer need to copy 'asimba.crt' in 'saml.pem' without the 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag.     user_object_classes:  eduPerson  saml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] }   example:  {\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }    enforce_uniqueness_attr_list:  attribute1 ,  attribute2  example:  edupersonprincipalname, uid, mail, givenName    saml_use_authn_context: false  saml_generate_name_id: true  Script: Please copy the  SAML Script  from Github.   Enabled: True",
            "title": "Add Custom Script"
        },
        {
            "location": "/admin-guide/saml/#add-external-idp",
            "text": "Login to the Gluu Server with hostname  https://test.gluu.org  and add the external IDP:    Log into the oxTrust interface  Navigate to  SAML  >  IDP  Click  Add IDP          Fill in the form with the following information:    ID: The entityID of the remote ID/ADFS    Example:  https:nest.gluu.org/idp/shibboleth        Friendly Name: Provide a human-readable name, like an organization or site name.    Metadata URL: Leave this field blank, we will upload metadata    Metadata Timeout: Leave this field as is.     Metadata File: Download the remote IDPs metadata and upload that XML file.    Example: The metadata for a Gluu IDP can be downloaded using  wget -c https:<hostname_of_gluu_server>/idp/shibboleth     Trust Certificate File: Get the SAML cert from the remote IDP and upload that x509 certificate   Example: You can get a Gluu Server's SAML certificate in the metadata or in  /etc/certs/shibIDP.crt     NameIDFormat: If the remote IDP is a Gluu Server use SAML2 URI nameID format. If not ask for the nameID format.   Example:  urn:oasis:names:tc:SAML:2.0:nameid-format:transient     Enabled: Yes    Send Scoping: Yes    AllowCreate: Yes    Disable SSO for IDP: No    ACS index: Yes    Send NameIDPolicy: Yes    Avoid Subject Confirmations: No",
            "title": "Add External IDP"
        },
        {
            "location": "/admin-guide/saml/#add-sp-requestor",
            "text": "Login to the Gluu Server with hostname  https://test.gluu.org  and add the SP Requestor:    Log into oxTrust interface  Navigate to  SAML  >  SP Requestor  Click  Add SP Requestor   Fill in the form with the information below:  Select parent SP Pool: requestorpool.1  ID: https://test.gluu.org/saml  Friendly Name: oxAuth SAML  Metadata URL: Not required  Metadata Timeout: -1  Metadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata.   Trust Certificate File: Not required  Properties: Not required  Enabled: Yes  Signing: No  metadata snippet:      <md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor>",
            "title": "Add SP Requestor"
        },
        {
            "location": "/admin-guide/saml/#add-trust-relationship",
            "text": "Login to the Gluu Server with hostname  https://nest.gluu.org  and create a Trust Relationship for all SPs which are included in the SAML Proxy SSO workflow. Documentation for creating a Trust Relationship is available in  Section 2.1 .   In our test setup we have created a Trust Relationship for one remote SP with the entityID  https://sp.gluu.org/shibboleth .   The Asimba metadata can be retrieved and downloaded from  https://test.gluu.org/asimba/profiles/saml2  While creating the Trust Relationship, choose  File  as the  Metadata Type  and upload the Asumba metadata.   Relying Party Configuration:  SAML2SSO  Profile      - example: \n    - includeAttributeStatement: Yes\n    - assertionLifeTime: 300000\n    - assertionProxyCount: 0\n    - signResponses: conditional\n    - signAssertions: never`\n    - signRequests: conditional\n    - encryptAssertions: never\n    - encryptNameIds: never   Attribute: Any attribute Service Providers require. Any kind of nameID from below list is mandatory.   nameID:   nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"  nameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"  nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"    How to create nameID in Gluu Server is available  here",
            "title": "Add Trust Relationship"
        },
        {
            "location": "/admin-guide/saml/#test-sso",
            "text": "Here is a  quick video  to demonstrate how SSO should look with everything properly configured. In this video the protected resource is  https://sp.gluu.org/protected/print.py . When we try to access the page SSO is initiated and we are redirected to the SAML Proxy discovery page on  https://test.gluu.org . From there we select  Nest  as our desired authentication server and get directed to  https://nest.gluu.org/oxAuth/login . After logging in we are redirected and able to access to the protected resource.    Youtube Video Link",
            "title": "Test SSO"
        },
        {
            "location": "/admin-guide/openid-connect/",
            "text": "OpenID Connect\n#\n\n\nOverview\n#\n\n\nOpenID Connect is an identity layer that profiles and extends OAuth 2.0. \nIt defines a sign-in flow that enables an application (client) to \nauthenticate a person, and to obtain authorization to obtain \ninformation (or \"claims\") about that person. For more information, \nsee \nhttp://openid.net/connect\n\n\nIt's handy to know some OpenID Connect jargon:\n\n\n\n\n\n\nThe \nend user\n or \nsubject\n is the person being authenticated.\n\n\n\n\n\n\nThe \nOpenID Provider\n or \nOP\n is the equivalent of the SAML IDP. It \nholds the credentials (like a username/ password) and information about \nthe subject. The Gluu Server is an OP.\n\n\n\n\n\n\nThe \nRelying Party\n or  \nRP\n is software, like a mobile application \nor website, which needs to authenticate the subject. The RP is an OAuth \nclient. \noxd\n is an RP.\n\n\n\n\n\n\nFor a good overview of OpenID Connect versus SAML, you should read\n\nthis blog\n. \n\n\nOpenID Connect in the Gluu Server\n#\n\n\nThe Gluu Server passes all \nOpenID Provider conformance profiles\n. \nIt supports the all the current specifications: Core, Dynamic Client \nRegistration, Discovery, Form Post Response Mode, Session Management, \nand the draft for Front Channel Logout.\n\n\nOpenID Connect Flows\n#\n\n\nThe Gluu Server supports all flows defined in the Core spec, including\nimplicit, code, and hybrid. The implicit flow, where the token and\nid_token are returned from the authorization endpoint, should only \nbe used for applications that run in the browser, like a Javascript \nclient. The code flow or hybrid flow should be used for server side\napplications, where code on the web server can more securely call\nthe token endpoint to obtain a token. The most useful response type \nfor the hybrid flow is \"code id_token\". Using this flow, you can verify\nthe integrity of the code by inspecting the \nc_hash\n claim in the \nid_token.\n\n\nIf you are using the code flow, the response type should only be code.\nThere is no point in using response type \"code token id_token\"--the extra\ntokens returned by the authorization endpoint will only create additional\ncalls to the LDAP server and slow you down. If you are going to trade\nthe code at the token endpoint for a new token and id_token, you don't\nneed them from the authorization endpoint too.\n\n\nConfiguration / Discovery\n#\n\n\nA good place to start when you're learning about OpenID Connect is\nthe configuration endpoint, which is located in the Gluu Server\nat the following URL: \nhttps://hostname/.well-known/openid-configuration\n\nThe Gluu Server also supports \nWebFinger\n,\nas specified in the OpenID Connect specification. You can test Webfinger\nusing the oxAuth-RP tool mentioned above. For more information, see \nthe [OpenID Connect Discovery Specification]\n(http://openid.net/specs/openid-connect-discovery-1_0.html)\n\n\nClient Registration / Configuration\n#\n\n\nOAuth clients need a client_id, and need to supply a login redirect uri--\nwhere the Authorization Server should redirect the end user to, post\nauthorization. The Gluu Server enables an administrator to manually create\na client via the oxTrust web interface. However, OpenID Connect also\ndefines a standard API where clients can register themselves--\n[Dynamic Client Registration]\n(http://openid.net/specs/openid-connect-registration-1_0.html). You can\nfind the registration URL by calling the configuration endpoint \n(\n/.well-known/openid-configuration\n).        \n\n\nYou may not want clients to dynamically register themselves! To disable\nthis endpoint, in the oxAuth JSON properties, set the \n\ndynamicRegistrationEnabled\n value to False.                 \n\n\nIf you want to add a client through oxTrust, you can use the manual form:\nby click the \nAdd Client\n button.            \n\n\n\n\nThere are many client configuration parameters. Most of these are \nspecified in the OpenID Connect [Dynamic Client Registration]\n(http://openid.net/specs/openid-connect-registration-1_0.html)specification.\nThere are two configurations params which can only be configured via \noxTrust by an administrator. These include:\n\n\n\n\n\n\nPre-Authorization -- Use this if you want to suppress the end user\n authorization prompt. This is handy for SSO scenarios where the clients\n are your own (not third party), and there is no need to prompt the \n person to approve the release of information.      \n\n\n\n\n\n\nPersist Client Authorizations -- Use this option if you only want \n to prompt the end user once to authorize the release of user \n information. It will cause the data to be persisted under the person's\n entry in the Gluu LDAP server.                \n\n\n\n\n\n\nCustom Client Registration\n#\n\n\nUsing the Client Registration custom interception scripts,\nyou can implement post-registration business logic. You have access to \nthe data that the client used to register. You could validate data, \npopulate extra client claim, or modify the scope registrations. You\ncould even call API's to determine if you want to allow the \nregistration at all. To access the interface for custom scripts in \noxTrust, navigate to Configuration --> Custom Scripts --> Client Registration.\n\n\n           \n\n\nThe script is \navailable here\n                      \n\n\nLogout\n#\n\n\nThe OpenID Connect \nSession Management\n specification is still marked as draft, and new mechanisms for logout are in the works. The current specification requires JavaScript to detect that the session has been ended in the browser. It works... unless the tab with the JavaScript happens to be closed when the logout event happens on another tab. Also, inserting JavaScript into every page is not feasible for some applications. \n\n\nThe Gluu Server also support the draft for \nFront Channel Logout\n. This\nis our recommended logout strategy. Using this mechanism, an html page is rendered which contains one iFrame for each application that \nneeds to be notified of a logout. The Gluu Server keeps track of which clients are associated with a session (i.e. your browser). This \nmechanism is not perfect. If the end user's web browser is blocking third party cookies, it may break front channel logout. Also, the Gluu Server has no record if the logout is successful--only the browser knows. This means that if the logout fails, it will not be logged or retried. The good thing about front channel logout is that the application can clear application cookies in the end user's browser. To use front channel logout, the client should register logout_uri's, or \nfrontchannel_logout_uri\n for clients using the Dynamic Client Registration API. \n\n\nScopes\n#\n\n\nIn OAuth, scopes are used to specify extents of access. For a sign-in \nflow like OpenID Connect, scopes end up corresponding to the release of\nuser claims. The Gluu Server supports the \n\nstandard scopes\n defined \nin the OpenID Connect specification. You can also define your own scopes,\nand map them to any user attributes which you have registered. \n\n\nTo add Scope and Claims in OpenID Connect\n\n\n\n\n\n\nClick on \nConfiguration\n > \nOpenID Connect\n           \n\n\n\n\n\n\n\n\nClick on Add scope on the screen to the right          \n\n\n\n\n\n\n\n\nYou will presented the screen below to the enter the Scope Details                      \n\n\n\n\n\n\n\n\nTo add more claims, simply click \"Add Claim\" and you will be presented\nwith the following screen:                     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDisplay Name\n\n\nName of the scope which will be displayed when searched\n\n\n\n\n\n\nDescription\n\n\nText that will be displayed to the end user during approval of the scope\n\n\n\n\n\n\nScope Type\n\n\nOpenID, Dynamic or OAuth\n\n\n\n\n\n\nDefault Scope\n\n\nIf True, the scope may be requested during Dynamic Client Registration\n\n\n\n\n\n\n\n\nScope Type \"OpenID\" specifies to the Gluu Server that this scope will\nbe used to map user claims; \"Dynamic\" specifies to the Gluu Server that\nthe scope values will be generated from the result of the Dynamic Scopes \ncustom interception script; \"OAuth\" specifies that the scope will have\nno claims, it will be meaningful to an external resource server. \n\n\nSpecifying a scope as \"Default\" means that a client can request it \nduring dynamic client registration. The only default scope is \nopenid\n, \nwhich is required by the OpenID Connect specification. You can always \nexplicitly release a scope to a certain client later on, but this will \nrequire some manual intervention by the Gluu Server admin.\n\n\nMulti-Factor Authentication for Clients\n#\n\n\nThe \nacr_values\n parameter is used to specify a specific \nworkflow for authentication. The value of this parameter, or the \n\ndefault_acr_values\n client metadata value, corresponds to the \n\"Name\" of a custom authentication script.\n\n\nOut-of-the-box supported \nacr\n values include: \n\n\n\n\n\n\n\n\nACR Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nu2f\n\n\nFIDO U2F Device\n\n\n\n\n\n\nsuper_gluu\n\n\nMulti-factor authentication\n\n\n\n\n\n\nduo\n\n\nDuo soft-token authentication\n\n\n\n\n\n\ncert\n\n\nSmart card or web browser X509 personal certificates\n\n\n\n\n\n\ncas\n\n\nExternal CAS server\n\n\n\n\n\n\ncert\n\n\nSmart card or web browser X509 personal certificates\n\n\n\n\n\n\ngplus\n\n\nGoogle+ authentication\n\n\n\n\n\n\nOTP\n\n\nOATH one time password\n\n\n\n\n\n\nasimba\n\n\nUse of the Asimba proxy for inbound SAML\n\n\n\n\n\n\ntwilio_sms\n\n\nUse of the Twilio Saas to send SMS one time passwords\n\n\n\n\n\n\npassport\n\n\nUse of the Passport component for social login\n\n\n\n\n\n\nyubicloud\n\n\nYubico cloud OTP verification service\n\n\n\n\n\n\nuaf\n\n\nexperimental support for the FIDO UAF protocol\n\n\n\n\n\n\nbasic_lock\n\n\nEnables lockout after a certain number of failures\n\n\n\n\n\n\nbasic\n\n\nSample script using local LDAP authentication\n\n\n\n\n\n\n\n\nOpenID Connect Client Software\n#\n\n\nAlthough you can use generic OAuth client libraries, you would have \nto write some extra code to take advantage of OpenID Connect's \nsecurity features. For example, there is no id_token in OAuth, so you \nwon't find any code for id_token validation in an OAuth library. A good \nOpenID Connect client will do much of the heavy lifting for you. \n\n\nJavaScript Client\n#\n\n\nA JavaScript client is one of the easiest ways to use OpenID Connect. \nGluu maintains a project called \nOpenID Implicit Client\n.\n\n\nYou'll have to add the client manually to the Gluu Server via the GUI. \nWhen completing the \nadd client\n form, you can use the following \nconfiguration:\n\n\nClient Name: Implicit Test Client\nresponse_type: token id_token\nApplication Type: Web\nPre-Authorization: Enabled\nSubject Type: public\nScopes: openid, profile, email\nResponse Types: token id_token\nGrant Types: implicit\n\n\n\n\nOnce you have registered the client in the Gluu Server, all you need to \ndo is update the \nclient_id\n, \nredirect_uri\n, and \nproviderInfo\n values \nin the login page html. Assuming you've checked out the project into a \nweb accessible folder, then navigate to the page and test! \n\n\nServer-Side libraries\n#\n\n\nMany applications are \"server-side\", meaning the web page displays \ncontent but most of the dynamic business logic resides on the web server. \nThe OpenID Foundation maintains a list of client libraries on \n\ntheir website\n. However, our \nexperience has been that the quality of these libraries varies widely. \nSome are not well documented, other are not updated frequently, and some \ndo not implement essential security features available in OpenID Connect. \nIn addition, if a wide array of client libraries are used it becomes \ndifficult to monitor and patch security vulnerabilities. For this reason, \nwe recommend that you use our OpenID Connect middleware software called \n\noxd\n.  \n\n\noxd is not open source, but it is very reasonably priced at $0.33 per \nday per server--or ~$10/month. The code is available on \n\nGitHub\n, and there are free \nopen source oxd libraries available for PHP, Java, Python, C#, Node, \nRuby, Perl and Go. There are also plugins available for several popular \nopen source applications.\n\n\nWatch the oxd demo\n.\n\n\nGet an oxd license for free\n\n\nWeb Server Plugins\n#\n\n\nA popular approach to protecting web applications is to use a web server \nfilter to intercept the request, and make sure the person using that \nconnection is authenticated and authorized. The web server with the filter \nmay directly serve the application, or may proxy to a backend service. \nLeveraging the web server is a well established pattern, used by older \naccess management platforms like CA Siteminder and Oracle Access Manager. \n\n\nOne of the advantages of the web server filter approach is that the \napplication developer does not need to know that much about the \nsecurity protocols--if the request makes it through to the application, \nthe person has been authenticated and the request is authorized. Another \nadvantage is that the application security is administered by the system \nadministrators, not by developers. For example, it may be easier to \nmanage and audit apache configuration than to read a bunch of code. \n\n\nOne of the best OpenID Connect relying party implementations was written \nby Hans Zandbelt, called \nmod_auth_openidc\n. It is an authentication and authorization module for the Apache 2.x HTTP server that authenticates users against an OpenID Connect Provider (OP). The software can be found on GitHub and is included in the package management system for several Linux distributions. There are binary packages available, and if you are good at compiling C code, you can build it yourself from the source. \n\n\nNote: if you are an Nginx fan, there is a similar \n\nLua implementation\n \nto make NGINX operate as an OpenID Connect RP or OAuth 2.0 RS. \n\n\nAppAuth for Mobile Applications\n#\n\n\nOne of the most compelling reasons to use Connect is to authenticate \npeople from a mobile application. The IETF draft \n\nOAuth 2.0 for Native Apps\n \nprovides an overview of an improved design for mobile security. In \naddition to the security features of OpenID Connect, this draft suggests \nthe use of a PKCE and custom URI schemes (i.e. an application can \nregister a URI such as myapp:// instead of https://).\n\n\nIn 2016, Google released and then donated code to the OpenID Foundation \ncalled AppAuth for \nAndroid\n \nand \niOS\n. The AppAuth projects \nalso include sample applications. Simulataneously, Google announced that \nit was deprecating the use of WebViews--a strategy used by mobile app \ndevelopers which is vulnerable to malicious application code. Not only \ndoes AppAuth provide secure authentication, it enables SSO across the \nsystem browser and mobile applications. It accomplishes this by \nleveraging new operating system features that enable the system browser \nto be called by an application in an opaque view that does not enable \nan app developer to steal a person's credentials, or other applications \nto steal codes or tokens. Using this approach, mobile app developers can \nuse the authorization code or hybrid flow (as described earlier). \n\n\nThe Gluu Server is the only free open source OpenID Connect Provider \nthat currently supports AppAuth. \n\n\noxAuth RP\n#\n\n\nThe Gluu Server ships with an optional OpenID Connect RP web application, \nwhich is handy for testing.  It's called oxauth-rp. During Gluu Server \nsetup, you'll be asked if you want to install it--which you should on \na development environment. It will be deployed on \nhttps://<hostname>/oxauth-rp\n. \nUsing this tool you can exercise all of the OpenID Connect API's, \nincluding discovery, client registration, authorization, token, \nuserinfo, and end_session.",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/openid-connect/#openid-connect",
            "text": "",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/openid-connect/#overview",
            "text": "OpenID Connect is an identity layer that profiles and extends OAuth 2.0. \nIt defines a sign-in flow that enables an application (client) to \nauthenticate a person, and to obtain authorization to obtain \ninformation (or \"claims\") about that person. For more information, \nsee  http://openid.net/connect  It's handy to know some OpenID Connect jargon:    The  end user  or  subject  is the person being authenticated.    The  OpenID Provider  or  OP  is the equivalent of the SAML IDP. It \nholds the credentials (like a username/ password) and information about \nthe subject. The Gluu Server is an OP.    The  Relying Party  or   RP  is software, like a mobile application \nor website, which needs to authenticate the subject. The RP is an OAuth \nclient.  oxd  is an RP.    For a good overview of OpenID Connect versus SAML, you should read this blog .",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/openid-connect/#openid-connect-in-the-gluu-server",
            "text": "The Gluu Server passes all  OpenID Provider conformance profiles . \nIt supports the all the current specifications: Core, Dynamic Client \nRegistration, Discovery, Form Post Response Mode, Session Management, \nand the draft for Front Channel Logout.",
            "title": "OpenID Connect in the Gluu Server"
        },
        {
            "location": "/admin-guide/openid-connect/#openid-connect-flows",
            "text": "The Gluu Server supports all flows defined in the Core spec, including\nimplicit, code, and hybrid. The implicit flow, where the token and\nid_token are returned from the authorization endpoint, should only \nbe used for applications that run in the browser, like a Javascript \nclient. The code flow or hybrid flow should be used for server side\napplications, where code on the web server can more securely call\nthe token endpoint to obtain a token. The most useful response type \nfor the hybrid flow is \"code id_token\". Using this flow, you can verify\nthe integrity of the code by inspecting the  c_hash  claim in the \nid_token.  If you are using the code flow, the response type should only be code.\nThere is no point in using response type \"code token id_token\"--the extra\ntokens returned by the authorization endpoint will only create additional\ncalls to the LDAP server and slow you down. If you are going to trade\nthe code at the token endpoint for a new token and id_token, you don't\nneed them from the authorization endpoint too.",
            "title": "OpenID Connect Flows"
        },
        {
            "location": "/admin-guide/openid-connect/#configuration-discovery",
            "text": "A good place to start when you're learning about OpenID Connect is\nthe configuration endpoint, which is located in the Gluu Server\nat the following URL:  https://hostname/.well-known/openid-configuration \nThe Gluu Server also supports  WebFinger ,\nas specified in the OpenID Connect specification. You can test Webfinger\nusing the oxAuth-RP tool mentioned above. For more information, see \nthe [OpenID Connect Discovery Specification]\n(http://openid.net/specs/openid-connect-discovery-1_0.html)",
            "title": "Configuration / Discovery"
        },
        {
            "location": "/admin-guide/openid-connect/#client-registration-configuration",
            "text": "OAuth clients need a client_id, and need to supply a login redirect uri--\nwhere the Authorization Server should redirect the end user to, post\nauthorization. The Gluu Server enables an administrator to manually create\na client via the oxTrust web interface. However, OpenID Connect also\ndefines a standard API where clients can register themselves--\n[Dynamic Client Registration]\n(http://openid.net/specs/openid-connect-registration-1_0.html). You can\nfind the registration URL by calling the configuration endpoint \n( /.well-known/openid-configuration ).          You may not want clients to dynamically register themselves! To disable\nthis endpoint, in the oxAuth JSON properties, set the  dynamicRegistrationEnabled  value to False.                   If you want to add a client through oxTrust, you can use the manual form:\nby click the  Add Client  button.               There are many client configuration parameters. Most of these are \nspecified in the OpenID Connect [Dynamic Client Registration]\n(http://openid.net/specs/openid-connect-registration-1_0.html)specification.\nThere are two configurations params which can only be configured via \noxTrust by an administrator. These include:    Pre-Authorization -- Use this if you want to suppress the end user\n authorization prompt. This is handy for SSO scenarios where the clients\n are your own (not third party), and there is no need to prompt the \n person to approve the release of information.          Persist Client Authorizations -- Use this option if you only want \n to prompt the end user once to authorize the release of user \n information. It will cause the data to be persisted under the person's\n entry in the Gluu LDAP server.",
            "title": "Client Registration / Configuration"
        },
        {
            "location": "/admin-guide/openid-connect/#custom-client-registration",
            "text": "Using the Client Registration custom interception scripts,\nyou can implement post-registration business logic. You have access to \nthe data that the client used to register. You could validate data, \npopulate extra client claim, or modify the scope registrations. You\ncould even call API's to determine if you want to allow the \nregistration at all. To access the interface for custom scripts in \noxTrust, navigate to Configuration --> Custom Scripts --> Client Registration.               The script is  available here",
            "title": "Custom Client Registration"
        },
        {
            "location": "/admin-guide/openid-connect/#logout",
            "text": "The OpenID Connect  Session Management  specification is still marked as draft, and new mechanisms for logout are in the works. The current specification requires JavaScript to detect that the session has been ended in the browser. It works... unless the tab with the JavaScript happens to be closed when the logout event happens on another tab. Also, inserting JavaScript into every page is not feasible for some applications.   The Gluu Server also support the draft for  Front Channel Logout . This\nis our recommended logout strategy. Using this mechanism, an html page is rendered which contains one iFrame for each application that \nneeds to be notified of a logout. The Gluu Server keeps track of which clients are associated with a session (i.e. your browser). This \nmechanism is not perfect. If the end user's web browser is blocking third party cookies, it may break front channel logout. Also, the Gluu Server has no record if the logout is successful--only the browser knows. This means that if the logout fails, it will not be logged or retried. The good thing about front channel logout is that the application can clear application cookies in the end user's browser. To use front channel logout, the client should register logout_uri's, or  frontchannel_logout_uri  for clients using the Dynamic Client Registration API.",
            "title": "Logout"
        },
        {
            "location": "/admin-guide/openid-connect/#scopes",
            "text": "In OAuth, scopes are used to specify extents of access. For a sign-in \nflow like OpenID Connect, scopes end up corresponding to the release of\nuser claims. The Gluu Server supports the  standard scopes  defined \nin the OpenID Connect specification. You can also define your own scopes,\nand map them to any user attributes which you have registered.   To add Scope and Claims in OpenID Connect    Click on  Configuration  >  OpenID Connect                 Click on Add scope on the screen to the right               You will presented the screen below to the enter the Scope Details                           To add more claims, simply click \"Add Claim\" and you will be presented\nwith the following screen:                             Field  Description      Display Name  Name of the scope which will be displayed when searched    Description  Text that will be displayed to the end user during approval of the scope    Scope Type  OpenID, Dynamic or OAuth    Default Scope  If True, the scope may be requested during Dynamic Client Registration     Scope Type \"OpenID\" specifies to the Gluu Server that this scope will\nbe used to map user claims; \"Dynamic\" specifies to the Gluu Server that\nthe scope values will be generated from the result of the Dynamic Scopes \ncustom interception script; \"OAuth\" specifies that the scope will have\nno claims, it will be meaningful to an external resource server.   Specifying a scope as \"Default\" means that a client can request it \nduring dynamic client registration. The only default scope is  openid , \nwhich is required by the OpenID Connect specification. You can always \nexplicitly release a scope to a certain client later on, but this will \nrequire some manual intervention by the Gluu Server admin.",
            "title": "Scopes"
        },
        {
            "location": "/admin-guide/openid-connect/#multi-factor-authentication-for-clients",
            "text": "The  acr_values  parameter is used to specify a specific \nworkflow for authentication. The value of this parameter, or the  default_acr_values  client metadata value, corresponds to the \n\"Name\" of a custom authentication script.  Out-of-the-box supported  acr  values include:      ACR Value  Description      u2f  FIDO U2F Device    super_gluu  Multi-factor authentication    duo  Duo soft-token authentication    cert  Smart card or web browser X509 personal certificates    cas  External CAS server    cert  Smart card or web browser X509 personal certificates    gplus  Google+ authentication    OTP  OATH one time password    asimba  Use of the Asimba proxy for inbound SAML    twilio_sms  Use of the Twilio Saas to send SMS one time passwords    passport  Use of the Passport component for social login    yubicloud  Yubico cloud OTP verification service    uaf  experimental support for the FIDO UAF protocol    basic_lock  Enables lockout after a certain number of failures    basic  Sample script using local LDAP authentication",
            "title": "Multi-Factor Authentication for Clients"
        },
        {
            "location": "/admin-guide/openid-connect/#openid-connect-client-software",
            "text": "Although you can use generic OAuth client libraries, you would have \nto write some extra code to take advantage of OpenID Connect's \nsecurity features. For example, there is no id_token in OAuth, so you \nwon't find any code for id_token validation in an OAuth library. A good \nOpenID Connect client will do much of the heavy lifting for you.",
            "title": "OpenID Connect Client Software"
        },
        {
            "location": "/admin-guide/openid-connect/#javascript-client",
            "text": "A JavaScript client is one of the easiest ways to use OpenID Connect. \nGluu maintains a project called  OpenID Implicit Client .  You'll have to add the client manually to the Gluu Server via the GUI. \nWhen completing the  add client  form, you can use the following \nconfiguration:  Client Name: Implicit Test Client\nresponse_type: token id_token\nApplication Type: Web\nPre-Authorization: Enabled\nSubject Type: public\nScopes: openid, profile, email\nResponse Types: token id_token\nGrant Types: implicit  Once you have registered the client in the Gluu Server, all you need to \ndo is update the  client_id ,  redirect_uri , and  providerInfo  values \nin the login page html. Assuming you've checked out the project into a \nweb accessible folder, then navigate to the page and test!",
            "title": "JavaScript Client"
        },
        {
            "location": "/admin-guide/openid-connect/#server-side-libraries",
            "text": "Many applications are \"server-side\", meaning the web page displays \ncontent but most of the dynamic business logic resides on the web server. \nThe OpenID Foundation maintains a list of client libraries on  their website . However, our \nexperience has been that the quality of these libraries varies widely. \nSome are not well documented, other are not updated frequently, and some \ndo not implement essential security features available in OpenID Connect. \nIn addition, if a wide array of client libraries are used it becomes \ndifficult to monitor and patch security vulnerabilities. For this reason, \nwe recommend that you use our OpenID Connect middleware software called  oxd .    oxd is not open source, but it is very reasonably priced at $0.33 per \nday per server--or ~$10/month. The code is available on  GitHub , and there are free \nopen source oxd libraries available for PHP, Java, Python, C#, Node, \nRuby, Perl and Go. There are also plugins available for several popular \nopen source applications.  Watch the oxd demo .  Get an oxd license for free",
            "title": "Server-Side libraries"
        },
        {
            "location": "/admin-guide/openid-connect/#web-server-plugins",
            "text": "A popular approach to protecting web applications is to use a web server \nfilter to intercept the request, and make sure the person using that \nconnection is authenticated and authorized. The web server with the filter \nmay directly serve the application, or may proxy to a backend service. \nLeveraging the web server is a well established pattern, used by older \naccess management platforms like CA Siteminder and Oracle Access Manager.   One of the advantages of the web server filter approach is that the \napplication developer does not need to know that much about the \nsecurity protocols--if the request makes it through to the application, \nthe person has been authenticated and the request is authorized. Another \nadvantage is that the application security is administered by the system \nadministrators, not by developers. For example, it may be easier to \nmanage and audit apache configuration than to read a bunch of code.   One of the best OpenID Connect relying party implementations was written \nby Hans Zandbelt, called  mod_auth_openidc . It is an authentication and authorization module for the Apache 2.x HTTP server that authenticates users against an OpenID Connect Provider (OP). The software can be found on GitHub and is included in the package management system for several Linux distributions. There are binary packages available, and if you are good at compiling C code, you can build it yourself from the source.   Note: if you are an Nginx fan, there is a similar  Lua implementation  \nto make NGINX operate as an OpenID Connect RP or OAuth 2.0 RS.",
            "title": "Web Server Plugins"
        },
        {
            "location": "/admin-guide/openid-connect/#appauth-for-mobile-applications",
            "text": "One of the most compelling reasons to use Connect is to authenticate \npeople from a mobile application. The IETF draft  OAuth 2.0 for Native Apps  \nprovides an overview of an improved design for mobile security. In \naddition to the security features of OpenID Connect, this draft suggests \nthe use of a PKCE and custom URI schemes (i.e. an application can \nregister a URI such as myapp:// instead of https://).  In 2016, Google released and then donated code to the OpenID Foundation \ncalled AppAuth for  Android  \nand  iOS . The AppAuth projects \nalso include sample applications. Simulataneously, Google announced that \nit was deprecating the use of WebViews--a strategy used by mobile app \ndevelopers which is vulnerable to malicious application code. Not only \ndoes AppAuth provide secure authentication, it enables SSO across the \nsystem browser and mobile applications. It accomplishes this by \nleveraging new operating system features that enable the system browser \nto be called by an application in an opaque view that does not enable \nan app developer to steal a person's credentials, or other applications \nto steal codes or tokens. Using this approach, mobile app developers can \nuse the authorization code or hybrid flow (as described earlier).   The Gluu Server is the only free open source OpenID Connect Provider \nthat currently supports AppAuth.",
            "title": "AppAuth for Mobile Applications"
        },
        {
            "location": "/admin-guide/openid-connect/#oxauth-rp",
            "text": "The Gluu Server ships with an optional OpenID Connect RP web application, \nwhich is handy for testing.  It's called oxauth-rp. During Gluu Server \nsetup, you'll be asked if you want to install it--which you should on \na development environment. It will be deployed on  https://<hostname>/oxauth-rp . \nUsing this tool you can exercise all of the OpenID Connect API's, \nincluding discovery, client registration, authorization, token, \nuserinfo, and end_session.",
            "title": "oxAuth RP"
        },
        {
            "location": "/admin-guide/uma/",
            "text": "UMA\n#\n\n\nOverview\n#\n\n\nAs a profile of OAuth 2.0 that is complementary to OpenID Connect, UMA defines RESTful, JSON-based, standardized flows and constructs for coordinating the protection of any API or web resource in a way that will be familiar to any developer already acquainted with OAuth.\n\n\nUMA defines interfaces between authorization servers and resource servers that, by default, enable centralized policy decision-making for improved service delivery, auditing, policy administration, and accountability, even in a very loosely coupled \"public API\" environment. Custom profiles enable flexibility to move the decision-making line outward to distributed applications, to account for local preferences in API ecosystems. UMA does not standardize a policy expression language, enabling flexibility in policy expression and evaluation through XACML, other declarative policy languages, or procedural code as warranted by conditions. It also has a fluid way to handle federated authorization policy.\n\n\nUMA inherits authentication agnosticism from OAuth. It concentrates on authorization, not on authentication. \nIt has been profiled to work with OpenID Connect to gather identity claims from whoever is attempting access, \nand enables true claims-based authorization (with simple group- or role-based policies a natural subset). \nFor more on UMA-API in Gluu, see \nUMA-API\n. \nFor more about \nUMA\n\n\nResource Registration\n#\n\n\nThe resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:\n\n\n\n\nname\n\n\nscopes\n\n\ntype\n\n\nicon_uri\n\n\n\n\nThe resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:\n\n\n{\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}\n\n\n\n\n\n\nNote\n\n\nResource JSON may contain custom properties.\n\n\n\n\n\n\nThe search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the \nAdd Resource Set\n button. The following screenshot shows the page that will appear up on clicking the add resource button.\n\n\n\n\nThe properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.\n\n\n\n\n\n\nScopes\n#\n\n\nThe scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:\n\n\n\n\nname\n\n\nicon_uri\n\n\n\n\nAn example  of the scope JSON is given below:\n\n\n{\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}\n\n\n\n\n\n\nNote\n\n\nScope JSON may contain custom properties.\n\n\n\n\nThere are three (3) types of scopes in UMA:\n\n\n\n\ninternal\n: the scope is hosted within oxAuth in Gluu Server CE\n\n\nexternal\n: the scope is hosted in a different server\n\n\nexternal_auto\n: the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration\n\n\n\n\nThere is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format\n\n\nUMA URL=uma_scopes_endpoint+\"/\"+oxId;\n\n\n\n\nThe following is an example of an UMA URL:\n\n\nhttps://gluu.org/uma/scopes/view\n\n\n\n\n\n\nNote\n\n\nThe scope endpoint has to be present in UMA configuration to make it discoverable.\n\n\n\n\nThe \nldif\n for both external and internal scope is given below:\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\nAdd Scope\n#\n\n\nThis section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the \nScopes\n page under \nUMA\n from the oxTrust menu.\n\n\n\n\nThe search bar can be used to look for available scopes. New scopes are added by clicking on the \nAdd Scope Description\n button which will bring up the interface shown below.\n\n\n\n\nAdditionally there is an option to add authorization policy with the new scope.\n\n\nUMA Policies\n#\n\n\nUMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:\n\n\n\n\nscopes: policy protects resources by scopes\n\n\nauthorization script: script that is evaluated in order to grant/deny access\n\n\nname: a human readable name to the UMA policy\n\n\n\n\nThe following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed by navigating to \nConfiguration\n > \nCustom Scripts\n.\n\n\n\n\nUMA Policy Algorithm\n#\n\n\nThe UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.\n\n\n\n\n\n\nUMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn \ntrue\n in order to authorize access during RPT authorization.\n\n\n\n\n\n\nMultiple policies can protect a single scope. In such a case, all the policies must retun \ntrue\n to authorize access else aceess will be denied.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/uma/#uma",
            "text": "",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/uma/#overview",
            "text": "As a profile of OAuth 2.0 that is complementary to OpenID Connect, UMA defines RESTful, JSON-based, standardized flows and constructs for coordinating the protection of any API or web resource in a way that will be familiar to any developer already acquainted with OAuth.  UMA defines interfaces between authorization servers and resource servers that, by default, enable centralized policy decision-making for improved service delivery, auditing, policy administration, and accountability, even in a very loosely coupled \"public API\" environment. Custom profiles enable flexibility to move the decision-making line outward to distributed applications, to account for local preferences in API ecosystems. UMA does not standardize a policy expression language, enabling flexibility in policy expression and evaluation through XACML, other declarative policy languages, or procedural code as warranted by conditions. It also has a fluid way to handle federated authorization policy.  UMA inherits authentication agnosticism from OAuth. It concentrates on authorization, not on authentication. \nIt has been profiled to work with OpenID Connect to gather identity claims from whoever is attempting access, \nand enables true claims-based authorization (with simple group- or role-based policies a natural subset). \nFor more on UMA-API in Gluu, see  UMA-API . \nFor more about  UMA",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/uma/#resource-registration",
            "text": "The resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:   name  scopes  type  icon_uri   The resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:  {\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}   Note  Resource JSON may contain custom properties.    The search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the  Add Resource Set  button. The following screenshot shows the page that will appear up on clicking the add resource button.   The properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.",
            "title": "Resource Registration"
        },
        {
            "location": "/admin-guide/uma/#scopes",
            "text": "The scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:   name  icon_uri   An example  of the scope JSON is given below:  {\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}   Note  Scope JSON may contain custom properties.   There are three (3) types of scopes in UMA:   internal : the scope is hosted within oxAuth in Gluu Server CE  external : the scope is hosted in a different server  external_auto : the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration   There is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format  UMA URL=uma_scopes_endpoint+\"/\"+oxId;  The following is an example of an UMA URL:  https://gluu.org/uma/scopes/view   Note  The scope endpoint has to be present in UMA configuration to make it discoverable.   The  ldif  for both external and internal scope is given below:  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png",
            "title": "Scopes"
        },
        {
            "location": "/admin-guide/uma/#add-scope",
            "text": "This section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the  Scopes  page under  UMA  from the oxTrust menu.   The search bar can be used to look for available scopes. New scopes are added by clicking on the  Add Scope Description  button which will bring up the interface shown below.   Additionally there is an option to add authorization policy with the new scope.",
            "title": "Add Scope"
        },
        {
            "location": "/admin-guide/uma/#uma-policies",
            "text": "UMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:   scopes: policy protects resources by scopes  authorization script: script that is evaluated in order to grant/deny access  name: a human readable name to the UMA policy   The following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed by navigating to  Configuration  >  Custom Scripts .",
            "title": "UMA Policies"
        },
        {
            "location": "/admin-guide/uma/#uma-policy-algorithm",
            "text": "The UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.    UMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn  true  in order to authorize access during RPT authorization.    Multiple policies can protect a single scope. In such a case, all the policies must retun  true  to authorize access else aceess will be denied.",
            "title": "UMA Policy Algorithm"
        },
        {
            "location": "/admin-guide/scim-uma/",
            "text": "Overview\n#\n\n\nGluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout \n\nInstallation Guide\n for installation instructions.\n\n\nInstallation\n#\n\n\n\n\nInstall Gluu Server CE following the \nInstallation Guide\n and \nremember to install \nAsimba\n while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand \nthis template\n \nis used. \n\n\n\n\nNote:\n The JWKS for RS and RP clients are put into the \n./output/scim.ldif\n file ready for SCIM configuration.\nThe \nsetup.properties.file\n contains the RS and RP JWKS in Base64 format.\n\n\n\n\n\n\nUse the following command to extract OpenID SCIM RS and RP Client ID\n\ncat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"\n\n\n\n\n\n\nThe UMA SCIM client requires JWKS, so the setup script extracts the JWKS from \nsetup.properties.last\n and puts it into the \n./output/scim-rp.jks\n file.\n\n\n\n\n\n\nNOTE:\n For versions before v2.4.4, the JWKS is put in the \n./output/scim-rp-openid-keys.json\n file instead.\n\n\nConfiguration\n#\n\n\n\n\nEnable SCIM from Organization Configuration\n\n\n\n\n\n\n\n\noxTrust SCIM UMA configuration is automatically updated while running \nthe \nsetup.py\n and the correct values are setup \nin the \noxtrust-config.json\n file.\n\n\n\n\n  \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",\n\n\n\n\n\n\numaClientKeyId\n can be updated with the \nalias\n from \nscim-rp.jks\n file; if it is not updated, the first key from the file is used automatically.\n\n\n\n\nTesting SCIM UMA\n#\n\n\nThe following is a sample code that can be run to test the configured SCIM \nUMA Gluu CE. It uses \nSCIM-Client\n, \na Java library also developed by Gluu intended for client applications.\n\n\n\n\nIf you are using Maven, below is how to add SCIM-Client to your project:\n\n\n\n\n<repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>\n\n\n\n\n\n\n\n\nStarting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.\n\n\n\n\n\n\nAdd your domain's SSL certificate to the JRE's \ncacerts\n certificate key store where your client application will run. There are lots of articles around the Web on how to do this.\n\n\n\n\n\n\nSupply the UMA parameters and run the code. \nNOTE:\n If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with \ntarget\n or \ntmp\n folders possibly cleared beforehand to avoid conflicts.\n\n\n\n\n\n\n\npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}\n\n\n\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n#\n\n\nStarting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.\n\n\nTo enable test mode, do the following:\n\n\n\n\nLogin to the oxTrust GUI  \n\n\nNavigate to \nConfiguration\n > \nJSON Configuration\n > \nOxTrust Configuration\n, \nthen locate the property \nscimTestMode\n.\n\n\n\n\n\n\n\n\nSet it to \ntrue\n.\n\n\nclick the \nSave Configuration\n button. \nThe Gluu server will then create a long-lived OAuth2 access token with a \nvalidity period of one year. Doing this will also switch the authentication \nscheme from UMA to OAuth2 Access Token.\n\n\nClick on  \nJSON Configuration\n > \nOxTrust Configuration\n in the left navigation pane. \nThis will retrieve the access token and be displayed in the \nscimTestModeAccessToken\n property.\n\n\n\n\n\n\n\n\nIf the access token has expired, just repeat the previous steps to create a new one.\n\n\n\n\nThe access token can then be used as the query string \nparameter \naccess_token\n in accessing the SCIM 2.0 endpoints, for example:\n\n\n\n\nYou can verify the current authentication scheme of the SCIM 2.0 \nendpoints by browsing its \nServiceProviderConfig\n:\n\n\n\n\nTo exit test mode, just set \nscimTestMode\n back to \nfalse\n then \n* click the \nSave Configuration\n button. This will switch the \nauthentication scheme from OAuth2 Access Token to UMA. If you try using \nyour access token again, you will now get the \n403 Unauthorized\n error:\n\n\n\n\nNotes\n#\n\n\nUMA is protected with SCIM in Gluu Server Community Edition (CE). \nThe usage of UMA requires HTTP GET and HTTP POST requests. Before testing, \nthe Client making the requests must be added/registered in Gluu CE. The UMA \nconfiguration is available @ \nhttps://hostname/.well-known/uma-configuration\n. \nThe request to authorization endpoint must accompanied with  application/json content type. \n\n\nThe example below shows the parameters used in a real-life use case  where the \nUMA RPT Token is authorized in oxAuth.\n\n\n    public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);\n\n\n\n\nIf the default openID SCIM Client is not used, the \ninum\n must be added to the\nUMA Authorization Policy Custom Script.",
            "title": "SCIM protected by UMA"
        },
        {
            "location": "/admin-guide/scim-uma/#overview",
            "text": "Gluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout  Installation Guide  for installation instructions.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/scim-uma/#installation",
            "text": "Install Gluu Server CE following the  Installation Guide  and \nremember to install  Asimba  while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand  this template  \nis used.    Note:  The JWKS for RS and RP clients are put into the  ./output/scim.ldif  file ready for SCIM configuration.\nThe  setup.properties.file  contains the RS and RP JWKS in Base64 format.    Use the following command to extract OpenID SCIM RS and RP Client ID cat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"    The UMA SCIM client requires JWKS, so the setup script extracts the JWKS from  setup.properties.last  and puts it into the  ./output/scim-rp.jks  file.    NOTE:  For versions before v2.4.4, the JWKS is put in the  ./output/scim-rp-openid-keys.json  file instead.",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/scim-uma/#configuration",
            "text": "Enable SCIM from Organization Configuration     oxTrust SCIM UMA configuration is automatically updated while running \nthe  setup.py  and the correct values are setup \nin the  oxtrust-config.json  file.     \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",   umaClientKeyId  can be updated with the  alias  from  scim-rp.jks  file; if it is not updated, the first key from the file is used automatically.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/scim-uma/#testing-scim-uma",
            "text": "The following is a sample code that can be run to test the configured SCIM \nUMA Gluu CE. It uses  SCIM-Client , \na Java library also developed by Gluu intended for client applications.   If you are using Maven, below is how to add SCIM-Client to your project:   <repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>    Starting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.    Add your domain's SSL certificate to the JRE's  cacerts  certificate key store where your client application will run. There are lots of articles around the Web on how to do this.    Supply the UMA parameters and run the code.  NOTE:  If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with  target  or  tmp  folders possibly cleared beforehand to avoid conflicts.    \npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}",
            "title": "Testing SCIM UMA"
        },
        {
            "location": "/admin-guide/scim-uma/#scim-20-test-mode-v244",
            "text": "Starting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.  To enable test mode, do the following:   Login to the oxTrust GUI    Navigate to  Configuration  >  JSON Configuration  >  OxTrust Configuration , \nthen locate the property  scimTestMode .     Set it to  true .  click the  Save Configuration  button. \nThe Gluu server will then create a long-lived OAuth2 access token with a \nvalidity period of one year. Doing this will also switch the authentication \nscheme from UMA to OAuth2 Access Token.  Click on   JSON Configuration  >  OxTrust Configuration  in the left navigation pane. \nThis will retrieve the access token and be displayed in the  scimTestModeAccessToken  property.     If the access token has expired, just repeat the previous steps to create a new one.   The access token can then be used as the query string \nparameter  access_token  in accessing the SCIM 2.0 endpoints, for example:   You can verify the current authentication scheme of the SCIM 2.0 \nendpoints by browsing its  ServiceProviderConfig :   To exit test mode, just set  scimTestMode  back to  false  then \n* click the  Save Configuration  button. This will switch the \nauthentication scheme from OAuth2 Access Token to UMA. If you try using \nyour access token again, you will now get the  403 Unauthorized  error:",
            "title": "SCIM 2.0 Test Mode (v2.4.4+)"
        },
        {
            "location": "/admin-guide/scim-uma/#notes",
            "text": "UMA is protected with SCIM in Gluu Server Community Edition (CE). \nThe usage of UMA requires HTTP GET and HTTP POST requests. Before testing, \nthe Client making the requests must be added/registered in Gluu CE. The UMA \nconfiguration is available @  https://hostname/.well-known/uma-configuration . \nThe request to authorization endpoint must accompanied with  application/json content type.   The example below shows the parameters used in a real-life use case  where the \nUMA RPT Token is authorized in oxAuth.      public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);  If the default openID SCIM Client is not used, the  inum  must be added to the\nUMA Authorization Policy Custom Script.",
            "title": "Notes"
        },
        {
            "location": "/admin-guide/certificate/",
            "text": "Certificates\n#\n\n\nGluu Server components have cryptographic keys and X.509 certificates that are stored inside the\n\nchroot\n. The details of the certificates are given below according to each component. The certificates\nare available in the \n/etc/certs\n folder.\n\n\n\n\n\n\n\n\nASIMBA\n\n\nShibboleth\n\n\nAPACHE\n\n\nOPENLDAP\n\n\n\n\n\n\n\n\n\n\nasimba.crt\n\n\nshibIDP.crt\n\n\nhttpd.crt\n\n\nopenldap.crt\n\n\n\n\n\n\nasimba.csr\n\n\nshibIDP.csr\n\n\nhttps.csr\n\n\nopenldap.csr\n\n\n\n\n\n\nasimba.key\n\n\nshibIDP.jks\n\n\nhttpd.key\n\n\nopenldap.key\n\n\n\n\n\n\nasimba.key.orig\n\n\nshibIDP.key\n\n\nhttpd.key.orig\n\n\nopenldap.key.orig\n\n\n\n\n\n\nasimba.pkcs12\n\n\nshibIDP.key.orig\n\n\n\n\nopenldap.pem\n\n\n\n\n\n\nasimbaIDP.jks\n\n\nshibIDP.pkcs\n\n\n\n\n\n\n\n\n\n\n\n\nThe certificates for \nPassport\n authenticaiton are \npassport-rp.jks, passport-rp.pem, passport-rs.jks\n. The SCIM certificate is named \nscim-rs.jks\n and the OTP certificate is named \notp_configuration.json\n.\n\n\nAdditionally the following \njson\n files are avaibale which are used in different custom scripts for multi-factor authentication.\n\n\n\n\ncert_creds.json\n\n\nduo_creds.json\n\n\ngplus_client_secrets.json\n\n\notp_configuration.json\n\n\noxauth-keys.json\n\n\nsuper_gluu_creds.json\n\n\n\n\nUpdating Apache Certificate\n#\n\n\nThe certificates must be manually updated from the \n/etc/certs/\n folder. \n\n\nThere are many tools that can be used to update and renew certificates. By default Gluu uses OpenSSL. \nIf you have questions about using other tools, like Let'sEncrypt, \ncheck the \nGluu support portal\n for existing threads. \nIf there is no existing information, sign up and open a ticket. \n\n\n\n\nWarning\n\n\nThe private key cannot be password protected, and the public key must be base64 X.509. \n\n\n\n\n\n\nNote\n\n\nPlease backup your full \n/etc/certs\n directory and \ncacerts\n file under \n/etc/pki/java/\n folder before updating certificates.\n\n\n\n\nPlease follow these steps shown below to update the Apache SSL cert:\n\n\n\n\nSave the latest SSL httpd key and certificate in the \n/etc/certs\n folder\n\n\nRename them to \nhttpd.key\n and \nhttpd.crt\n respectively\n\n\nImport 'httpd.der' into the java keystore\n/ Convertion to DER, command:\n \nopenssl x509 -outform der -in httpd.crt -out httpd.der\n\n\nDelete the existing certificate to avoid replication and issues after importing the certificates\n   \nkeytool -delete -alias <hostname_of_your_Gluu_Server>_httpd -keystore cacerts\n\n\nImport certificate in to Java Keystore(cacerts):\n\n \nkeytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd\n\n\n\n\n\n\nRestart LDAP server, apache2/httpd and Identity Services.\n\n\n\n\nservice solserver stop\nservice apache2 stop\nservice identity stop\n:\nservice solserver start\nservice apache2 start\nservice identity start\n\n\n\n\nInstall Intermediate Certificates\n#\n\n\nPlease follow the steps below to install intermediate certificates:\n\n\n\n\nLog into your Gluu Server container.\n\n\nKeep your intermediate certificate in the file \n/etc/certs/\n.\n\n\nModify \n/etc/httpd/conf.d/https_gluu.conf\n, and add\n\n  \nSSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt\n.\n\n\nRestart the service of the httpd server.",
            "title": "Certificate Management"
        },
        {
            "location": "/admin-guide/certificate/#certificates",
            "text": "Gluu Server components have cryptographic keys and X.509 certificates that are stored inside the chroot . The details of the certificates are given below according to each component. The certificates\nare available in the  /etc/certs  folder.     ASIMBA  Shibboleth  APACHE  OPENLDAP      asimba.crt  shibIDP.crt  httpd.crt  openldap.crt    asimba.csr  shibIDP.csr  https.csr  openldap.csr    asimba.key  shibIDP.jks  httpd.key  openldap.key    asimba.key.orig  shibIDP.key  httpd.key.orig  openldap.key.orig    asimba.pkcs12  shibIDP.key.orig   openldap.pem    asimbaIDP.jks  shibIDP.pkcs       The certificates for  Passport  authenticaiton are  passport-rp.jks, passport-rp.pem, passport-rs.jks . The SCIM certificate is named  scim-rs.jks  and the OTP certificate is named  otp_configuration.json .  Additionally the following  json  files are avaibale which are used in different custom scripts for multi-factor authentication.   cert_creds.json  duo_creds.json  gplus_client_secrets.json  otp_configuration.json  oxauth-keys.json  super_gluu_creds.json",
            "title": "Certificates"
        },
        {
            "location": "/admin-guide/certificate/#updating-apache-certificate",
            "text": "The certificates must be manually updated from the  /etc/certs/  folder.   There are many tools that can be used to update and renew certificates. By default Gluu uses OpenSSL. \nIf you have questions about using other tools, like Let'sEncrypt, \ncheck the  Gluu support portal  for existing threads. \nIf there is no existing information, sign up and open a ticket.    Warning  The private key cannot be password protected, and the public key must be base64 X.509.     Note  Please backup your full  /etc/certs  directory and  cacerts  file under  /etc/pki/java/  folder before updating certificates.   Please follow these steps shown below to update the Apache SSL cert:   Save the latest SSL httpd key and certificate in the  /etc/certs  folder  Rename them to  httpd.key  and  httpd.crt  respectively  Import 'httpd.der' into the java keystore\n/ Convertion to DER, command:   openssl x509 -outform der -in httpd.crt -out httpd.der  Delete the existing certificate to avoid replication and issues after importing the certificates\n    keytool -delete -alias <hostname_of_your_Gluu_Server>_httpd -keystore cacerts  Import certificate in to Java Keystore(cacerts):   keytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd    Restart LDAP server, apache2/httpd and Identity Services.   service solserver stop\nservice apache2 stop\nservice identity stop\n:\nservice solserver start\nservice apache2 start\nservice identity start",
            "title": "Updating Apache Certificate"
        },
        {
            "location": "/admin-guide/certificate/#install-intermediate-certificates",
            "text": "Please follow the steps below to install intermediate certificates:   Log into your Gluu Server container.  Keep your intermediate certificate in the file  /etc/certs/ .  Modify  /etc/httpd/conf.d/https_gluu.conf , and add \n   SSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt .  Restart the service of the httpd server.",
            "title": "Install Intermediate Certificates"
        },
        {
            "location": "/integration/oauth2/",
            "text": "oxd\n#\n\n\nOverview\n#\n\n\nGluu offers commercial OAuth 2.0 client software called \noxd\n to make securing and integrating applications with the Gluu Server easier. \n\n\nIf you're using the Gluu Server as an OpenID Connect Provider (OP), your application can use any client software that implements the open standards the Gluu Server supports. However, you may want to consider using oxd because:\n\n\n\n\noxd is super-easy to use;      \n\n\nWe keep updating oxd to address the latest OAuth 2.0 security knowledge;      \n\n\nWe can provide more complete end-to-end support if we know both the client and server software;      \n\n\noxd subscriptions help support this project so you can see more enhancements faster;      \n\n\nThere are oxd libraries for Php, Python, Java, Node, Ruby, C#, .Net, Perl and Go. If your application is programmed in another language, oxd has a simple JSON/REST API;      \n\n\nThere are oxd plugins for many popular applications like: Wordpress, Drupal, Magento, OpenCart, SugarCRM, SuiteCRM, Roundcube, Shopify, and Kong. More are being added too. Next on the list are: MatterMost, RocketChat, NextCloud, and Liferay.    \n\n\n\n\nDocs\n#\n\n\noxd docs can be found at: \nhttps://oxd.gluu.org/docs\n.   \n\n\nLicense\n#\n\n\noxd is commercial software licensed by Gluu. Learn more on the \noxd website\n.",
            "title": "oxd OAuth2"
        },
        {
            "location": "/integration/oauth2/#oxd",
            "text": "",
            "title": "oxd"
        },
        {
            "location": "/integration/oauth2/#overview",
            "text": "Gluu offers commercial OAuth 2.0 client software called  oxd  to make securing and integrating applications with the Gluu Server easier.   If you're using the Gluu Server as an OpenID Connect Provider (OP), your application can use any client software that implements the open standards the Gluu Server supports. However, you may want to consider using oxd because:   oxd is super-easy to use;        We keep updating oxd to address the latest OAuth 2.0 security knowledge;        We can provide more complete end-to-end support if we know both the client and server software;        oxd subscriptions help support this project so you can see more enhancements faster;        There are oxd libraries for Php, Python, Java, Node, Ruby, C#, .Net, Perl and Go. If your application is programmed in another language, oxd has a simple JSON/REST API;        There are oxd plugins for many popular applications like: Wordpress, Drupal, Magento, OpenCart, SugarCRM, SuiteCRM, Roundcube, Shopify, and Kong. More are being added too. Next on the list are: MatterMost, RocketChat, NextCloud, and Liferay.",
            "title": "Overview"
        },
        {
            "location": "/integration/oauth2/#docs",
            "text": "oxd docs can be found at:  https://oxd.gluu.org/docs .",
            "title": "Docs"
        },
        {
            "location": "/integration/oauth2/#license",
            "text": "oxd is commercial software licensed by Gluu. Learn more on the  oxd website .",
            "title": "License"
        },
        {
            "location": "/integration/oauth-js-implicit/",
            "text": "openid-implicit-client\n#\n\n\nSimple Javascript client that implements the OpenID Connect implicit flow.\n\n\nThis code is forked based on a javascript library written by\n\nEdmund Jay\n, and referened in a\n\nblog\n\nby \nNat Sakimura\n\n\nTo use this library, include the \nopenidconnect.js\n your HTML page.\n\n\n\n\nSet the provider and client configuration info through JSON objects;\n\n\nCall the server \u2013 login;\n\n\nIn the callback page, callback.html, you will get ID Token back,\nso that you can put it into the cookie to handle the session.\n\n\n\n\n\n\nOIDC Variables\n#\n\n\nSupported Provider Options\n#\n\n\nList of the Identity Provider's configuration parameters. \n\n\n\n\nsupportedProviderOptions.issuer\n \n(string)\n: Issuer ID \n\n\nsupportedProviderOptions.authorization_endpoint\n \n(string)\n: Authorization Endpoint URL \n\n\nsupportedProviderOptions.jwks_uri\n \n(string)\n: JWKS URI \n\n\nsupportedProviderOptions.claims_parameter_supported\n \n(boolean)\n: Claims parameter support \n\n\nsupportedProviderOptions.request_parameter_supported\n \n(boolean)\n: Request parameter support \n\n\nsupportedProviderOptions.jwks\n \n(object)\n: Identity Provider's JWK Set \n\n\n\n\nSupported Request Options\n#\n\n\nSupported Login Request parameters. \n\n\n\n\nsupportedRequestOptions.scope\n \n(string)\n: Space separated scope values\n\n\nsupportedRequestOptions.response_type\n \n(string)\n: Space separated response_type values\n\n\nsupportedRequestOptions.display\n \n(string)\n: Display\n\n\nsupportedRequestOptions.max_age\n \n(string)\n: Max_age\n\n\nsupportedRequestOptions.claims\n \n(object)\n: Claims object containing what information to return in the UserInfo endpoint and ID Token\n\n\nsupportedRequestOptions.claims.id_token\n \n(array)\n: List of claims to return in the ID Token\n\n\nsupportedRequestOptions.claims.userinfo\n \n(array)\n: List of claims to return in the UserInfo endpoint\n\n\nsupportedRequestOptions.request\n \n(boolean)\n: Signed request object JWS. \nNot supported yet.\n\n\n\n\nSupported Client Options\n#\n\n\nList of supported Client configuration parameters. \n\n\n\n\nsupportedClientOptions.client_id\n \n(string)\n: The client's client_id \n\n\nsupportedClientOptions.redirect_uri\n \n(string)\n: The client's redirect_uri \n\n\n\n\nOIDC Methods\n#\n\n\nsetProviderInfo(p)\n#\n\n\n\n\np - The Identity Provider's configuration options described in \nOIDC.supportedProviderOptions\n \n\n\n\n\nSets the Identity Provider's configuration parameters. It may be done declaring each parameter on code or using the returning information from \nOIDC.discover('https:\n//(hostname)')\n. It returns a boolean value indicating status of call. \n\n\nExample:\n#\n\n\n// set Identity Provider configuration\nOIDC.setProviderInfo( {\n    issuer: 'https://(hostname)',\n    authorization_endpoint: 'http://(hostname)/auth.html',\n    jwks_uri: 'https://(hostname)/jwks'\n    });\n\n// set Identity Provider configuration using discovery information\nvar discovery = OIDC.discover('https://(hostname)');\nif(var)\n  OIDC.setProviderInfo(discovery);\n\n\n\nsetClientInfo(p)\n#\n\n\n\n\np - The Client's configuration options described in \nOIDC.supportedClientOptions\n \n\n\n\n\nSets the Client's configuration parameters. It returns a boolean value indicating status of call.\n\n\nExample:\n#\n\n\n// set client_id and redirect_uri\nOIDC.setClientInfo( {\n   client_id: 'myclientID',\n   redirect_uri: 'https://rp.example.com/callback.html'\n  }\n);\n\n\n\nstoreInfo(providerInfo, clientInfo)\n#\n\n\n\n\nproviderInfo - The Identity Provider's configuration options described in \nOIDC.supportedProviderOptions\n \n\n\nclientInfo - The Client's configuration options described in \nOIDC.supportedClientOptions\n \n\n\n\n\nStores the Identity Provider and Client configuration options in the browser session storage for reuse later.\n\n\nrestoreInfo()\n#\n\n\nLoad and set the Identity Provider and Client configuration options from the browser session storage.\n\n\ncheckRequiredInfo(params)\n#\n\n\n\n\nparams - List of Identity Provider and client configuration parameters\n \n\n\n\n\nCheck whether the required configuration parameters are set. It returns a boolean value indicating whether the options have been set.\n\n\nclearProviderInfo()\n#\n\n\nClears the Identity Provider configuration parameters.\n\n\nlogin(reqOptions)\n#\n\n\n\n\nreqOptions - Optional authentication request options (\nOIDC.supportedRequestOptions\n)\n \n\n\n\n\nRedirect to the Identity Provider for authentication.\n\n\nExample:\n#\n\n\n// login with options\nOIDC.login({\n   scope : 'openid profile',\n   response_type : 'token id_token',\n   max_age : 60,\n   claims : {\n      id_token : ['email', 'phone_number'],\n      userinfo : ['given_name', 'family_name']\n      }\n});\n\n// login with default\n// scope = openid and response_type = id_token\nOIDC.login();\n\n\n\nverifyIdTokenSig(id_token)\n#\n\n\n\n\nid_token - The ID Token string\n \n\n\n\n\nVerifies the ID Token signature using the JWK Keyset from jwks or jwks_uri of the Identity Provider Configuration options set via \nOIDC.setProviderInfo\n. Supports only RSA signatures. It returns a boolean value indicates whether the signature is valid or not.\n\n\nisValidIdToken(id_token)\n#\n\n\n\n\nid_token - The ID Token string\n \n\n\n\n\nValidates the information in the ID Token against configuration data in the Identity Provider and Client configuration set via \nOIDC.setProviderInfo\n and set via \nOIDC.setClientInfo\n. It returns a boolean value indicating the validity of the ID Token.\n\n\nrsaVerifyJWS(jws, jwk)\n#\n\n\n\n\njws - The JWS string\n \n\n\njwk - The JWK Key that will be used to verify the signature\n \n\n\n\n\nVerifies the JWS string using the JWK. It returns a boolean value indicating the validity of the JWS signature.\n\n\ngetValidIdToken()\n#\n\n\nReturn the ID Token string taken from the current page URL whose signature is verified and contents validated against the configuration data set via \nOIDC.setProviderInfo\n and \nOIDC.setClientInfo\n.\n\n\ngetAccessToken()\n#\n\n\nReturn Access Token string taken from the current page URL.\n\n\ngetCode()\n#\n\n\nReturn Authorization Code string taken from the current page URL.\n\n\ngetIdTokenParts(id_token)\n#\n\n\n\n\nid_token - The ID Token string\n \n\n\n\n\nSplits the ID Token string into the individual JWS parts. It returns an array of the JWS compact serialization components (header, payload, signature).\n\n\ngetIdTokenPayload(id_token)\n#\n\n\n\n\nid_token - The ID Token string\n \n\n\n\n\nReturn a JSON object with contents of the ID Token payload.\n\n\ngetJsonObject(jsonS)\n#\n\n\n\n\njsonS - JSON string\n \n\n\n\n\nReturn the JSON object from the JSON string.\n\n\nfetchJSON(url)\n#\n\n\n\n\nurl - URL to fetch the JSON file\n \n\n\n\n\nRetrieves the JSON file at the specified URL. The URL must have CORS enabled for this function to work. It returns a string of contents of the URL or null.\n\n\njwk_get_key(jwkIn, kty, use, kid)\n#\n\n\n\n\njwkIn - JWK Keyset string or object.\n \n\n\nkty - The 'kty' to match (RSA|EC). Only RSA is supported.\n \n\n\nuse - The 'use' to match (sig|enc).\n \n\n\nkid - The 'kid' to match\n \n\n\n\n\nRetrieve the JWK key that matches the input criteria. It returns an array of JWK keys that match the specified criteria.\n\n\ndiscover(issuer)\n#\n\n\n\n\nissuer - The Identity Provider's issuer_id\n \n\n\n\n\nPerforms discovery on the Identity Provider's issuer_id. It returns the JSON object of the discovery document or null.\n\n\ndebug(toggle, id_token)\n#\n\n\n\n\ntoggle - Boolean value that enables or disables debugging output\n \n\n\nid_token - The ID Token string\n \n\n\n\n\nPrint current Client's configuration options, Identity Provider's configuration options, results for verification and validation of id_token and its signature directly on console.\n\n\ngetUserInfo(access_token)\n#\n\n\n\n\naccess_token - Access Token string\n \n\n\n\n\nMake the call to UserInfo endpoint with access token. It returns the user claims sent by the Identity Provider.",
            "title": "OAuth2.0 js Implicit Flow"
        },
        {
            "location": "/integration/oauth-js-implicit/#openid-implicit-client",
            "text": "Simple Javascript client that implements the OpenID Connect implicit flow.  This code is forked based on a javascript library written by Edmund Jay , and referened in a blog \nby  Nat Sakimura  To use this library, include the  openidconnect.js  your HTML page.   Set the provider and client configuration info through JSON objects;  Call the server \u2013 login;  In the callback page, callback.html, you will get ID Token back,\nso that you can put it into the cookie to handle the session.",
            "title": "openid-implicit-client"
        },
        {
            "location": "/integration/oauth-js-implicit/#oidc-variables",
            "text": "",
            "title": "OIDC Variables"
        },
        {
            "location": "/integration/oauth-js-implicit/#supported-provider-options",
            "text": "List of the Identity Provider's configuration parameters.    supportedProviderOptions.issuer   (string) : Issuer ID   supportedProviderOptions.authorization_endpoint   (string) : Authorization Endpoint URL   supportedProviderOptions.jwks_uri   (string) : JWKS URI   supportedProviderOptions.claims_parameter_supported   (boolean) : Claims parameter support   supportedProviderOptions.request_parameter_supported   (boolean) : Request parameter support   supportedProviderOptions.jwks   (object) : Identity Provider's JWK Set",
            "title": "Supported Provider Options"
        },
        {
            "location": "/integration/oauth-js-implicit/#supported-request-options",
            "text": "Supported Login Request parameters.    supportedRequestOptions.scope   (string) : Space separated scope values  supportedRequestOptions.response_type   (string) : Space separated response_type values  supportedRequestOptions.display   (string) : Display  supportedRequestOptions.max_age   (string) : Max_age  supportedRequestOptions.claims   (object) : Claims object containing what information to return in the UserInfo endpoint and ID Token  supportedRequestOptions.claims.id_token   (array) : List of claims to return in the ID Token  supportedRequestOptions.claims.userinfo   (array) : List of claims to return in the UserInfo endpoint  supportedRequestOptions.request   (boolean) : Signed request object JWS.  Not supported yet.",
            "title": "Supported Request Options"
        },
        {
            "location": "/integration/oauth-js-implicit/#supported-client-options",
            "text": "List of supported Client configuration parameters.    supportedClientOptions.client_id   (string) : The client's client_id   supportedClientOptions.redirect_uri   (string) : The client's redirect_uri",
            "title": "Supported Client Options"
        },
        {
            "location": "/integration/oauth-js-implicit/#oidc-methods",
            "text": "",
            "title": "OIDC Methods"
        },
        {
            "location": "/integration/oauth-js-implicit/#setproviderinfop",
            "text": "p - The Identity Provider's configuration options described in  OIDC.supportedProviderOptions     Sets the Identity Provider's configuration parameters. It may be done declaring each parameter on code or using the returning information from  OIDC.discover('https: //(hostname)') . It returns a boolean value indicating status of call.",
            "title": "setProviderInfo(p)"
        },
        {
            "location": "/integration/oauth-js-implicit/#example",
            "text": "// set Identity Provider configuration\nOIDC.setProviderInfo( {\n    issuer: 'https://(hostname)',\n    authorization_endpoint: 'http://(hostname)/auth.html',\n    jwks_uri: 'https://(hostname)/jwks'\n    });\n\n// set Identity Provider configuration using discovery information\nvar discovery = OIDC.discover('https://(hostname)');\nif(var)\n  OIDC.setProviderInfo(discovery);",
            "title": "Example:"
        },
        {
            "location": "/integration/oauth-js-implicit/#setclientinfop",
            "text": "p - The Client's configuration options described in  OIDC.supportedClientOptions     Sets the Client's configuration parameters. It returns a boolean value indicating status of call.",
            "title": "setClientInfo(p)"
        },
        {
            "location": "/integration/oauth-js-implicit/#example_1",
            "text": "// set client_id and redirect_uri\nOIDC.setClientInfo( {\n   client_id: 'myclientID',\n   redirect_uri: 'https://rp.example.com/callback.html'\n  }\n);",
            "title": "Example:"
        },
        {
            "location": "/integration/oauth-js-implicit/#storeinfoproviderinfo-clientinfo",
            "text": "providerInfo - The Identity Provider's configuration options described in  OIDC.supportedProviderOptions    clientInfo - The Client's configuration options described in  OIDC.supportedClientOptions     Stores the Identity Provider and Client configuration options in the browser session storage for reuse later.",
            "title": "storeInfo(providerInfo, clientInfo)"
        },
        {
            "location": "/integration/oauth-js-implicit/#restoreinfo",
            "text": "Load and set the Identity Provider and Client configuration options from the browser session storage.",
            "title": "restoreInfo()"
        },
        {
            "location": "/integration/oauth-js-implicit/#checkrequiredinfoparams",
            "text": "params - List of Identity Provider and client configuration parameters     Check whether the required configuration parameters are set. It returns a boolean value indicating whether the options have been set.",
            "title": "checkRequiredInfo(params)"
        },
        {
            "location": "/integration/oauth-js-implicit/#clearproviderinfo",
            "text": "Clears the Identity Provider configuration parameters.",
            "title": "clearProviderInfo()"
        },
        {
            "location": "/integration/oauth-js-implicit/#loginreqoptions",
            "text": "reqOptions - Optional authentication request options ( OIDC.supportedRequestOptions )     Redirect to the Identity Provider for authentication.",
            "title": "login(reqOptions)"
        },
        {
            "location": "/integration/oauth-js-implicit/#example_2",
            "text": "// login with options\nOIDC.login({\n   scope : 'openid profile',\n   response_type : 'token id_token',\n   max_age : 60,\n   claims : {\n      id_token : ['email', 'phone_number'],\n      userinfo : ['given_name', 'family_name']\n      }\n});\n\n// login with default\n// scope = openid and response_type = id_token\nOIDC.login();",
            "title": "Example:"
        },
        {
            "location": "/integration/oauth-js-implicit/#verifyidtokensigid_token",
            "text": "id_token - The ID Token string     Verifies the ID Token signature using the JWK Keyset from jwks or jwks_uri of the Identity Provider Configuration options set via  OIDC.setProviderInfo . Supports only RSA signatures. It returns a boolean value indicates whether the signature is valid or not.",
            "title": "verifyIdTokenSig(id_token)"
        },
        {
            "location": "/integration/oauth-js-implicit/#isvalididtokenid_token",
            "text": "id_token - The ID Token string     Validates the information in the ID Token against configuration data in the Identity Provider and Client configuration set via  OIDC.setProviderInfo  and set via  OIDC.setClientInfo . It returns a boolean value indicating the validity of the ID Token.",
            "title": "isValidIdToken(id_token)"
        },
        {
            "location": "/integration/oauth-js-implicit/#rsaverifyjwsjws-jwk",
            "text": "jws - The JWS string    jwk - The JWK Key that will be used to verify the signature     Verifies the JWS string using the JWK. It returns a boolean value indicating the validity of the JWS signature.",
            "title": "rsaVerifyJWS(jws, jwk)"
        },
        {
            "location": "/integration/oauth-js-implicit/#getvalididtoken",
            "text": "Return the ID Token string taken from the current page URL whose signature is verified and contents validated against the configuration data set via  OIDC.setProviderInfo  and  OIDC.setClientInfo .",
            "title": "getValidIdToken()"
        },
        {
            "location": "/integration/oauth-js-implicit/#getaccesstoken",
            "text": "Return Access Token string taken from the current page URL.",
            "title": "getAccessToken()"
        },
        {
            "location": "/integration/oauth-js-implicit/#getcode",
            "text": "Return Authorization Code string taken from the current page URL.",
            "title": "getCode()"
        },
        {
            "location": "/integration/oauth-js-implicit/#getidtokenpartsid_token",
            "text": "id_token - The ID Token string     Splits the ID Token string into the individual JWS parts. It returns an array of the JWS compact serialization components (header, payload, signature).",
            "title": "getIdTokenParts(id_token)"
        },
        {
            "location": "/integration/oauth-js-implicit/#getidtokenpayloadid_token",
            "text": "id_token - The ID Token string     Return a JSON object with contents of the ID Token payload.",
            "title": "getIdTokenPayload(id_token)"
        },
        {
            "location": "/integration/oauth-js-implicit/#getjsonobjectjsons",
            "text": "jsonS - JSON string     Return the JSON object from the JSON string.",
            "title": "getJsonObject(jsonS)"
        },
        {
            "location": "/integration/oauth-js-implicit/#fetchjsonurl",
            "text": "url - URL to fetch the JSON file     Retrieves the JSON file at the specified URL. The URL must have CORS enabled for this function to work. It returns a string of contents of the URL or null.",
            "title": "fetchJSON(url)"
        },
        {
            "location": "/integration/oauth-js-implicit/#jwk_get_keyjwkin-kty-use-kid",
            "text": "jwkIn - JWK Keyset string or object.    kty - The 'kty' to match (RSA|EC). Only RSA is supported.    use - The 'use' to match (sig|enc).    kid - The 'kid' to match     Retrieve the JWK key that matches the input criteria. It returns an array of JWK keys that match the specified criteria.",
            "title": "jwk_get_key(jwkIn, kty, use, kid)"
        },
        {
            "location": "/integration/oauth-js-implicit/#discoverissuer",
            "text": "issuer - The Identity Provider's issuer_id     Performs discovery on the Identity Provider's issuer_id. It returns the JSON object of the discovery document or null.",
            "title": "discover(issuer)"
        },
        {
            "location": "/integration/oauth-js-implicit/#debugtoggle-id_token",
            "text": "toggle - Boolean value that enables or disables debugging output    id_token - The ID Token string     Print current Client's configuration options, Identity Provider's configuration options, results for verification and validation of id_token and its signature directly on console.",
            "title": "debug(toggle, id_token)"
        },
        {
            "location": "/integration/oauth-js-implicit/#getuserinfoaccess_token",
            "text": "access_token - Access Token string     Make the call to UserInfo endpoint with access token. It returns the user claims sent by the Identity Provider.",
            "title": "getUserInfo(access_token)"
        },
        {
            "location": "/integration/saml-sp/",
            "text": "SAML SP Integration\n#\n\n\nApache SAML\n#\n\n\nConfiguring Apache Shibboleth SP in CentOS\n#\n\n\nSystem Preparation\n#\n\n\nAdd Shibboleth repository for CentOS\n\n\n\n\nThe file \nshib.repo\n contains the following entry:\n\n\n\n\n[security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1\n\n\n\n\n\n\nDownload the Shibboleth security repo key from here:\n\n\n\n\nhttp://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo\n\n\n\n\nShibboleth SP Installation\n#\n\n\nTo install the Shibboleth SP, run the following commands in a terminal:\n\n\n# yum install shibboleth\n# service shibd start\n# chkconfig shibd on\n\n\n\n\nInstall and Configure httpd\n#\n\n\nInstallation\n#\n\n\nThe following commands will both install, and start the Apache web\nserver on your machine/Linux environment:\n\n\n# yum install httpd\n# service httpd start\n# service iptables stop \n\n\n\n\nConfiguration\n#\n\n\nEdit the file \nhttpd.conf\n, and do the following changes:\n\n\n\n\n\n\nChange the \nServerName\n directive to the server name of the SP.\n\n\n\n\n\n\nSet \nUseCanonicalName On\n.\n\n\n\n\n\n\nRestart the httpd service using the command \nservice httpd restart\n.\n\n\n\n\n\n\nHttpd Testing\n#\n\n\n\n\n\n\nCreate an \nindex.html\n file inside the directory \n/var/www/html\n.\n\n\n\n\n\n\nRestart the httpd service using the command \nservice httpd restart\n.\n\n\n\n\n\n\nCheck from your browser if the file \nindex.html\n is visible.\n\n\n\n\n\n\nSP Key Certificate\n#\n\n\n\n\n\n\nCreate both a private key, and a certificate, and place those in the\n  file \n/etc/shibboleth\n.\n\n\n\n\n\n\nChange the permissions of these files so that the web server can read\n  the files.\n\n\n\n\n\n\nShibboleth SP Configuration\n#\n\n\nThis section describes how to configure the file \nshibboleth2.xml\n.\n\n\n\n\n\n\nProvide the \nentityID\n of the according SP in:\n\n\n\n\n<ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"> section\n\n\n\n\n\n\n\n\nProvide the \nentityID\n of the IdP in:\n\n\n\n\n<SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"> section\n\n\n\n\n\n\n\n\nAdjust the entry of the metadata provider. In most cases this is the\n  Gluu IdP metadata link:\n\n\n\n\n<MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"> section\n\n\n\n\n\n\n\n\nProvide both the key and certificate of the SP in:\n\n\n\n\n<CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"> section\n\n\n\n\n\n\n\n\nShibboleth Manual Configuration (one Physical SP):\n#\n\n\n\n\n\n\nCreate a directory named under \n/var/www/secure\n.\n\n\n\n\n\n\nChange the permissions for that directory \nsecure\n to\n  \napache:apache\n (owner and group of the web server).\n\n\n\n\n\n\nhttpd.conf\n\n\n\n\n\n\nchange the ServerName \n<hostname_of_server>\n\n\n\n\n\n\nDefine the Location, and the authorization type:\n\n\n<Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>\n\n\n\n\n\n\n\n\n\n\nconfigure \nshibboleth2.xml\n\n\n\n\n\n\nSet the EntityID of the SP: \nApplicationDefaults entityID=\"http://hostname/secure\"\n\n\n\n\n\n\nProvide the EntityID of the IDP: \nSSO entityID=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\nSet both the Metadata Provider, and the IDP: \nMetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\n\n\n\n\nRestart both shibd and Apache2 using these lines:\n\n\n\n\n\n\nservice shibd restart\nservice httpd restart\n\n\n\n\n\n\nCreate a Trust Relationship for this SP in your desired IdP.\n\n\n\n\nSuper Quick Ubuntu Shib Apache Install\n#\n\n\nNeed to protect a test Apache folder using SAML on an Ubuntu server?\nHate to read? This article is for you. Replace both \nminnow\n and\n\nminnow.gluu.info\n with your desired website hostname.\n\n\nConfigure Apache\n#\n\n\nThese are the steps to configure your Apache webserver properly:\n\n\n# apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start\n\n\n\n\nDownload \nminnow-metadata.xml\n to your machine. You will need this file\nlater when you create the Trust Relationship in the Gluu Server.\n\n\n# mkdir /var/www/protected\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n\n\n\n\nEdit \nprintHeaders.py\n, and add this simple script. It will show you the\nHTTP headers:\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\nEdit the default site at \n/etc/apache2/sites-available/default-ssl.conf\n, \nand add this part:\n\n\nScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>\n\n\n\n\nConfigure the Shibboleth SP\n#\n\n\nUse this for \nshibboleth2.xml\n and replace \nsquid.gluu.info\n with the\nhostname of your SP, and \nalbacore.gluu.info\n with the hostname of your\nIDP.\n\n\n<SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"squid.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://squid.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/squid.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>\n\n\n\n\nCopy this file into \n/etc/shibboleth/attribute-map.xml\n:\n\n\n\n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>\n\n\n\n\nNow you need to create a Trust Relationship in your Gluu Server. Login,\ngo to SAML / Trust Relationships, and \"Add Relationship\":\n\n\n\n\nThen, configure for SAML2SSO profile. Click on the checkbox to\n\"Configure specific RelyingParty\":\n\n\n\n\nThen, click to add the SAML2SSO profile:\n\n\n\n\nThen \"Save\" and \"Update.\" Wait 5 minutes for the Shibboleth IDP to detect reload the metadata or\nstop and start tomcat.\n\n\nTest\n#\n\n\nTest the CGI script at \nhttps://minnow.gluu.info/protected/printHeaders.py\n.\nEnter both the valid username and password (like \nadmin\n and your\ninitial admin password). The output will contain something like this:\n\n\n**Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://brookie.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f\n\n\n\nTroubleshooting\n#\n\n\n\n\n\n\nMake sure you update your hosts file on the Gluu Server, Apache\n   server, and your workstation--this won't work with IP addresses,\n   only.\n\n\n\n\n\n\nCheck the Shibboleth log file \n/opt/idp/logs/idp-process.log\n if you\n   don't see the headers or REMOTE_USER environment variables. Also,\n   restart the Apache Tomcat service by \nservice tomcat restart\n to \n   make sure the new Shibboleth IDP xml files were loaded.\n\n\n\n\n\n\nClear the cookies in your web browser for both the Apache site, and \n   the Gluu Server if you are logging in and logging out a lot with \n   lots of server restarts.\n\n\n\n\n\n\nIIS SAML Configuration\n#\n\n\nIIS Configuration in Windows 7\n#\n\n\n\n\n\n\nStart --> Control Panel --> Programs --> \"Turn Windows features on or off\"\n\n\n\n\n\n\nSelect (i) IIS (ii) Web Management Tools (iii) II6 Management Compatibility (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service\n\n\n\n\n\n\nSelect (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --> Press OK.\n\n\n\n\n\n\n\nTest IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.\n\n\n\n\n\n\n\nISAPI Filter Configuration\n#\n\n\n\n\n\n\nOpen IIS Manager (Start --> Administrative Tools --> Internet Information Service/IIS Manager)\n\n\n\n\n\n\nDouble click on \"ISAPI and CGI Restrictions\"\n\n\n\n\n\n\n\nAdd a new Filter\n\n\n\n\n\n\na. Click Actions --> Add (upper right corner)\n\n\nb. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\nc. Description: \"Shibboleth\"\n\n\nd. Click \"Allow\" (from the right hand side)\n\n\n\n\ne. Back to IIS Manager --> ISAPI Filters\n\n\n\n\n    1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\n\n\n\nf. SSO file extension mapping\n\n\n    1. Click on \"Handler Mapping\" from main page\n\n\n\n\n\n    2. Click \"Add Script Map\" from Action\n\n\n\n\n\n    3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"\n\n\n\n\n\ng. Restart IIS\n\n\nh. Check Status\n\n\nCheck Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.\n\n\n\nShibboleth SP Setup in Windows 2008 R2 with IIS7\n#\n\n\n\n\nOpen up \"Server Manager\", scroll down and click on \"Add Roles\".\n\n\n\n\n\n\n\n\nHit \"Next\"\n\n\n\n\n\n\n\n\nSelect \"Web Server (IIS)\", hit \"Next\"\n\n\n\n\n\n\n\n\nSelect (i) CGI\n\n\n\n\n(ii) ISAPI Extensions\n\n\n(iii) ISAPI Filters\n\n\n(iv) Management Tools\n\n\n(a) IIS Management Console\n\n\n(b) IIS Management Scripts and Tools\n\n\n(c) Management Service\n\n\n(v) All IIS6 Management Compatibility\n\n\n\n\n\n\n\n\nHit \"Next\", for the confirmation, check the list of plugins.\n\n\n\n\n\n\n\n\n\n\nHit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.\n\n\n\n\n\n\n7.Test IIS7 setup from the Internet.\n\n\n\n\nShibboleth SP 2.5.x Setup\n#\n\n\n\n\n\n\nDown the \nShibboleth SP 2.5.x\n\n\n\n\n\n\nStart the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".\n\n\n\n\n\n\n\n\n\n\nAfter the completion of the installation, the system will ask to reboot the system; hit \"Yes\".\n\n\n\n\n\n\n\n\nTest the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.\n\n\n\n\n\n\nTrust Relationship in IdP\n#\n\n\n\n\nCreate a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in the IdP. Please note that the CN of the public certificate MUST BE the same as \nHostname\n of the SP. Hit \"Add\".\n\n\n\n\n\n\n\n\nDownload the IdP generated configuration files for Shib SP modification.\n\n\n\n\n\n\nSP Configuration\n#\n\n\n\n\n\n\nThe files from the IdP must be placed in the SP Configuration.\n\n\n\n\n\n\nBefore placing them inside the SP Configuration please check\n\n\n\n\n\n\n(a) The \"spcert.crt\" file has the CN same as the SP hostname.\n\n\n(b) The \"spcert.crt\" and \"spkey.key\" has the same \nmd5sum\n value.\n\n\n(c) The IdP-metadata is perfectly placed inside the SP Configuration.\n\n\n(d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.\n\n\n\n\nFor testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.\n\n\n\n\n\n\nSSO Testing\n#\n\n\n\n\n\n\nPlace the following URL in the web browser: \"https://SP_Name/secure\"\n\n\n\n\n\n\nIt will redirect the user to the IdP for authentication.\n\n\n\n\n\n\nAfter the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.\n\n\n      xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">\n\n\n\n      \n\n      \n\n\n\n      \n\n        \n\n              \n\n        \n\n      \n\n\n\n      \n\n      \n\n\n\n      \n\n      \n\n      \n\n      \n\n\n\n      \n\n        \n\n                \n\n                \n\n                \n\n        \n\n      \n\n\n\n  \n\n\n<!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    -->\n<Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\">\n\n    <!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -->\n\n    <!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -->\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\">\n               <SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/>\n               <SessionInitiator type=\"Shib1\" acsIndex=\"5\"/>\n            </SessionInitiator>\n\n    <!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -->\n    <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/>\n            <md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/>\n            <md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/>\n\n    <!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -->\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\">\n            <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n    <!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -->\n            <md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -->\n            <md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -->\n            <md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n\n    <!-- Extension service that generates \"approximate\" metadata based on SP configuration. -->\n            <Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/>\n\n            <!-- Status reporting service. -->\n            <Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/>\n\n            <!-- Session diagnostic service. -->\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n\n</Sessions>\n\n<!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -->\n    <Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n<!-- Uncomment and modify to tweak settings for specific IdPs or groups. -->\n    <RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/>\n\n<!-- Chains together all your metadata sources. -->\n    <MetadataProvider type=\"Chaining\">\n    <MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/>\n    </MetadataProvider>\n\n<!-- Chain the two built-in trust engines together. -->\n    <TrustEngine type=\"Chaining\">\n            <TrustEngine type=\"ExplicitKey\"/>\n            <TrustEngine type=\"PKIX\"/>\n    </TrustEngine>\n\n<!-- Map to extract attributes from SAML assertions. -->\n    <AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/>\n\n    <!-- Use a SAML query if no attributes are supplied during SSO. -->\n    <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n\n    <!-- Default filtering policy for recognized attributes, lets other data pass. -->\n    <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n\n<!-- Simple file-based resolver for using a single keypair. -->\n    <!-- <CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/> -->\n\n    <!-- TODO is password needed? -->\n    <CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" />\n\n</ApplicationDefaults>\n\n<!-- Each policy defines a set of rules to use to secure messages. -->\n    <SecurityPolicies>\n    <!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    -->\n<Policy id=\"default\" validate=\"false\">\n            <PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/>\n            <PolicyRule type=\"Conditions\">\n                <PolicyRule type=\"Audience\"/>\n                <!-- Enable Delegation rule to permit delegated access. -->\n                <!-- <PolicyRule type=\"Delegation\"/> -->\n            </PolicyRule>\n            <PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/>\n            <PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/>\n            <PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/>\n    </Policy>\n    </SecurityPolicies>\n\n\n\n\n\n\n\n\n\nConfiguring Apache Shibboleth SP in Windows\n#\n\n\nShibboleth SP Installation\n#\n\n\n\n\n\n\nDownload the MSI of Shibboleth-SP from:\n   http://www.shibboleth.net/downloads/service-provider/latest/ .\n\n\n\n\n\n\nStart the installation\n\n\n\n\n\n\n\n\n\n\nDefine the destination folder (by default it is: C:\\opt\\shibboleth-sp).\n\n\n\n\n\n\n\n\nSelect the Shibboleth Daemon port. By default it is 1600, and you may\n   keep it for testing it, locally.\n\n\n\n\n\n\n\n\n\n\nNow, there are two options. According to your target you will have to\nchoose one.\n\n\n\n\n\n\nOption 1: If you install Shibboleth for the Apache Web Server\n\n\n\n\n\n\nOption 2: If you install Shibboleth for Microsoft IIS Web Server\n\n\na. For the Microsoft IIS Web Server, CHECK \u201cInstall ISAPI filter\nand configure IIS\u201d. Remember to put the file Extension \u201d.sso\u201d --\nthis is necessary.\n\n\n\n\n\n\n\n\n\n\n\n\n    b. For the Apache Web Server, UNCHECK \"Install ISAPI filter and\n    configure IIS\".\n\n\n\n\n\n3. UAC of Windows 7 may block this program, so allow it.\n\n\n\n\n\nApache Configuration\n#\n\n\n\n\nDownload the Apache HTTP server MSI Installer with OpenSSL:\n   http://httpd.apache.org/download.cgi#apache22 .\n\n\n\n\n\n\n\n\nSelect the destination. You can keep the default destination for your\nlocal testing. But, make sure that there is no other \u201cApache Software\nFoundation\u201d directory in your current \u201cC:\\Program Files\\\u201d location.\n\n\n\n\n\n\n\n\nProvide the Server Information. For local testing you can use\n   \nlocaldomain/localhost\n.\n\n\n\n\n\n\n\n\nTest whether the Apache web server is installed or not. Open your web\nbrowser and use \nlocalhost\n. If you see something like the image shown\nbelow--you are done!\n\n\n\n\na\n\n\nShibboleth and Apache Configuration\n#\n\n\n\n\n\n\nChange the permission of the Apache installation directory, and\n   provide \u201cwrite\u201d access.\n\n\n\n\n\n\nhttpd.conf\n configuration\n\n\n\n\n\n\nChange \u201cServerName localhost:80\u201d (for your local testing)\n\n\n\n\n\n\nCopy \napache22.conf\n from the Shibboleth directory to \n~/apache/conf/extra/\n\n\n\n\n\n\n\n\n\n\nShibboleth2.xml\n configuration\n\n\n\n\n\n\nChange: Host name=\u201clocalhost\u201d (for local testing)\n\n\n\n\n\n\nChange: entityID=\u201chttps://localhost/shibboleth\u201d (for local testing)\n\n\n\n\n\n\nChange: ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d\n\n\n\n\n\n\n\n\n\n\nReboot your windows machine.\n\n\n\n\n\n\nTest SP Installation with Windows and Apache\n#\n\n\n\n\nOpen the web browser, and provide the address:\n   \nlocalhost/Shibboleth.sso/Status\n\n\nIf you can see some XML page like the one shown below--you are done\n   with your SP installation in Windows through Apache2.\n\n\n\n\na",
            "title": "Shibboleth SP"
        },
        {
            "location": "/integration/saml-sp/#saml-sp-integration",
            "text": "",
            "title": "SAML SP Integration"
        },
        {
            "location": "/integration/saml-sp/#apache-saml",
            "text": "",
            "title": "Apache SAML"
        },
        {
            "location": "/integration/saml-sp/#configuring-apache-shibboleth-sp-in-centos",
            "text": "",
            "title": "Configuring Apache Shibboleth SP in CentOS"
        },
        {
            "location": "/integration/saml-sp/#system-preparation",
            "text": "Add Shibboleth repository for CentOS   The file  shib.repo  contains the following entry:   [security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1   Download the Shibboleth security repo key from here:   http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo",
            "title": "System Preparation"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-sp-installation",
            "text": "To install the Shibboleth SP, run the following commands in a terminal:  # yum install shibboleth\n# service shibd start\n# chkconfig shibd on",
            "title": "Shibboleth SP Installation"
        },
        {
            "location": "/integration/saml-sp/#install-and-configure-httpd",
            "text": "",
            "title": "Install and Configure httpd"
        },
        {
            "location": "/integration/saml-sp/#installation",
            "text": "The following commands will both install, and start the Apache web\nserver on your machine/Linux environment:  # yum install httpd\n# service httpd start\n# service iptables stop",
            "title": "Installation"
        },
        {
            "location": "/integration/saml-sp/#configuration",
            "text": "Edit the file  httpd.conf , and do the following changes:    Change the  ServerName  directive to the server name of the SP.    Set  UseCanonicalName On .    Restart the httpd service using the command  service httpd restart .",
            "title": "Configuration"
        },
        {
            "location": "/integration/saml-sp/#httpd-testing",
            "text": "Create an  index.html  file inside the directory  /var/www/html .    Restart the httpd service using the command  service httpd restart .    Check from your browser if the file  index.html  is visible.",
            "title": "Httpd Testing"
        },
        {
            "location": "/integration/saml-sp/#sp-key-certificate",
            "text": "Create both a private key, and a certificate, and place those in the\n  file  /etc/shibboleth .    Change the permissions of these files so that the web server can read\n  the files.",
            "title": "SP Key Certificate"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-sp-configuration",
            "text": "This section describes how to configure the file  shibboleth2.xml .    Provide the  entityID  of the according SP in:   <ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"> section     Provide the  entityID  of the IdP in:   <SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"> section     Adjust the entry of the metadata provider. In most cases this is the\n  Gluu IdP metadata link:   <MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"> section     Provide both the key and certificate of the SP in:   <CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"> section",
            "title": "Shibboleth SP Configuration"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-manual-configuration-one-physical-sp",
            "text": "Create a directory named under  /var/www/secure .    Change the permissions for that directory  secure  to\n   apache:apache  (owner and group of the web server).    httpd.conf    change the ServerName  <hostname_of_server>    Define the Location, and the authorization type:  <Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>      configure  shibboleth2.xml    Set the EntityID of the SP:  ApplicationDefaults entityID=\"http://hostname/secure\"    Provide the EntityID of the IDP:  SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"    Set both the Metadata Provider, and the IDP:  MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"      Restart both shibd and Apache2 using these lines:    service shibd restart\nservice httpd restart   Create a Trust Relationship for this SP in your desired IdP.",
            "title": "Shibboleth Manual Configuration (one Physical SP):"
        },
        {
            "location": "/integration/saml-sp/#super-quick-ubuntu-shib-apache-install",
            "text": "Need to protect a test Apache folder using SAML on an Ubuntu server?\nHate to read? This article is for you. Replace both  minnow  and minnow.gluu.info  with your desired website hostname.",
            "title": "Super Quick Ubuntu Shib Apache Install"
        },
        {
            "location": "/integration/saml-sp/#configure-apache",
            "text": "These are the steps to configure your Apache webserver properly:  # apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start  Download  minnow-metadata.xml  to your machine. You will need this file\nlater when you create the Trust Relationship in the Gluu Server.  # mkdir /var/www/protected\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py  Edit  printHeaders.py , and add this simple script. It will show you the\nHTTP headers:  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"  Edit the default site at  /etc/apache2/sites-available/default-ssl.conf , \nand add this part:  ScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>",
            "title": "Configure Apache"
        },
        {
            "location": "/integration/saml-sp/#configure-the-shibboleth-sp",
            "text": "Use this for  shibboleth2.xml  and replace  squid.gluu.info  with the\nhostname of your SP, and  albacore.gluu.info  with the hostname of your\nIDP.  <SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"squid.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://squid.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/squid.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>  Copy this file into  /etc/shibboleth/attribute-map.xml :  \n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>  Now you need to create a Trust Relationship in your Gluu Server. Login,\ngo to SAML / Trust Relationships, and \"Add Relationship\":   Then, configure for SAML2SSO profile. Click on the checkbox to\n\"Configure specific RelyingParty\":   Then, click to add the SAML2SSO profile:   Then \"Save\" and \"Update.\" Wait 5 minutes for the Shibboleth IDP to detect reload the metadata or\nstop and start tomcat.",
            "title": "Configure the Shibboleth SP"
        },
        {
            "location": "/integration/saml-sp/#test",
            "text": "Test the CGI script at  https://minnow.gluu.info/protected/printHeaders.py .\nEnter both the valid username and password (like  admin  and your\ninitial admin password). The output will contain something like this:  **Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://brookie.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f",
            "title": "Test"
        },
        {
            "location": "/integration/saml-sp/#troubleshooting",
            "text": "Make sure you update your hosts file on the Gluu Server, Apache\n   server, and your workstation--this won't work with IP addresses,\n   only.    Check the Shibboleth log file  /opt/idp/logs/idp-process.log  if you\n   don't see the headers or REMOTE_USER environment variables. Also,\n   restart the Apache Tomcat service by  service tomcat restart  to \n   make sure the new Shibboleth IDP xml files were loaded.    Clear the cookies in your web browser for both the Apache site, and \n   the Gluu Server if you are logging in and logging out a lot with \n   lots of server restarts.",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration/saml-sp/#iis-saml-configuration",
            "text": "",
            "title": "IIS SAML Configuration"
        },
        {
            "location": "/integration/saml-sp/#iis-configuration-in-windows-7",
            "text": "Start --> Control Panel --> Programs --> \"Turn Windows features on or off\"    Select (i) IIS (ii) Web Management Tools (iii) II6 Management Compatibility (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service    Select (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --> Press OK.    Test IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.",
            "title": "IIS Configuration in Windows 7"
        },
        {
            "location": "/integration/saml-sp/#isapi-filter-configuration",
            "text": "Open IIS Manager (Start --> Administrative Tools --> Internet Information Service/IIS Manager)    Double click on \"ISAPI and CGI Restrictions\"    Add a new Filter    a. Click Actions --> Add (upper right corner)  b. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"  c. Description: \"Shibboleth\"  d. Click \"Allow\" (from the right hand side)   e. Back to IIS Manager --> ISAPI Filters       1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"   f. SSO file extension mapping      1. Click on \"Handler Mapping\" from main page       2. Click \"Add Script Map\" from Action       3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"   g. Restart IIS  h. Check Status  Check Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.",
            "title": "ISAPI Filter Configuration"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-sp-setup-in-windows-2008-r2-with-iis7",
            "text": "Open up \"Server Manager\", scroll down and click on \"Add Roles\".     Hit \"Next\"     Select \"Web Server (IIS)\", hit \"Next\"     Select (i) CGI   (ii) ISAPI Extensions  (iii) ISAPI Filters  (iv) Management Tools  (a) IIS Management Console  (b) IIS Management Scripts and Tools  (c) Management Service  (v) All IIS6 Management Compatibility     Hit \"Next\", for the confirmation, check the list of plugins.      Hit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.    7.Test IIS7 setup from the Internet.",
            "title": "Shibboleth SP Setup in Windows 2008 R2 with IIS7"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-sp-25x-setup",
            "text": "Down the  Shibboleth SP 2.5.x    Start the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".      After the completion of the installation, the system will ask to reboot the system; hit \"Yes\".     Test the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.",
            "title": "Shibboleth SP 2.5.x Setup"
        },
        {
            "location": "/integration/saml-sp/#trust-relationship-in-idp",
            "text": "Create a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in the IdP. Please note that the CN of the public certificate MUST BE the same as  Hostname  of the SP. Hit \"Add\".     Download the IdP generated configuration files for Shib SP modification.",
            "title": "Trust Relationship in IdP"
        },
        {
            "location": "/integration/saml-sp/#sp-configuration",
            "text": "The files from the IdP must be placed in the SP Configuration.    Before placing them inside the SP Configuration please check    (a) The \"spcert.crt\" file has the CN same as the SP hostname.  (b) The \"spcert.crt\" and \"spkey.key\" has the same  md5sum  value.  (c) The IdP-metadata is perfectly placed inside the SP Configuration.  (d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.   For testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.",
            "title": "SP Configuration"
        },
        {
            "location": "/integration/saml-sp/#sso-testing",
            "text": "Place the following URL in the web browser: \"https://SP_Name/secure\"    It will redirect the user to the IdP for authentication.    After the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.        xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">  \n       \n        \n       \n         \n               \n         \n        \n       \n        \n       \n       \n       \n        \n       \n         \n                 \n                 \n                 \n         \n        \n    <!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    -->\n<Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\">\n\n    <!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -->\n\n    <!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -->\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\">\n               <SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/>\n               <SessionInitiator type=\"Shib1\" acsIndex=\"5\"/>\n            </SessionInitiator>\n\n    <!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -->\n    <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/>\n            <md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/>\n            <md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/>\n\n    <!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -->\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\">\n            <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n    <!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -->\n            <md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -->\n            <md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -->\n            <md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n\n    <!-- Extension service that generates \"approximate\" metadata based on SP configuration. -->\n            <Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/>\n\n            <!-- Status reporting service. -->\n            <Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/>\n\n            <!-- Session diagnostic service. -->\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n\n</Sessions>\n\n<!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -->\n    <Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n<!-- Uncomment and modify to tweak settings for specific IdPs or groups. -->\n    <RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/>\n\n<!-- Chains together all your metadata sources. -->\n    <MetadataProvider type=\"Chaining\">\n    <MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/>\n    </MetadataProvider>\n\n<!-- Chain the two built-in trust engines together. -->\n    <TrustEngine type=\"Chaining\">\n            <TrustEngine type=\"ExplicitKey\"/>\n            <TrustEngine type=\"PKIX\"/>\n    </TrustEngine>\n\n<!-- Map to extract attributes from SAML assertions. -->\n    <AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/>\n\n    <!-- Use a SAML query if no attributes are supplied during SSO. -->\n    <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n\n    <!-- Default filtering policy for recognized attributes, lets other data pass. -->\n    <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n\n<!-- Simple file-based resolver for using a single keypair. -->\n    <!-- <CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/> -->\n\n    <!-- TODO is password needed? -->\n    <CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" />\n\n</ApplicationDefaults>\n\n<!-- Each policy defines a set of rules to use to secure messages. -->\n    <SecurityPolicies>\n    <!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    -->\n<Policy id=\"default\" validate=\"false\">\n            <PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/>\n            <PolicyRule type=\"Conditions\">\n                <PolicyRule type=\"Audience\"/>\n                <!-- Enable Delegation rule to permit delegated access. -->\n                <!-- <PolicyRule type=\"Delegation\"/> -->\n            </PolicyRule>\n            <PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/>\n            <PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/>\n            <PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/>\n    </Policy>\n    </SecurityPolicies>",
            "title": "SSO Testing"
        },
        {
            "location": "/integration/saml-sp/#configuring-apache-shibboleth-sp-in-windows",
            "text": "",
            "title": "Configuring Apache Shibboleth SP in Windows"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-sp-installation_1",
            "text": "Download the MSI of Shibboleth-SP from:\n   http://www.shibboleth.net/downloads/service-provider/latest/ .    Start the installation      Define the destination folder (by default it is: C:\\opt\\shibboleth-sp).     Select the Shibboleth Daemon port. By default it is 1600, and you may\n   keep it for testing it, locally.      Now, there are two options. According to your target you will have to\nchoose one.    Option 1: If you install Shibboleth for the Apache Web Server    Option 2: If you install Shibboleth for Microsoft IIS Web Server  a. For the Microsoft IIS Web Server, CHECK \u201cInstall ISAPI filter\nand configure IIS\u201d. Remember to put the file Extension \u201d.sso\u201d --\nthis is necessary.           b. For the Apache Web Server, UNCHECK \"Install ISAPI filter and\n    configure IIS\".   3. UAC of Windows 7 may block this program, so allow it.",
            "title": "Shibboleth SP Installation"
        },
        {
            "location": "/integration/saml-sp/#apache-configuration",
            "text": "Download the Apache HTTP server MSI Installer with OpenSSL:\n   http://httpd.apache.org/download.cgi#apache22 .     Select the destination. You can keep the default destination for your\nlocal testing. But, make sure that there is no other \u201cApache Software\nFoundation\u201d directory in your current \u201cC:\\Program Files\\\u201d location.     Provide the Server Information. For local testing you can use\n    localdomain/localhost .     Test whether the Apache web server is installed or not. Open your web\nbrowser and use  localhost . If you see something like the image shown\nbelow--you are done!   a",
            "title": "Apache Configuration"
        },
        {
            "location": "/integration/saml-sp/#shibboleth-and-apache-configuration",
            "text": "Change the permission of the Apache installation directory, and\n   provide \u201cwrite\u201d access.    httpd.conf  configuration    Change \u201cServerName localhost:80\u201d (for your local testing)    Copy  apache22.conf  from the Shibboleth directory to  ~/apache/conf/extra/      Shibboleth2.xml  configuration    Change: Host name=\u201clocalhost\u201d (for local testing)    Change: entityID=\u201chttps://localhost/shibboleth\u201d (for local testing)    Change: ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d      Reboot your windows machine.",
            "title": "Shibboleth and Apache Configuration"
        },
        {
            "location": "/integration/saml-sp/#test-sp-installation-with-windows-and-apache",
            "text": "Open the web browser, and provide the address:\n    localhost/Shibboleth.sso/Status  If you can see some XML page like the one shown below--you are done\n   with your SP installation in Windows through Apache2.   a",
            "title": "Test SP Installation with Windows and Apache"
        },
        {
            "location": "/integration/openidc-rp/",
            "text": "mod_auth_openidc RP Integration\n#\n\n\nBasic Web Server Installation\n#\n\n\nBefore you can install mod_auth_openidc, you need to have an Apache\nHTTPD server running with SSL enabled. \n\n\nApache Web Server\n#\n\n\nIt is assumed that all the hostnames will be dns resolvable. If not, \nthen add the entries in \n/etc/hosts\n file on both the web server\nand Gluu Server. \n\n\nIf you don't have the Apache HTTPD server installed, use apt-get\nto install the Ubuntu standard distribution:\n\n\n# apt-get install apache2\n# service apache2 start\n\n\n\n\nSSL Configuration\n#\n\n\nThe SSL Module is necessary for the Apache OpenID Connect Module. Please \nuse the following commands to activate the \nssl module\n.\n\n\n# a2enmod ssl\n\n\n\n\nThe next step is to create a self-signed SSL Certificate.\n\n\n\n\nCreate a directory to put the generate the ssl certificate\n\n\n\n\n# mkdir /etc/apache2/ssl`\n# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nAnswer the questions that are asked. A template is given below\n\n\n\n\n    Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:TX\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Acme Inc.\n    Organizational Unit Name (eg, section) []:\n    Common Name (e.g. server FQDN or YOUR name) []:www.mydomain.com\n    Email Address []:help@mydomain.com\n\n\n\n\nConfigure Apache to use SSL\n#\n\n\nThis section will guide you through the steps to configure apache to \nuse the SSL module\n\n\n\n\nOpen the \ndefault-ssl.conf\n file\n\n\n\n\n# vim /etc/apache2/sites-available/default-ssl.conf`\n\n\n\n\n\n\n\n\n\nUpdate the certificate locations with the newly created certificates \n\n/etc/apache2/ssl/apache.key\n and \n/etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nActivate the SSL Virtual Host and CGI\n\n\n\n\n\n\n# a2ensite default-ssl.conf\n# a2enmod cgid\n# service apache2 restart\n\n\n\n\n\nAt this point, its a good time to test to make sure SSL and CGI are \nworking. Point your browser at \nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi\nYou should see a list of current environment variables. \n\n\nConfiguration of mod_auth_openidc\n#\n\n\nInstallation\n#\n\n\nmod_auth_openidc\n module depends on the Ubuntu package \nlibjansson4\n: \n\n\n# apt-get install libjansson\n\n\n\n\n\nYou'll also need the mod_auth_openidc and libjose packages which can \nbe downloaded from the \nReleases Page\n.\n\n\nFor example, at this time the current release is 2.1.3, so the command would be:\n\n\n# wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb\n\n\n\n\n\n\n\nNote\n\n\nGet the latest packages here: https://github.com/pingidentity/mod_auth_openidc/releases\n\n\n\n\nNote, if you like to build from source, you can clone the project at \nGithub Page\n\n\nNow you can enable the module\n\n\n# sudo a2enmod auth_openidc\n# sudo service apache2 restart\n\n\n\n\n\nClient Registration\n#\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\nFor this example, let's create the client manually in the Gluu Server.\nWhen you add the client, use the following parameters:\n\n\nName: mod_auth_openidc\nClient Secret: something-sufficiently-unguessable\nApplication Type: Web\nPre-Authorization: Enabled\nlogin uri: https://www.mydomain.com/callback\nSubject Type: Public\nScopes: openid, profile, email\nResponse Types: code\n\n\n\n\n\nMake a note of the \nclient_secret\n (you won't get to see it again)! You'll\nalso need the \nclient_id\n for the next step.\n\n\nInstall CGI script\n#\n\n\nThis cgi-script makes for a good test page! \n\n\n# vi /usr/lib/cgi-bin/printHeaders.cgi\n\n\n\n\n\nThen paste in this code\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><Head><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\n\nThen you'll need to make the script executable by the Apache2\n\n\n# chown www-data:www-data /usr/lib/cgi-bin/printHeaders.cgi\n# chmod ug+x /usr/lib/cgi-bin/printHeaders.cgi\n\n\n\n\n\nConfiguring the Apache VirtualHost\n#\n\n\nYou are almost done! You'll need to configure mod_auth_openidc to\nprotect your server.\n\n\n# vi /etc/apache2/sites-available/default-ssl.conf\n\n\n\n\n\nAdd the following right under \n<VirtualHost _default_:443>\n\n\nOIDCProviderMetadataURL https://idp.mydomain.com/.well-known/openid-configuration\nOIDCClientID (client-id-you-got-back-when-you-added-the-client)\nOIDCClientSecret (your-client-secret)\nOIDCRedirectURI https://www.mydomain.com/callback\nOIDCResponseType code\nOIDCScope \"openid profile email\"\nOIDCSSLValidateServer Off\nOIDCCryptoPassphrase (a-random-seed-value)\nOIDCPassClaimsAs environment\nOIDCClaimPrefix USERINFO_\nOIDCPassIDTokenAs payload\n<Location \"/\">\n    Require valid-user\n    AuthType openid-connect\n</Location>\n\n\n\n\n\nThen restart Apache to effect the changes\n\n\n# service apache2 restart\n\n\n\n\n\nThe most confusing part here is the \nOIDCRedirectURI\n--don't set this\nto a path used by your server. The apache-filter uses the redirect_uri \nto process the response from the OpenID Provider (Gluu Server). \n\n\nNow you're ready to test. Open your web browser, and point it at \n\nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi\n \n\n\nIf you're not logged in already, you should be redirected to \nthe authentication page. If you are logged in, you should just see\nan html page with the \nREMOTE_USER\n variable populated. Also\ncheck out the \nOIDC_id_token_payload\n and all the claims for \n\nUSERINFO_\n \n\n\nInstallation\n#\n\n\nWe assume that all the hostnames will be dns resolvable. If not, then\nadd the according entries in \n/etc/hosts\n, please.\n\n\nAdd EPEL Repository\n#\n\n\nRun the following command to \nAdd EPEL Repo\n.\n\n\n\n\n# rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\n\n\n\nApache Web Server\n#\n\n\nTo setup \nApache2 SSL\n, run the following commands:\n\n\n\n\nNote\n\n\nIf the hiredis package is not found by the \nyum\n command, please download it manually from \nthis page\n and install it.\n\n\n\n\n# yum install httpd mod_ssl\n# yum install curl hiredis jansson\n\n\n\n\nConfigure SSL Module\n#\n\n\nThis section will guide you to create SSL certificates.\nUse the following commands to crete a  directory and generate the certificates.\n\n\n# mkdir /etc/httpd/ssl\n# openssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key\n\n\n\n\nYou will be prompted to enter some values such as company name, country etc. Please enter them and your certificate will be ready. A template is given below\n\n\n    Country Name (2 letter code) [XX]:US\n    State or Province Name (full name) []:TX\n    Locality Name (eg, city) [Default City]:Austin\n    Organization Name (eg, company) [Default Company Ltd]:Gluu\n    Organizational Unit Name (eg, section) []:\n    Common Name (eg, your name or your server's hostname) []:modauth-centos.info\n    Email Address []:support@gluu.org\n\n\n\n\nThe next step is to configure Apache to use the certificates and use the following command to edit the \nssl.conf\n file. \n\n\n# vi /etc/httpd/conf.d/ssl.conf\n\n\n\n\nThe important part of the configuration is to enter the path to the created SSL certificates. The example is given below.\n\n\nNote:\n Please make sure to use the correct server name in the configuration file.\n\n\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org\n\n\n\n\nRestart Apache Server and you are done configuring the SSL Module. Use the command below to restart the Apache Server.\n\n\n# service httpd restart\n\n\n\n\n\n\nNote\n\n\nThe latest version of the apache OpenID Connect module is available from \nthis page\n\n\n\n\nThe latest package for the apache module might have multiple dependencies which must be installed first.\n\n\nRun the following command to install the \nmod_auth_openidc\n module:\n\n\nrpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm\n\n\n\n\n\n\nNote\n\n\nIf there are any difficulties installing \nhiredis\n and \njansson\n,\n\n\n\n\ntry to update the package database of your system using the command below.\n\n\n# yum upgrade\n\n\n\n\nLoad Authentication Module\n#\n\n\nPlease make sure that the following shared-object file exists by running the following command:\n\n\nls -l /usr/lib64/httpd/modules/mod_auth_openidc.so\n\n\n\n\nInstall CGI Script\n#\n\n\nThe test page is made using the cgi-script. Please use the following command to create the script.\n\n\n# vi /var/www/cgi-bin/printHeaders.cgi\n\n\n\n\nPlease paste the following code to prepare the script\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><Head><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\n    print \"</BODY></HTML>\"\n\n\n\n\n\nThe next step is to make the script executable by HTTPD\n\n\n# chown apache:apache /var/www/cgi-bin/printHeaders.cgi\n# chmod ug+x /var/www/cgi-bin/printHeaders.cgi\n\n\n\n\nClient Registration\n#\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\nYou can use any of the methods to register the client.\nFor this example, let's create the client manually in the Gluu Server.\nPlease use the following parameters to create the client:\n\n\nName: mod_auth_openidc\nClient Secret: something-sufficiently-unguessable\nApplication Type: Web\nPre-Authorization: Enabled\nlogin uri: https://www.mydomain.com/callback\nSubject Type: Public\nScopes: openid, profile, email\nResponse Types: code\n\n\n\n\n\n\nNote\n\n\nThe \nclient_secret\n should be noted after creating the client in Gluu Server as it is used later.\n\n\n\n\nConfigure the Apache Virtualhost\n#\n\n\nThe apache module is confgured in the defautl ssl configuration file. Please use the command below to open the file\n\n\n# vi /etc/httpd/conf.d/ssl.conf \n\n\n\n\nPlease add the following at the bottom of the file\n\n\nOIDCProviderMetadataURL https://idp.mydomain.com/.well-known/openid-configuration\nOIDCClientID (client-id-you-got-back-when-you-added-the-client)\nOIDCClientSecret (your-client-secret)\nOIDCRedirectURI https://www.mydomain.com/callback\nOIDCResponseType code\nOIDCScope \"openid profile email\"\nOIDCSSLValidateServer Off\nOIDCCryptoPassphrase (a-random-seed-value)\nOIDCPassClaimsAs environment\nOIDCClaimPrefix USERINFO_\nOIDCPassIDTokenAs payload\n<Location \"/\">\n    Require valid-user\n    AuthType openid-connect\n</Location>\n\n\n\n\n\n\nWarning\n\n\nPlease remember to populate the \nOIDCRedirectURI\n with a value that is not used by the server. The apache-filter uses the redirect_uri to process the response from the OpenID Provider (Gluu Server).\n\n\n\n\nPlease restart the HTTPD server for the changes to take effect\n\n\n# service httpd restart\n\n\n\n\nNow you're ready to test. Open your web browser, and point it at\nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi`\n\n\noxRay\n#\n\n\nLifeRay\n OpenID Connect plugin to authenticate users using\nGluu IdP.\n\n\nOverview\n#\n\n\nThe oxAuth LifeRay plugin is used to authenticate and auto-log users\nfrom Gluu Server into \nLifeRay\n with the same credentials. It\nis built on top of oxAuth, the OpenID Connect provider by Gluu.\n\n\nThe oxAuth plugin intercepts any attempt to login from anywhere in the\nLifeRay and redirects the request and the user to an oxAuth server where\nthe identification takes place, actually. If the user has authorized the\nserver to share some of his basic information with the oxAuth plugin,\nthe user will be redirected back to the LifeRay CMS, and logged in,\nautomatically.\n\n\nThe goal of this project is to use the LifeRay CMS as the basis for an\norganizational personal data store service.\n\n\nNote: This plugin does not support auto-user creation from information\nsupplied by the oxAuth Plugin. Instead, it can be implemented by\nextending the plugin.\n\n\nDeployment\n#\n\n\nThe plugin is provided in two variants--\nMaven\n and \nAnt\n.\nYou can either use Maven or the LifeRay plugin SDK to build and deploy\nthis plugin as a standard LifeRay hot deployable WAR file.\n\n\nDeploying WAR file using Maven\n#\n\n\nThis requires a prerequisite: make sure that you have \nMaven\n\ninstalled on your system to build this plugin from source.\n\n\n\n\n\n\nCheckout the Maven source from the [oxRay Repository][https://github.com/GluuFederation/oxRay/tree/master/6.2.x/maven/gluu-openid-connect-hook].\n\n\n\n\n\n\nOpen the file \npom.xml\n in \ngluu-openid-connect-hook\n, and update\nyour local LifeRay Tomcat bundle path. This is required for building the\nWAR file and deploying to the LifeRay Tomcat bundle.\n\n\n\n\n\n\n\n\n\n\nRun the following command in the \ngluu/6.2.x/maven/gluu-openid-connect-hook\n \ndirectory:\n\n\n\n\nmvn clean install package liferay:deploy\n\n\n\n\nThis will take a few seconds to download the dependency \njar\n files, and\ngenerate the LifeRay-compiled deployable WAR file. It will be placed\nwithin your \n<liferay-bundle-folder>/deploy\n directory, and the hot\ndeployable process will start.\n\n\nUsing LifeRay Plugin SDK With Ant\n#\n\n\nThis requires a prerequisite: we assume that you have the plugin SDK\nboth installed and configured with LifeRay bundle.\n\n\n\n\n\n\nCheckout the gluu-openid-connect-hook plugin source from the\nrepository, and place these files in your local directory for the plugin\nSDK. Usually, this is \nliferay-plugins-sdk-6.2.0-ce-ga1/hooks\n.\n\n\n\n\n\n\nRun the following command in the folder \nliferay-plugins-sdk-6.2.0-ce-ga1/hooks/gluu-openid-connect-hook\n:\n\n\n\n\n\n\nant clean deploy\n\n\n\n\nUsing Binary From Repository\n#\n\n\nYou can also download a compiled binary as a standard LifeRay deployable\nWAR file from the following location:\n\n\noxRay LifeRay Deployable War File\n\n\nCopy this WAR file in your LifeRay bundle. Usually, this is located at\n\nliferay-portal-6.2.0-ce-ga1/deploy\n.\n\n\nOnce the plugin is deployed as a WAR file either using Maven or Ant, you\nwill see the following success message in your LifeRay Tomcat server:\n\n\n\n\nClient Registration\n#\n\n\nA LifeRay application needs to be registered with the Authorization\nserver before initiating an authentication request/response with OAuth\nIdP server.\n\n\nThe following steps are necessary to obtain both a client id and a\nclient secret. These data will be used within the LifeRay portal\nproperties.\n\n\n\n\nGo to the location \nhttps://seed.gluu.org/oxauth-rp/home.seam\n.\n\n\nYou will see the Dynamic Client Registration Section.\n\n\nEnter the Registration Endpoint uri, for example\n\nhttps://idp.example.org/oxauth/seam/resource/restv1/oxauth/authorize\n.\n\n\nYou can derive this uri from your IdP auto-discovery uri which is\nlike that: \nhttps://<Your IDP Server Domain>/.well-known/openid-configuration\n.\n\n\nYou can search for the registration endpoint, and copy that uri here.\n\n\n\n\n\n\nEnter the redirect uris as \nhttp://localhost:8080/openidconnect/callback\n:\n\n\nReplace your domain name with \nlocalhost:8080\n\n\nThis will be your LifeRay handler for logging a user into LifeRay,\nautomatically, when a redirect comes back from the OAuth server.\n\n\n\n\n\n\nSelect the Response Types: CODE\n\n\nSelect the Application Type: WEB\n\n\nFor development purposes use: NATIVE (if you are testing on a local\nmachine with \nlocalhost:8080\n domain)\n\n\nEnter Client Name: LifeRay App (you can choose any name here).\n\n\nAll other options can be left as they are--please see the attached\nscreenshot:\n\n\n\n\n\n\n\n\nClick \nSubmit\n, and both the following \nRegistration Request\n and\n\nRegistration Response\n will be displayed:\n\n\n\n\n\n\n\n\nSave the Registration Response to your local system. The parameters\n\nclient_id\n and \nclient_secret\n are used in LifeRay when configuring\n\nportal-ext.properties\n.\n\n\n\n\nModifying portal.properties\n#\n\n\nIt is necessary to modify \nportal-ext.properties\n file to reflect oxAuth\nserver client credentials and server's URL. It can be accomplished by\nnavigating into the \nliferay-portal-6.2.0-ce-ga1\n folder, where the file\n\nportal-ext.properties\n is stored.\n\n\nNote: To either activate or deactivate the oxAuth plugin put the value\n\ntrue\n (to activate) or \nfalse\n (to deactivate), respectively.\n\n\ngluu.openidconnect.auth.enabled=true\n\n\n\n\n\n\noxAuth client ID and client secret:\n\n\n\n\ngluu.openidconnect.client.id=@!1111!0008!51CE.1E59\ngluu.openidconnect.client.secret=65777eb7-87a8-4d60-9dbc-d31d43971f2b\n\n\n\n\n\n\nOAuth server domain\n\n\n\n\ngluu.openidconnect.idp.domain=https://idp.gluu.org`\n\n\n\n\n\n\nOAuth server auto discovery uri\n\n\n\n\ngluu.openidconnect.url.discovery=https://idp.gluu.org/.well-known/openid-configuration\n\n\n\n\n\n\nYour OAuth server logout uri (typically, this will be used to logout a\nuser from OAuth when a user logs out from LifeRay)\n\n\n\n\ngluu.openidconnect.idp.logout=https://idp.gluu.org/identity/logout\n\n\n\n\n\n\nLifeRay server callback uri that will be used as a handling response\nby the OAuth server after authentication:\n\n\nreplace the \nlocalhost:8080\n with your LifeRay domain name:\n\n\n\n\ngluu.openidconnect.client.redirect.url=http://localhost:8080/openidconnect/callback\n\n\n\n\n This page will be invoked when the user does not exist in the\n LifeRay database, but gets authenticated from the OAuth Server.\n\n\n\n\n\nTypically, create a LifeRay page with the name \n/no-such-user-found\n,\n  or redirect to the LifeRay registration page uri like that:\n\n\n\n\ngluu.openidconnect.no.such.user.redirect.url=http://localhost:8080/no-such-user-found\n\n\n\n\nRestart the LifeRay server after editing the file\n\nportal-ext.properties\n.\n\n\nLogin Using the LifeRay Front End\n#\n\n\n\n\n\n\nServer Bootup\n\n\n\n\nOnce the LifeRay server is restarted, open your browser and\n  navigate to the uri \nhttp://localhost:8080\n.\n\n\n\n\n\n\n\n\nLogin uri\n\n\n\n\nOnce the LifeRay page successfully loaded navigate to the OpenID\n  connect page at \nhttp://localhost:8080/openidconnect/login\n.\n\n\n\n\n\n\n\n\nNote: you can edit the theme code, and link to the login uri as\n\nhttp://localhost:8080/openidconnect/login\n. In result the user will\nalways redirect to the OAuth server for authentication.\n\n\n\n\nOAuth authentication\n\n\nThe LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:\n\n\n\n\n\n\n\n\n\n\n\n\nRequest for permission\n\n\nThis screen can be configured depending upon your OAuth Server\n  implementation.\n\n\n\n\n\n\n\n\n\n\n\n\nOAuth callback (user auto-login to LifeRay)\n\n\nAfter a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:\n\n\n\n\n\n\n\n\nhttp://localhost:8080/openidconnect/callback?code=xxx`\n\n\n\n\nThis will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.\n\n\n\n\nUsing OpenID Connect to authenticate a person in Java\n#\n\n\nThe \nOpenID Connect\n Protocol offers Java\ndevelopers a way to authenticate a person at any Internet domain that\nsupports the standard. To accomplish this, the domain must provide a way\nto register clients--the website and mobile applications that use the\nauthentication API offered by the domain.\n\n\nDiscovery\n#\n\n\nDiscovery is the first step! Luckily, its super-easy! All you have to \ndo is make a get request to\n\nhttps://{domain}/.well-known/openid-configuration\n.\n\n\nThis will return a JSON object, as described in the\n\nspecification\n.\nFor example, you can see Gluu's OpenID Connect discovery\n\nurl\n.\n\n\nThis will tell you everything you need to know about this OpenID Connect\nprovider, like what are the endpoints (URLs), what crypto is supported,\nand what user claims can you ask for.\n\n\nAn \nexample\n\nof a Discovery Request, using the oxAuth RP library.\n\n\nClient Registration\n#\n\n\nIn SAML, the website was called a \"Service Provider.\" In OpenID Connect,\nthe website (or mobile application) is called a \"Client\". Clients can be\nregistered manually by the OP, but more frequently, clients use the\n\nDynamic Registration\nAPI\n to\nautomate the process.\n\n\nObtaining the id_token\n#\n\n\nAfter your client is registered, it is time to get down to business.\nOpenID Connect offers two common workflows for authentication: basic\n(where the person is using a browser, and can be re-directed) and\nimplicit where the client sends the credentials, including the secret.\nThere is a useful implements guide for\n\nbasic\n and\n\nimplicit\n.\n\n\nLogout\n#\n\n\nOpenID Connect defines a mechanism for \nSession\nManagement\n.\nThe idea is that JavaScript in a web tab can detect that another tab has\nlogged out. One detection of a logout event, the Web application can\ncleanup sessions in any backend systems as necessary. It is not 100%\neffective. If the tab is closed when the logout occurs in another tab,\nthe event may not be detected, and the backend systems are advised to\ntimeout sessions.\n\n\nUsing OpenID Connect from JavaScript\n#\n\n\nSee \nOpenID Connect plugin for Passport\n for further details.",
            "title": "mod_auth_openidc"
        },
        {
            "location": "/integration/openidc-rp/#mod_auth_openidc-rp-integration",
            "text": "",
            "title": "mod_auth_openidc RP Integration"
        },
        {
            "location": "/integration/openidc-rp/#basic-web-server-installation",
            "text": "Before you can install mod_auth_openidc, you need to have an Apache\nHTTPD server running with SSL enabled.",
            "title": "Basic Web Server Installation"
        },
        {
            "location": "/integration/openidc-rp/#apache-web-server",
            "text": "It is assumed that all the hostnames will be dns resolvable. If not, \nthen add the entries in  /etc/hosts  file on both the web server\nand Gluu Server.   If you don't have the Apache HTTPD server installed, use apt-get\nto install the Ubuntu standard distribution:  # apt-get install apache2\n# service apache2 start",
            "title": "Apache Web Server"
        },
        {
            "location": "/integration/openidc-rp/#ssl-configuration",
            "text": "The SSL Module is necessary for the Apache OpenID Connect Module. Please \nuse the following commands to activate the  ssl module .  # a2enmod ssl  The next step is to create a self-signed SSL Certificate.   Create a directory to put the generate the ssl certificate   # mkdir /etc/apache2/ssl`\n# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt   Answer the questions that are asked. A template is given below       Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:TX\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Acme Inc.\n    Organizational Unit Name (eg, section) []:\n    Common Name (e.g. server FQDN or YOUR name) []:www.mydomain.com\n    Email Address []:help@mydomain.com",
            "title": "SSL Configuration"
        },
        {
            "location": "/integration/openidc-rp/#configure-apache-to-use-ssl",
            "text": "This section will guide you through the steps to configure apache to \nuse the SSL module   Open the  default-ssl.conf  file   # vim /etc/apache2/sites-available/default-ssl.conf`    Update the certificate locations with the newly created certificates  /etc/apache2/ssl/apache.key  and  /etc/apache2/ssl/apache.crt    Activate the SSL Virtual Host and CGI    # a2ensite default-ssl.conf\n# a2enmod cgid\n# service apache2 restart  At this point, its a good time to test to make sure SSL and CGI are \nworking. Point your browser at \nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi\nYou should see a list of current environment variables.",
            "title": "Configure Apache to use SSL"
        },
        {
            "location": "/integration/openidc-rp/#configuration-of-mod_auth_openidc",
            "text": "",
            "title": "Configuration of mod_auth_openidc"
        },
        {
            "location": "/integration/openidc-rp/#installation",
            "text": "mod_auth_openidc  module depends on the Ubuntu package  libjansson4 :   # apt-get install libjansson  You'll also need the mod_auth_openidc and libjose packages which can \nbe downloaded from the  Releases Page .  For example, at this time the current release is 2.1.3, so the command would be:  # wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb   Note  Get the latest packages here: https://github.com/pingidentity/mod_auth_openidc/releases   Note, if you like to build from source, you can clone the project at  Github Page  Now you can enable the module  # sudo a2enmod auth_openidc\n# sudo service apache2 restart",
            "title": "Installation"
        },
        {
            "location": "/integration/openidc-rp/#client-registration",
            "text": "There are two methods for client registration:   Dynamic Client Registration  Manual Client Registration   For this example, let's create the client manually in the Gluu Server.\nWhen you add the client, use the following parameters:  Name: mod_auth_openidc\nClient Secret: something-sufficiently-unguessable\nApplication Type: Web\nPre-Authorization: Enabled\nlogin uri: https://www.mydomain.com/callback\nSubject Type: Public\nScopes: openid, profile, email\nResponse Types: code  Make a note of the  client_secret  (you won't get to see it again)! You'll\nalso need the  client_id  for the next step.",
            "title": "Client Registration"
        },
        {
            "location": "/integration/openidc-rp/#install-cgi-script",
            "text": "This cgi-script makes for a good test page!   # vi /usr/lib/cgi-bin/printHeaders.cgi  Then paste in this code  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><Head><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"  Then you'll need to make the script executable by the Apache2  # chown www-data:www-data /usr/lib/cgi-bin/printHeaders.cgi\n# chmod ug+x /usr/lib/cgi-bin/printHeaders.cgi",
            "title": "Install CGI script"
        },
        {
            "location": "/integration/openidc-rp/#configuring-the-apache-virtualhost",
            "text": "You are almost done! You'll need to configure mod_auth_openidc to\nprotect your server.  # vi /etc/apache2/sites-available/default-ssl.conf  Add the following right under  <VirtualHost _default_:443>  OIDCProviderMetadataURL https://idp.mydomain.com/.well-known/openid-configuration\nOIDCClientID (client-id-you-got-back-when-you-added-the-client)\nOIDCClientSecret (your-client-secret)\nOIDCRedirectURI https://www.mydomain.com/callback\nOIDCResponseType code\nOIDCScope \"openid profile email\"\nOIDCSSLValidateServer Off\nOIDCCryptoPassphrase (a-random-seed-value)\nOIDCPassClaimsAs environment\nOIDCClaimPrefix USERINFO_\nOIDCPassIDTokenAs payload\n<Location \"/\">\n    Require valid-user\n    AuthType openid-connect\n</Location>  Then restart Apache to effect the changes  # service apache2 restart  The most confusing part here is the  OIDCRedirectURI --don't set this\nto a path used by your server. The apache-filter uses the redirect_uri \nto process the response from the OpenID Provider (Gluu Server).   Now you're ready to test. Open your web browser, and point it at  https://www.mydomain.com/cgi-bin/printHeaders.cgi    If you're not logged in already, you should be redirected to \nthe authentication page. If you are logged in, you should just see\nan html page with the  REMOTE_USER  variable populated. Also\ncheck out the  OIDC_id_token_payload  and all the claims for  USERINFO_",
            "title": "Configuring the Apache VirtualHost"
        },
        {
            "location": "/integration/openidc-rp/#installation_1",
            "text": "We assume that all the hostnames will be dns resolvable. If not, then\nadd the according entries in  /etc/hosts , please.",
            "title": "Installation"
        },
        {
            "location": "/integration/openidc-rp/#add-epel-repository",
            "text": "Run the following command to  Add EPEL Repo .   # rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm",
            "title": "Add EPEL Repository"
        },
        {
            "location": "/integration/openidc-rp/#apache-web-server_1",
            "text": "To setup  Apache2 SSL , run the following commands:   Note  If the hiredis package is not found by the  yum  command, please download it manually from  this page  and install it.   # yum install httpd mod_ssl\n# yum install curl hiredis jansson",
            "title": "Apache Web Server"
        },
        {
            "location": "/integration/openidc-rp/#configure-ssl-module",
            "text": "This section will guide you to create SSL certificates.\nUse the following commands to crete a  directory and generate the certificates.  # mkdir /etc/httpd/ssl\n# openssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key  You will be prompted to enter some values such as company name, country etc. Please enter them and your certificate will be ready. A template is given below      Country Name (2 letter code) [XX]:US\n    State or Province Name (full name) []:TX\n    Locality Name (eg, city) [Default City]:Austin\n    Organization Name (eg, company) [Default Company Ltd]:Gluu\n    Organizational Unit Name (eg, section) []:\n    Common Name (eg, your name or your server's hostname) []:modauth-centos.info\n    Email Address []:support@gluu.org  The next step is to configure Apache to use the certificates and use the following command to edit the  ssl.conf  file.   # vi /etc/httpd/conf.d/ssl.conf  The important part of the configuration is to enter the path to the created SSL certificates. The example is given below.  Note:  Please make sure to use the correct server name in the configuration file.      SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org  Restart Apache Server and you are done configuring the SSL Module. Use the command below to restart the Apache Server.  # service httpd restart   Note  The latest version of the apache OpenID Connect module is available from  this page   The latest package for the apache module might have multiple dependencies which must be installed first.  Run the following command to install the  mod_auth_openidc  module:  rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm   Note  If there are any difficulties installing  hiredis  and  jansson ,   try to update the package database of your system using the command below.  # yum upgrade",
            "title": "Configure SSL Module"
        },
        {
            "location": "/integration/openidc-rp/#load-authentication-module",
            "text": "Please make sure that the following shared-object file exists by running the following command:  ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so",
            "title": "Load Authentication Module"
        },
        {
            "location": "/integration/openidc-rp/#install-cgi-script_1",
            "text": "The test page is made using the cgi-script. Please use the following command to create the script.  # vi /var/www/cgi-bin/printHeaders.cgi  Please paste the following code to prepare the script  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><Head><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\n    print \"</BODY></HTML>\"  The next step is to make the script executable by HTTPD  # chown apache:apache /var/www/cgi-bin/printHeaders.cgi\n# chmod ug+x /var/www/cgi-bin/printHeaders.cgi",
            "title": "Install CGI Script"
        },
        {
            "location": "/integration/openidc-rp/#client-registration_1",
            "text": "There are two methods for client registration:   Dynamic Client Registration  Manual Client Registration   You can use any of the methods to register the client.\nFor this example, let's create the client manually in the Gluu Server.\nPlease use the following parameters to create the client:  Name: mod_auth_openidc\nClient Secret: something-sufficiently-unguessable\nApplication Type: Web\nPre-Authorization: Enabled\nlogin uri: https://www.mydomain.com/callback\nSubject Type: Public\nScopes: openid, profile, email\nResponse Types: code   Note  The  client_secret  should be noted after creating the client in Gluu Server as it is used later.",
            "title": "Client Registration"
        },
        {
            "location": "/integration/openidc-rp/#configure-the-apache-virtualhost",
            "text": "The apache module is confgured in the defautl ssl configuration file. Please use the command below to open the file  # vi /etc/httpd/conf.d/ssl.conf   Please add the following at the bottom of the file  OIDCProviderMetadataURL https://idp.mydomain.com/.well-known/openid-configuration\nOIDCClientID (client-id-you-got-back-when-you-added-the-client)\nOIDCClientSecret (your-client-secret)\nOIDCRedirectURI https://www.mydomain.com/callback\nOIDCResponseType code\nOIDCScope \"openid profile email\"\nOIDCSSLValidateServer Off\nOIDCCryptoPassphrase (a-random-seed-value)\nOIDCPassClaimsAs environment\nOIDCClaimPrefix USERINFO_\nOIDCPassIDTokenAs payload\n<Location \"/\">\n    Require valid-user\n    AuthType openid-connect\n</Location>   Warning  Please remember to populate the  OIDCRedirectURI  with a value that is not used by the server. The apache-filter uses the redirect_uri to process the response from the OpenID Provider (Gluu Server).   Please restart the HTTPD server for the changes to take effect  # service httpd restart  Now you're ready to test. Open your web browser, and point it at\nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi`",
            "title": "Configure the Apache Virtualhost"
        },
        {
            "location": "/integration/openidc-rp/#oxray",
            "text": "LifeRay  OpenID Connect plugin to authenticate users using\nGluu IdP.",
            "title": "oxRay"
        },
        {
            "location": "/integration/openidc-rp/#overview",
            "text": "The oxAuth LifeRay plugin is used to authenticate and auto-log users\nfrom Gluu Server into  LifeRay  with the same credentials. It\nis built on top of oxAuth, the OpenID Connect provider by Gluu.  The oxAuth plugin intercepts any attempt to login from anywhere in the\nLifeRay and redirects the request and the user to an oxAuth server where\nthe identification takes place, actually. If the user has authorized the\nserver to share some of his basic information with the oxAuth plugin,\nthe user will be redirected back to the LifeRay CMS, and logged in,\nautomatically.  The goal of this project is to use the LifeRay CMS as the basis for an\norganizational personal data store service.  Note: This plugin does not support auto-user creation from information\nsupplied by the oxAuth Plugin. Instead, it can be implemented by\nextending the plugin.",
            "title": "Overview"
        },
        {
            "location": "/integration/openidc-rp/#deployment",
            "text": "The plugin is provided in two variants-- Maven  and  Ant .\nYou can either use Maven or the LifeRay plugin SDK to build and deploy\nthis plugin as a standard LifeRay hot deployable WAR file.",
            "title": "Deployment"
        },
        {
            "location": "/integration/openidc-rp/#deploying-war-file-using-maven",
            "text": "This requires a prerequisite: make sure that you have  Maven \ninstalled on your system to build this plugin from source.    Checkout the Maven source from the [oxRay Repository][https://github.com/GluuFederation/oxRay/tree/master/6.2.x/maven/gluu-openid-connect-hook].    Open the file  pom.xml  in  gluu-openid-connect-hook , and update\nyour local LifeRay Tomcat bundle path. This is required for building the\nWAR file and deploying to the LifeRay Tomcat bundle.      Run the following command in the  gluu/6.2.x/maven/gluu-openid-connect-hook  \ndirectory:   mvn clean install package liferay:deploy  This will take a few seconds to download the dependency  jar  files, and\ngenerate the LifeRay-compiled deployable WAR file. It will be placed\nwithin your  <liferay-bundle-folder>/deploy  directory, and the hot\ndeployable process will start.",
            "title": "Deploying WAR file using Maven"
        },
        {
            "location": "/integration/openidc-rp/#using-liferay-plugin-sdk-with-ant",
            "text": "This requires a prerequisite: we assume that you have the plugin SDK\nboth installed and configured with LifeRay bundle.    Checkout the gluu-openid-connect-hook plugin source from the\nrepository, and place these files in your local directory for the plugin\nSDK. Usually, this is  liferay-plugins-sdk-6.2.0-ce-ga1/hooks .    Run the following command in the folder  liferay-plugins-sdk-6.2.0-ce-ga1/hooks/gluu-openid-connect-hook :    ant clean deploy",
            "title": "Using LifeRay Plugin SDK With Ant"
        },
        {
            "location": "/integration/openidc-rp/#using-binary-from-repository",
            "text": "You can also download a compiled binary as a standard LifeRay deployable\nWAR file from the following location:  oxRay LifeRay Deployable War File  Copy this WAR file in your LifeRay bundle. Usually, this is located at liferay-portal-6.2.0-ce-ga1/deploy .  Once the plugin is deployed as a WAR file either using Maven or Ant, you\nwill see the following success message in your LifeRay Tomcat server:",
            "title": "Using Binary From Repository"
        },
        {
            "location": "/integration/openidc-rp/#client-registration_2",
            "text": "A LifeRay application needs to be registered with the Authorization\nserver before initiating an authentication request/response with OAuth\nIdP server.  The following steps are necessary to obtain both a client id and a\nclient secret. These data will be used within the LifeRay portal\nproperties.   Go to the location  https://seed.gluu.org/oxauth-rp/home.seam .  You will see the Dynamic Client Registration Section.  Enter the Registration Endpoint uri, for example https://idp.example.org/oxauth/seam/resource/restv1/oxauth/authorize .  You can derive this uri from your IdP auto-discovery uri which is\nlike that:  https://<Your IDP Server Domain>/.well-known/openid-configuration .  You can search for the registration endpoint, and copy that uri here.    Enter the redirect uris as  http://localhost:8080/openidconnect/callback :  Replace your domain name with  localhost:8080  This will be your LifeRay handler for logging a user into LifeRay,\nautomatically, when a redirect comes back from the OAuth server.    Select the Response Types: CODE  Select the Application Type: WEB  For development purposes use: NATIVE (if you are testing on a local\nmachine with  localhost:8080  domain)  Enter Client Name: LifeRay App (you can choose any name here).  All other options can be left as they are--please see the attached\nscreenshot:     Click  Submit , and both the following  Registration Request  and Registration Response  will be displayed:     Save the Registration Response to your local system. The parameters client_id  and  client_secret  are used in LifeRay when configuring portal-ext.properties .",
            "title": "Client Registration"
        },
        {
            "location": "/integration/openidc-rp/#modifying-portalproperties",
            "text": "It is necessary to modify  portal-ext.properties  file to reflect oxAuth\nserver client credentials and server's URL. It can be accomplished by\nnavigating into the  liferay-portal-6.2.0-ce-ga1  folder, where the file portal-ext.properties  is stored.  Note: To either activate or deactivate the oxAuth plugin put the value true  (to activate) or  false  (to deactivate), respectively.  gluu.openidconnect.auth.enabled=true   oxAuth client ID and client secret:   gluu.openidconnect.client.id=@!1111!0008!51CE.1E59\ngluu.openidconnect.client.secret=65777eb7-87a8-4d60-9dbc-d31d43971f2b   OAuth server domain   gluu.openidconnect.idp.domain=https://idp.gluu.org`   OAuth server auto discovery uri   gluu.openidconnect.url.discovery=https://idp.gluu.org/.well-known/openid-configuration   Your OAuth server logout uri (typically, this will be used to logout a\nuser from OAuth when a user logs out from LifeRay)   gluu.openidconnect.idp.logout=https://idp.gluu.org/identity/logout   LifeRay server callback uri that will be used as a handling response\nby the OAuth server after authentication:  replace the  localhost:8080  with your LifeRay domain name:   gluu.openidconnect.client.redirect.url=http://localhost:8080/openidconnect/callback   This page will be invoked when the user does not exist in the\n LifeRay database, but gets authenticated from the OAuth Server.   Typically, create a LifeRay page with the name  /no-such-user-found ,\n  or redirect to the LifeRay registration page uri like that:   gluu.openidconnect.no.such.user.redirect.url=http://localhost:8080/no-such-user-found  Restart the LifeRay server after editing the file portal-ext.properties .",
            "title": "Modifying portal.properties"
        },
        {
            "location": "/integration/openidc-rp/#login-using-the-liferay-front-end",
            "text": "Server Bootup   Once the LifeRay server is restarted, open your browser and\n  navigate to the uri  http://localhost:8080 .     Login uri   Once the LifeRay page successfully loaded navigate to the OpenID\n  connect page at  http://localhost:8080/openidconnect/login .     Note: you can edit the theme code, and link to the login uri as http://localhost:8080/openidconnect/login . In result the user will\nalways redirect to the OAuth server for authentication.   OAuth authentication  The LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:       Request for permission  This screen can be configured depending upon your OAuth Server\n  implementation.       OAuth callback (user auto-login to LifeRay)  After a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:     http://localhost:8080/openidconnect/callback?code=xxx`  This will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.",
            "title": "Login Using the LifeRay Front End"
        },
        {
            "location": "/integration/openidc-rp/#using-openid-connect-to-authenticate-a-person-in-java",
            "text": "The  OpenID Connect  Protocol offers Java\ndevelopers a way to authenticate a person at any Internet domain that\nsupports the standard. To accomplish this, the domain must provide a way\nto register clients--the website and mobile applications that use the\nauthentication API offered by the domain.",
            "title": "Using OpenID Connect to authenticate a person in Java"
        },
        {
            "location": "/integration/openidc-rp/#discovery",
            "text": "Discovery is the first step! Luckily, its super-easy! All you have to \ndo is make a get request to https://{domain}/.well-known/openid-configuration .  This will return a JSON object, as described in the specification .\nFor example, you can see Gluu's OpenID Connect discovery url .  This will tell you everything you need to know about this OpenID Connect\nprovider, like what are the endpoints (URLs), what crypto is supported,\nand what user claims can you ask for.  An  example \nof a Discovery Request, using the oxAuth RP library.",
            "title": "Discovery"
        },
        {
            "location": "/integration/openidc-rp/#client-registration_3",
            "text": "In SAML, the website was called a \"Service Provider.\" In OpenID Connect,\nthe website (or mobile application) is called a \"Client\". Clients can be\nregistered manually by the OP, but more frequently, clients use the Dynamic Registration\nAPI  to\nautomate the process.",
            "title": "Client Registration"
        },
        {
            "location": "/integration/openidc-rp/#obtaining-the-id_token",
            "text": "After your client is registered, it is time to get down to business.\nOpenID Connect offers two common workflows for authentication: basic\n(where the person is using a browser, and can be re-directed) and\nimplicit where the client sends the credentials, including the secret.\nThere is a useful implements guide for basic  and implicit .",
            "title": "Obtaining the id_token"
        },
        {
            "location": "/integration/openidc-rp/#logout",
            "text": "OpenID Connect defines a mechanism for  Session\nManagement .\nThe idea is that JavaScript in a web tab can detect that another tab has\nlogged out. One detection of a logout event, the Web application can\ncleanup sessions in any backend systems as necessary. It is not 100%\neffective. If the tab is closed when the logout occurs in another tab,\nthe event may not be detected, and the backend systems are advised to\ntimeout sessions.",
            "title": "Logout"
        },
        {
            "location": "/integration/openidc-rp/#using-openid-connect-from-javascript",
            "text": "See  OpenID Connect plugin for Passport  for further details.",
            "title": "Using OpenID Connect from JavaScript"
        },
        {
            "location": "/integration/google/",
            "text": "Using SAML To Get SSO With Google Apps\n#\n\n\nGoogle Apps will work as a Service Provider (SP) and we need to\n\"introduce\" Gluu Server with Google Apps as Gluu Server so that it can\nwork as an Identity Provider (IDP).\n\n\nNOTE: It is highly recommended to use Google staging apps setup before\nGoogle production migration. If you have any question or confusion,\nplease feel free to let us know.\n\n\nWe need to configure Google Apps and Gluu Server so that both parties\ncan talk to each other.\n\n\nConfiguring Google Apps With Google Dashboard:\n#\n\n\n\n\nLogin to dashboard.\n\n\n\n\n\n\n\n\n\n\nFrom the list of options choose the \"Security\" tab.\n\n\n\n\n\n\nA new page will open. Select \nSet up single sign-on(SSO)\n from the\noptions.\n\n\n\n\n\n\n\n\n\n\nFinally, the Single Sign-On setting page will appear. \n\n\n\n\n\n\nThis page contains a number of selection, and entry fields.\n\n\n\n\n\n\nSetup SSO with third party Identity Provider\n: This\n     refers to your Gluu Server instance. Enable this box.\n\n\n\n\n\n\nSign-in Page URL\n: Enter the uri of the sign-in page, for\n     example \nhttps://idp_hostname/idp/profile/SAML2/Redirect/SSO\n.\n\n\n\n\n\n\nSign-out Page URL\n: Enter the uri of the logout page, for\n     example \nhttps://idp_hostname/idp/logout.jsp\n.\n\n\n\n\n\n\nChange Password URL\n: The uri an user is redirected if he wants\n     to change his password. It is recommended that an organization \n     provides such a link for its end users.\n\n\n\n\n\n\nVerification certificate\n: Upload the SAML certificate of your\n     Gluu Server. The SAML certificates are available in the \n/etc/certs\n folder inside the Gluu Server \nchroot\n environment.\n\n\n\n\n\n\nUse a domain specific issuer\n: Enable this box to use a\n     domain-specific issuer.\n\n\n\n\n\n\nSave your data using the \nSave changes\n button on the lower right\n     of the page.\n\n\n\n\n\n\nIf you want to know more about Google SSO,\n\nthis\n helps you.\n\n\nConfiguration In Gluu Server:\n#\n\n\nNow we need to create a Trust Relationship in Gluu Server. Trust\nRelationships are created so that the IdP can authorize/authenticate the\nuser to the service provider (SP). In this specific case, the SP is\nGoogle Apps, and the protocol used is SAML.\n\n\nIn order to create a Trust Relationship, we need to grab the metadata of\nGoogle Apps. This metadata can be collected from Google. It's generally\nspecific to an organization account. The following is a template of the Google metadata.\n\n\n<EntityDescriptor entityID=\"google.com/a/domain.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n<SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n<AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\nLocation=\"https://www.google.com/a/domain.com/acs\" ></AssertionConsumerService>\n</SPSSODescriptor>\n</EntityDescriptor>\n\n\n\n\nGot the metadata? Great, we are ready to move forward. \n\n\n\n\n\n\nCreate Trust Relationship for Google Apps: \n\n\n\n\n\n\nHow to create a trust relationship can be found \nhere\n. We need to follow the \"File\" method for Google Apps trust relationship.\n\n\n\n\nRequired attributes: Generally a nameID attributes is required. \nHere\n is how you can create custom nameID in Gluu Server. \n\n\nRelying Party Configuration: Yes, SAML2SSO should be configured. \n\n\nincludeAttributeStatement: check\n\n\nassertionLifetime: default \n\n\nassertionProxyCount: default\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never",
            "title": "Google SSO"
        },
        {
            "location": "/integration/google/#using-saml-to-get-sso-with-google-apps",
            "text": "Google Apps will work as a Service Provider (SP) and we need to\n\"introduce\" Gluu Server with Google Apps as Gluu Server so that it can\nwork as an Identity Provider (IDP).  NOTE: It is highly recommended to use Google staging apps setup before\nGoogle production migration. If you have any question or confusion,\nplease feel free to let us know.  We need to configure Google Apps and Gluu Server so that both parties\ncan talk to each other.",
            "title": "Using SAML To Get SSO With Google Apps"
        },
        {
            "location": "/integration/google/#configuring-google-apps-with-google-dashboard",
            "text": "Login to dashboard.      From the list of options choose the \"Security\" tab.    A new page will open. Select  Set up single sign-on(SSO)  from the\noptions.      Finally, the Single Sign-On setting page will appear.     This page contains a number of selection, and entry fields.    Setup SSO with third party Identity Provider : This\n     refers to your Gluu Server instance. Enable this box.    Sign-in Page URL : Enter the uri of the sign-in page, for\n     example  https://idp_hostname/idp/profile/SAML2/Redirect/SSO .    Sign-out Page URL : Enter the uri of the logout page, for\n     example  https://idp_hostname/idp/logout.jsp .    Change Password URL : The uri an user is redirected if he wants\n     to change his password. It is recommended that an organization \n     provides such a link for its end users.    Verification certificate : Upload the SAML certificate of your\n     Gluu Server. The SAML certificates are available in the  /etc/certs  folder inside the Gluu Server  chroot  environment.    Use a domain specific issuer : Enable this box to use a\n     domain-specific issuer.    Save your data using the  Save changes  button on the lower right\n     of the page.    If you want to know more about Google SSO, this  helps you.",
            "title": "Configuring Google Apps With Google Dashboard:"
        },
        {
            "location": "/integration/google/#configuration-in-gluu-server",
            "text": "Now we need to create a Trust Relationship in Gluu Server. Trust\nRelationships are created so that the IdP can authorize/authenticate the\nuser to the service provider (SP). In this specific case, the SP is\nGoogle Apps, and the protocol used is SAML.  In order to create a Trust Relationship, we need to grab the metadata of\nGoogle Apps. This metadata can be collected from Google. It's generally\nspecific to an organization account. The following is a template of the Google metadata.  <EntityDescriptor entityID=\"google.com/a/domain.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n<SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n<AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\nLocation=\"https://www.google.com/a/domain.com/acs\" ></AssertionConsumerService>\n</SPSSODescriptor>\n</EntityDescriptor>  Got the metadata? Great, we are ready to move forward.     Create Trust Relationship for Google Apps:     How to create a trust relationship can be found  here . We need to follow the \"File\" method for Google Apps trust relationship.   Required attributes: Generally a nameID attributes is required.  Here  is how you can create custom nameID in Gluu Server.   Relying Party Configuration: Yes, SAML2SSO should be configured.   includeAttributeStatement: check  assertionLifetime: default   assertionProxyCount: default  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never",
            "title": "Configuration In Gluu Server:"
        },
        {
            "location": "/integration/office/",
            "text": "Office 365 Integration with Gluu Server\n#\n\n\nThis guide is created to use Microsoft Office 365 Single-Sign-On with Gluu Server.\nIt is assumed that an Office 365 subscription is available/registered.\n\n\nNote:\n The attributes \nObjectGUID\n and \nIDPEmail\n are mandatory for O365 SSO. The domain of \nIDPEmail\n must match the registered domain as well.\n\n\nOffice 365 Configuration\n#\n\n\n\n\n\n\nPlease create a test user from Office365 Admin Panel\n\n   Alternatively, use \nthis doc\n to connect backend Azure Active Directory (AD) \n\n\n\n\n\n\nRegister the domain from the Office365 (O365) Admin Panel from \nSettings --> Domains\n\n\n\n\nVerify\n the domain\n\n\n\n\n\n\n\n\nRegister Gluu Server in O365\n\n\n\n\n\n\nInstall/Use Windows Server 2012 R2\n\n\n\n\n\n\nInstall and Configure\n Windows Powershell \ncmdlets\n\n\n\n\n\n\nCreate a script named \ngluu1.ps1\n with the following template changing domain, hostname of Gluu Server and Certificate\n\n\n\n\n\n\n\n\n\n\n Connect-MsolService\n\n$dom = \"company.org\"\n$url = \"https://test.gluu.org/idp/profile/SAML2/POST/SSO\"\n$uri = \"https://test.gluu.org/idp/shibboleth\"\n$logouturl = \"https://test.gluu.org/idp/logout.jsp\"\n$cert = \"Mx....SAML_cert_of_your_Gluu_Server...Tdsg9R0XO3AnBeHRtGmAA=\"\n\nSet-MsolDomainAuthentication -DomainName $dom -FederationBrandName $dom -Authentication Federated  -PassiveLogOnUri $url -SigningCertificate $cert -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol SAMLP \n\n\n\n\n\n\nRun the \ngluu.ps1\n script from Windows Server 2012 R2\n\n\n\n\nGluu Server Configuration\n#\n\n\nCustom Attributes\n#\n\n\nThe configuration begins by creating a few custom attributes named \nIDPEmail\n, \nImmutableID\n and \nobjectguid\n.\nPlease see \nthis doc\n to create custom attributes.\n\n\n\n\n\n\nIDPEmail\n Custom Attribute\n\n\n\n\n\n\n\nImmutableID\n Custom Attribute\n\n\n\n\n\n\n\nobjectguid\n Custom Attribute\n\n\n\n\n\n\n\nOpenDJ Configuration\n#\n\n\n\n\n\n\nEdit the \n100-user.ldif\n file under \n/opt/opendj/config/schema\n folder.\n\n\n\n\nModify 'objectGUID' attributeTypes like below. Keep the attribute number ( i.e. 1454676848732 ) intact for your setup and modify others like below. \n\n\n\n\n\n\n\n\nattributeTypes: ( 1454676848732 NAME 'objectGUID' SYNTAX 1.3.6.1.4.1.1466.115.121.1.5 USAGE userApplications X-ORIGIN 'gluu' ) \n\n\n\n\n* Restart OpenDJ\n\n\n\n\n\n\n\nEdit the \nattribute-resolver.xml.vm\n file under \n/opt/tomcat/conf/shibboleth2/idp\n folder\n\n\n\n\nAdd \n$attribute.name.equals('ImmutableID')\n with the existing \n($attribute.name.equals('transientId')\n to look like the snippet below\n\n\n\n\n\n\n\n\n#if(!($attribute.name.equals('transientId')or$attribute.name.equals('ImmutableID'))) \n\n\n\n\n* Add `IDPEmail` attribute definition\n\n\n\n <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"UserId\" sourceAttributeID=\"IDPEmail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" name=\"IDPEmail\" friendlyName=\"UserId\" />\n        </resolver:AttributeDefinition> \n\n\n\n\n* Add `ImmutableID` attribute definition\n\n\n\n <resolver:AttributeDefinition id=\"ImmutableID\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"objectguid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition> \n\n\n\n\nIDP configuration\n#\n\n\nThe cache refresh mechanism is used to populate the Gluu Server LDAP with data from a backend LDAP/AD. The \nobjectGUID\n attribute must be pulled from the backend data source to Gluu Server.\n\n\n\n\nEdit the \nox-ldap.properties\n to add the following\n\n\n\n\nbinaryAttributes=objectGUID,objectguid \n\n\n\n\nNote:\n'objectGUID' (the first one) is the attribute which contains binary values in the backend AD and 'objectguid' (the second one) is the Gluu Server binary attribute name which will pull value from 'objectGUID' attribute\n\n\n\n\nRestart Tomcat\n\n\n\n\nIdentity Mapping\n#\n\n\nTwo attributes require for mapping: \n\n\n\n\nIDPEmail\n\n\nobjectguid\n\n\n\n\nIDPEmail\n pull data from backend's email attrubute and \nobjectguid\n get data from backend's objectGUID. \n\n\nCreate Trust Relationship\n#\n\n\nPlease see \nthis doc\n to create trust relationships.\n\n\n\n\nConfigure Relaying Party like the following screenshot",
            "title": "Office 365"
        },
        {
            "location": "/integration/office/#office-365-integration-with-gluu-server",
            "text": "This guide is created to use Microsoft Office 365 Single-Sign-On with Gluu Server.\nIt is assumed that an Office 365 subscription is available/registered.  Note:  The attributes  ObjectGUID  and  IDPEmail  are mandatory for O365 SSO. The domain of  IDPEmail  must match the registered domain as well.",
            "title": "Office 365 Integration with Gluu Server"
        },
        {
            "location": "/integration/office/#office-365-configuration",
            "text": "Please create a test user from Office365 Admin Panel \n   Alternatively, use  this doc  to connect backend Azure Active Directory (AD)     Register the domain from the Office365 (O365) Admin Panel from  Settings --> Domains   Verify  the domain     Register Gluu Server in O365    Install/Use Windows Server 2012 R2    Install and Configure  Windows Powershell  cmdlets    Create a script named  gluu1.ps1  with the following template changing domain, hostname of Gluu Server and Certificate       Connect-MsolService\n\n$dom = \"company.org\"\n$url = \"https://test.gluu.org/idp/profile/SAML2/POST/SSO\"\n$uri = \"https://test.gluu.org/idp/shibboleth\"\n$logouturl = \"https://test.gluu.org/idp/logout.jsp\"\n$cert = \"Mx....SAML_cert_of_your_Gluu_Server...Tdsg9R0XO3AnBeHRtGmAA=\"\n\nSet-MsolDomainAuthentication -DomainName $dom -FederationBrandName $dom -Authentication Federated  -PassiveLogOnUri $url -SigningCertificate $cert -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol SAMLP    Run the  gluu.ps1  script from Windows Server 2012 R2",
            "title": "Office 365 Configuration"
        },
        {
            "location": "/integration/office/#gluu-server-configuration",
            "text": "",
            "title": "Gluu Server Configuration"
        },
        {
            "location": "/integration/office/#custom-attributes",
            "text": "The configuration begins by creating a few custom attributes named  IDPEmail ,  ImmutableID  and  objectguid .\nPlease see  this doc  to create custom attributes.    IDPEmail  Custom Attribute    ImmutableID  Custom Attribute    objectguid  Custom Attribute",
            "title": "Custom Attributes"
        },
        {
            "location": "/integration/office/#opendj-configuration",
            "text": "Edit the  100-user.ldif  file under  /opt/opendj/config/schema  folder.   Modify 'objectGUID' attributeTypes like below. Keep the attribute number ( i.e. 1454676848732 ) intact for your setup and modify others like below.      attributeTypes: ( 1454676848732 NAME 'objectGUID' SYNTAX 1.3.6.1.4.1.1466.115.121.1.5 USAGE userApplications X-ORIGIN 'gluu' )   * Restart OpenDJ    Edit the  attribute-resolver.xml.vm  file under  /opt/tomcat/conf/shibboleth2/idp  folder   Add  $attribute.name.equals('ImmutableID')  with the existing  ($attribute.name.equals('transientId')  to look like the snippet below     #if(!($attribute.name.equals('transientId')or$attribute.name.equals('ImmutableID')))   * Add `IDPEmail` attribute definition   <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"UserId\" sourceAttributeID=\"IDPEmail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" name=\"IDPEmail\" friendlyName=\"UserId\" />\n        </resolver:AttributeDefinition>   * Add `ImmutableID` attribute definition   <resolver:AttributeDefinition id=\"ImmutableID\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"objectguid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition>",
            "title": "OpenDJ Configuration"
        },
        {
            "location": "/integration/office/#idp-configuration",
            "text": "The cache refresh mechanism is used to populate the Gluu Server LDAP with data from a backend LDAP/AD. The  objectGUID  attribute must be pulled from the backend data source to Gluu Server.   Edit the  ox-ldap.properties  to add the following   binaryAttributes=objectGUID,objectguid   Note: 'objectGUID' (the first one) is the attribute which contains binary values in the backend AD and 'objectguid' (the second one) is the Gluu Server binary attribute name which will pull value from 'objectGUID' attribute   Restart Tomcat",
            "title": "IDP configuration"
        },
        {
            "location": "/integration/office/#identity-mapping",
            "text": "Two attributes require for mapping:    IDPEmail  objectguid   IDPEmail  pull data from backend's email attrubute and  objectguid  get data from backend's objectGUID.",
            "title": "Identity Mapping"
        },
        {
            "location": "/integration/office/#create-trust-relationship",
            "text": "Please see  this doc  to create trust relationships.   Configure Relaying Party like the following screenshot",
            "title": "Create Trust Relationship"
        },
        {
            "location": "/integration/salesforce/",
            "text": "SAML integration of Salesforce.com with Gluu Server\n#\n\n\nBy default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little bit complex as it\nrequires a big hostname which includes IDP's SSO link as well as SP's\nlogin uri. So we prefer SP-initiated SSO and here in this documentation\nwe are presenting a very simple SP-initiated SSO steps with Salesforce\nand Gluu Server. Still, you can go for IDP-initiated SSO if you prefer.\nFurther documentation is available at the Salesforce.com site.\n\n\nPrepare Salesforce.com\n#\n\n\n\n\nLog into Salesforce.com with your administrative account.\n\n\nClick on \nSetup\n in the right upper corner of the page.\n\n\nYou need to add a custom domain name for your Salesforce.com site if\n  you do not have any yet.\n\n\nGo to \nDomain Management\n \u2013> \nMy Domain\n\n\nAdd your custom domain\n\n\nWait for some time. Salesforce.com will register this domain name\n  for you. As an example we use \ntestgluu-dev-ed.my.salesforce.com\n here.\n\n\n\n\n\n\n\n\nRegister your Gluu Server information in Salesforce.com\n\n\nGo to \nSecurity Controls\n \u2013> \nSingle Sign On Settings\n\n\nClick \nNew\n\n\n\n\n\n\n\n\n\n\nNow you need to add the information of your Gluu Server here\n\n\n\n\nName\n: Anything, whichever is easier for you to recognize this\n   setup, i.e. \nGluu Server\n\n\nAPI Name\n: Gluu Server.\n\n\nIssuer\n: EntityID of your Gluu Server, i.e. \nhttps://test.gluu.org/idp/shibboleth\n\n\nEntityID\n: Your Salesforce.com custom domain name as chosen\n   above, i.e. \nhttps://testgluu-dev-ed.my.salesforce.com\n\n\nIdentity Provider Certificate\n: Grab your Gluu Server's SAML\n   certificate. SAML certificate can be grabbed from your Gluu Sever's\n   metadata. Save the certificate and upload it.\n\n\nRequest Signing Certificate\n: Default certificate\n\n\nRequest Signature Method\n: RSA-SHA1\n\n\nAssertion Decryption Certificate\n: Assertion not encrypted.\n\n\nSAML Identity Type\n: Assertion contains user's Salesforce.com username\n\n\nSAML Identity Location\n: Identity is in an Attribute element\n\n\nAttribute Name\n: Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available \nhere\n.\n\n\nNameID Format\n: Leave this field empty.\n\n\nIdentity Provider Login URL\n: \nhttps://test.gluu.org/idp/profile/SAML2/Redirect/SSO\n\n\nService Provider Initiated Request Binding\n: HTTP-Redirect\n\n\nHere is how our example setup looks like:\n\n\n\n\n\n\n\n\n\n\nPrepare Gluu Server\n#\n\n\n\n\nHow to create SAML trust relationship is available \nhere\n. \n\n\nGrab Salesforce.com metadata from the Salesforce.com website. There is\n  an option named 'Download Metadata':\n\n\nModify Salesforce.com metadata a bit:\n\n\nRemove \nAuthnRequestsSigned=\u201ctrue\u201d\n from metadata.\n\n\nSave metadata\n\n\n\n\n\n\nCreate Trust Relationship:\n\n\nDisplay Name\n: Anything, whichever is easier for you to recognize this trust relationship.\n\n\nDescription\n: Anything, whichever is easier for you to recognize this trust relationship\n\n\nMetadata Type\n: 'File'\n\n\nUpload salesforce's metadata (your modified one)\n\n\nReleases attributes: TransientID and Email\n\n\n'Add' this trust\n\n\nConfigure Specific Relying: It can be done from Gluu Server's GUI (named: oxTrust)\n\n\nSelect 'SAML2SSO'\n\n\nincludeAttributeStatement: Enabled\n\n\nassertionLifetime: keep the default one\n\n\nassertionProxyCount: keep the default one\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never\n\n\nSave it\n\n\n\n\n\n\n\n\n\n\n'Update' the trust relationship\n\n\nHere is how it looks like in our example setup:\n\n\n\n\n\n\nTest SSO\n#\n\n\n\n\nGo back to Salesforce.com setup\n\n\nSecurity Controls \u2013> Single Sign On Settings\n\n\nEnable 'Federated Single Sign-On Using SAML'\n\n\nGo to 'Domain Management'\n\n\nConfigure 'Authentication Configuration'\n\n\nSelect 'Gluu Server'\n\n\nSave it\n\n\nHere is how the 'Authentication Configuration' looks like:\n\n\n\n\n\n\n\n\n\n\nThis is SP-initiate SSO. So hit your Salesforce.com website link to\ninitiate the SSO.\n\n\n\n\n\n\nHere\n\nis a video link of this SSO.",
            "title": "Salesforce"
        },
        {
            "location": "/integration/salesforce/#saml-integration-of-salesforcecom-with-gluu-server",
            "text": "By default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little bit complex as it\nrequires a big hostname which includes IDP's SSO link as well as SP's\nlogin uri. So we prefer SP-initiated SSO and here in this documentation\nwe are presenting a very simple SP-initiated SSO steps with Salesforce\nand Gluu Server. Still, you can go for IDP-initiated SSO if you prefer.\nFurther documentation is available at the Salesforce.com site.",
            "title": "SAML integration of Salesforce.com with Gluu Server"
        },
        {
            "location": "/integration/salesforce/#prepare-salesforcecom",
            "text": "Log into Salesforce.com with your administrative account.  Click on  Setup  in the right upper corner of the page.  You need to add a custom domain name for your Salesforce.com site if\n  you do not have any yet.  Go to  Domain Management  \u2013>  My Domain  Add your custom domain  Wait for some time. Salesforce.com will register this domain name\n  for you. As an example we use  testgluu-dev-ed.my.salesforce.com  here.     Register your Gluu Server information in Salesforce.com  Go to  Security Controls  \u2013>  Single Sign On Settings  Click  New      Now you need to add the information of your Gluu Server here   Name : Anything, whichever is easier for you to recognize this\n   setup, i.e.  Gluu Server  API Name : Gluu Server.  Issuer : EntityID of your Gluu Server, i.e.  https://test.gluu.org/idp/shibboleth  EntityID : Your Salesforce.com custom domain name as chosen\n   above, i.e.  https://testgluu-dev-ed.my.salesforce.com  Identity Provider Certificate : Grab your Gluu Server's SAML\n   certificate. SAML certificate can be grabbed from your Gluu Sever's\n   metadata. Save the certificate and upload it.  Request Signing Certificate : Default certificate  Request Signature Method : RSA-SHA1  Assertion Decryption Certificate : Assertion not encrypted.  SAML Identity Type : Assertion contains user's Salesforce.com username  SAML Identity Location : Identity is in an Attribute element  Attribute Name : Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available  here .  NameID Format : Leave this field empty.  Identity Provider Login URL :  https://test.gluu.org/idp/profile/SAML2/Redirect/SSO  Service Provider Initiated Request Binding : HTTP-Redirect  Here is how our example setup looks like:",
            "title": "Prepare Salesforce.com"
        },
        {
            "location": "/integration/salesforce/#prepare-gluu-server",
            "text": "How to create SAML trust relationship is available  here .   Grab Salesforce.com metadata from the Salesforce.com website. There is\n  an option named 'Download Metadata':  Modify Salesforce.com metadata a bit:  Remove  AuthnRequestsSigned=\u201ctrue\u201d  from metadata.  Save metadata    Create Trust Relationship:  Display Name : Anything, whichever is easier for you to recognize this trust relationship.  Description : Anything, whichever is easier for you to recognize this trust relationship  Metadata Type : 'File'  Upload salesforce's metadata (your modified one)  Releases attributes: TransientID and Email  'Add' this trust  Configure Specific Relying: It can be done from Gluu Server's GUI (named: oxTrust)  Select 'SAML2SSO'  includeAttributeStatement: Enabled  assertionLifetime: keep the default one  assertionProxyCount: keep the default one  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never  Save it      'Update' the trust relationship  Here is how it looks like in our example setup:",
            "title": "Prepare Gluu Server"
        },
        {
            "location": "/integration/salesforce/#test-sso",
            "text": "Go back to Salesforce.com setup  Security Controls \u2013> Single Sign On Settings  Enable 'Federated Single Sign-On Using SAML'  Go to 'Domain Management'  Configure 'Authentication Configuration'  Select 'Gluu Server'  Save it  Here is how the 'Authentication Configuration' looks like:      This is SP-initiate SSO. So hit your Salesforce.com website link to\ninitiate the SSO.    Here \nis a video link of this SSO.",
            "title": "Test SSO"
        },
        {
            "location": "/integration/dropbox/",
            "text": "Dropbox SSO with Gluu Server\n#\n\n\nThis document is a step-by-step guide to setting up Dropbox SSO in Gluu Server.\nThis SSO requires setting a custom \nnameid\n called \nemailnid\n.\n\n\nCustom NameID\n#\n\n\nPlease see \nthis doc\n on how to create custom attributes.\n\n\nThe new attribute screen should look like the screenshot below\n\n\n\nThe custom \nnameid\n needs to be defined in the \nattribute-resolver\n template file.\n\n\n\n\n\n\nPlease edit the \nattribute-resolver.xml.vm\n file  under the \n/opt/tomcat/conf/shibboleth2/idp\n folder\n\n\n\n\n\n\nAdd the \n$attribute.name.equals('emailnid')\n with the existing \n#if( ! ($attribute.name.equals('transientId')\n to look like the snippet below\n\n\n\n\n\n\n#if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('emailnid') ) ) \n\n\n\n\n\n\nAdd \nnameid\n definition \n\n\n\n\n <resolver:AttributeDefinition id=\"emailnid\"\n                                xsi:type=\"Simple\"\n                                xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                sourceAttributeID=\"mail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />\n</resolver:AttributeDefinition> \n\n\n\n\n\n\nAdd \nemailAddress\n in Principal Connector\n\n\n\n\n <resolver:PrincipalConnector xsi:type=\"pc:Transient\" id=\"saml2Transient\" nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" /> \n\n\n\n\n\n\nRestart Tomcat service\n\n\n\n\nTrust Relationship\n#\n\n\nPlease see \nthis doc\n to create trust relationship and fill up the form with the following info\n\n\nThe metadata for Dropbox is necessary to create trust relationship. Please use the following snippet so create the \ndropbox_metadata.xml\n.\n\n\n <EntityDescriptor entityID=\"Dropbox\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n        <AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://www.dropbox.com/saml_login\" />\n    </SPSSODescriptor>\n</EntityDescriptor> \n\n\n\n\n\n\nDisplay Name: Dropbox\n\n\nDescription: External SP / File method\n\n\nMetadata Type: File\n\n\nSP Metadata File: Upload the 'dropbox_metadata.xml' which you just created\n\n\nConfigure Specific RelyiningParty: Yes\n\n\n\n\nsignResponses: conditional\nsignAssertions: never\nsignRequests: conditional\nencryptAssertions: never\nencryptNameIds: never\n\n\n\n\n\n\n\n\nReleased attribute: emailnid\n\n\n\n\n\nConfigure Gluu Server as IdP in Dropbox\n#\n\n\n\n\nLog into Dropbox\n\n\nClick on \nAdmin Console\n\n\nClick \nAuthentication\n\n\nClick on the checkbox labeled \nEnable single-sign-on\n\n\n\n\nOptional/Required according to necessity\n\n\n\n\n\n\nSign in URL\n\nhttps://<hostname_of_Gluu_server>/idp/profile/SAML2/Redirect/SSO\n\n\n\n\n\n\nX.509 certificate \n\n\n\n\n\n\n\n\n\n\n    Get `shibIDP.crt` from Gluu Server `chroot` environment under `/etc/certs/` folder and upload it\n\n\n\n\n\n\n\n\nSave configuration\n\n\n\n\nTest SSO\n#\n\n\n\n\n\n\nPlease go to https://www.dropbox.com and click on the \nSign In\n button\n\n\n\n\n\n\nIf the account is configured for SSO, then a screen similar to the screenshot below will appear after entering the email address.\n\n\n\n\n\n\n\nClick \nContinue\n and the website will redirect to Gluu Server for authentication.",
            "title": "Dropbox"
        },
        {
            "location": "/integration/dropbox/#dropbox-sso-with-gluu-server",
            "text": "This document is a step-by-step guide to setting up Dropbox SSO in Gluu Server.\nThis SSO requires setting a custom  nameid  called  emailnid .",
            "title": "Dropbox SSO with Gluu Server"
        },
        {
            "location": "/integration/dropbox/#custom-nameid",
            "text": "Please see  this doc  on how to create custom attributes.  The new attribute screen should look like the screenshot below  The custom  nameid  needs to be defined in the  attribute-resolver  template file.    Please edit the  attribute-resolver.xml.vm  file  under the  /opt/tomcat/conf/shibboleth2/idp  folder    Add the  $attribute.name.equals('emailnid')  with the existing  #if( ! ($attribute.name.equals('transientId')  to look like the snippet below    #if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('emailnid') ) )    Add  nameid  definition     <resolver:AttributeDefinition id=\"emailnid\"\n                                xsi:type=\"Simple\"\n                                xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                sourceAttributeID=\"mail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />\n</resolver:AttributeDefinition>    Add  emailAddress  in Principal Connector    <resolver:PrincipalConnector xsi:type=\"pc:Transient\" id=\"saml2Transient\" nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />    Restart Tomcat service",
            "title": "Custom NameID"
        },
        {
            "location": "/integration/dropbox/#trust-relationship",
            "text": "Please see  this doc  to create trust relationship and fill up the form with the following info  The metadata for Dropbox is necessary to create trust relationship. Please use the following snippet so create the  dropbox_metadata.xml .   <EntityDescriptor entityID=\"Dropbox\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n        <AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://www.dropbox.com/saml_login\" />\n    </SPSSODescriptor>\n</EntityDescriptor>    Display Name: Dropbox  Description: External SP / File method  Metadata Type: File  SP Metadata File: Upload the 'dropbox_metadata.xml' which you just created  Configure Specific RelyiningParty: Yes   signResponses: conditional\nsignAssertions: never\nsignRequests: conditional\nencryptAssertions: never\nencryptNameIds: never    Released attribute: emailnid",
            "title": "Trust Relationship"
        },
        {
            "location": "/integration/dropbox/#configure-gluu-server-as-idp-in-dropbox",
            "text": "Log into Dropbox  Click on  Admin Console  Click  Authentication  Click on the checkbox labeled  Enable single-sign-on   Optional/Required according to necessity    Sign in URL https://<hostname_of_Gluu_server>/idp/profile/SAML2/Redirect/SSO    X.509 certificate           Get `shibIDP.crt` from Gluu Server `chroot` environment under `/etc/certs/` folder and upload it    Save configuration",
            "title": "Configure Gluu Server as IdP in Dropbox"
        },
        {
            "location": "/integration/dropbox/#test-sso",
            "text": "Please go to https://www.dropbox.com and click on the  Sign In  button    If the account is configured for SSO, then a screen similar to the screenshot below will appear after entering the email address.    Click  Continue  and the website will redirect to Gluu Server for authentication.",
            "title": "Test SSO"
        },
        {
            "location": "/api-guide/api/",
            "text": "ID Generation API Document\n#\n\n\nThis document outlines the API for ID Generation for Gluu Server. \nThis API Guide will discuss few API's used in Gluu Server for ID generation\n\n\nPath\n#\n\n\n/id\n\n\nOverview\n#\n\n\nThe API convention is set as \nid\n followed by \nprefix\n and \ntype\n or \n/id/{prefix}/{type}/\n.\nPlease se the following table to specify what type you are generating. The \nprefix\n is used in the \ninum to make it possible to know the type of object just by looking at the identifier.\n\n\n\n\n\n\n\n\nprefix\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n0000\n\n\npeople\n\n\nPerson object\n\n\n\n\n\n\n0001\n\n\norganization\n\n\nOrganization object\n\n\n\n\n\n\n0002\n\n\nappliance\n\n\nAppliance object\n\n\n\n\n\n\n0003\n\n\ngroup\n\n\nGroup object\n\n\n\n\n\n\n0004\n\n\nserver\n\n\nServer object\n\n\n\n\n\n\n0005\n\n\nattribute\n\n\nUser attribute (claim) object\n\n\n\n\n\n\n0006\n\n\ntRelationship\n\n\nSAML Trust Relationship object\n\n\n\n\n\n\n0008\n\n\nclient\n\n\nOAuth2 Client object\n\n\n\n\n\n\n0009\n\n\nscope\n\n\nOAuth2 Scope Object\n\n\n\n\n\n\n0010\n\n\numa-resource-set\n\n\nUMA Resource Set Object\n\n\n\n\n\n\n0011\n\n\ninterception-script\n\n\nGluu Server interception script object\n\n\n\n\n\n\n0012\n\n\nsector-identifier\n\n\nManaged Sector Identifier URI\n\n\n\n\n\n\n\n\ngenerateJsonInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nheader\n\n\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nString[Response]\n\n\ngenerateHtmlInum\n\nGET**\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n- header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nThe authorization sent as a String\n\n\nstring\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\ngenerateTextInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\nheader\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\ngenerateXmlInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n- header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n\n\n\n\n\ngenerateHtmlInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n- header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|",
            "title": "Custom ID Generation"
        },
        {
            "location": "/api-guide/api/#id-generation-api-document",
            "text": "This document outlines the API for ID Generation for Gluu Server. \nThis API Guide will discuss few API's used in Gluu Server for ID generation",
            "title": "ID Generation API Document"
        },
        {
            "location": "/api-guide/api/#path",
            "text": "/id",
            "title": "Path"
        },
        {
            "location": "/api-guide/api/#overview",
            "text": "The API convention is set as  id  followed by  prefix  and  type  or  /id/{prefix}/{type}/ .\nPlease se the following table to specify what type you are generating. The  prefix  is used in the \ninum to make it possible to know the type of object just by looking at the identifier.     prefix  type  description      0000  people  Person object    0001  organization  Organization object    0002  appliance  Appliance object    0003  group  Group object    0004  server  Server object    0005  attribute  User attribute (claim) object    0006  tRelationship  SAML Trust Relationship object    0008  client  OAuth2 Client object    0009  scope  OAuth2 Scope Object    0010  uma-resource-set  UMA Resource Set Object    0011  interception-script  Gluu Server interception script object    0012  sector-identifier  Managed Sector Identifier URI     generateJsonInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/  Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string      header   |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  String[Response]  generateHtmlInum GET** /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string    - header           Parameter  Required  Description  Data Type      Authorization  false  The authorization sent as a String  string     Response  String[Response]  Errors  generateTextInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  string     type  true  string       header      Parameter  Required  Description  Data Type      Authorization  false  string      Response  String[Response]  Errors  generateXmlInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string    - header           Parameter  Required  Description  Data Type      Authorization  false  string      Response  String[Response]  Errors  \n     \n         Status Code| Reason|\n        generateHtmlInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string    - header           Parameter  Required  Description  Data Type      Authorization  false  string      Response  String[Response]  Errors  \n     \n         Status Code| Reason|",
            "title": "Overview"
        },
        {
            "location": "/api-guide/openid-connect-api/",
            "text": "OpenId Connect API\n#\n\n\nOpenId Connect Authorization Grant\n#\n\n\nThis page provides an interface for request authorization through REST web services.\n\n\nPath\n#\n\n\n/oxauth/authorize\n\n\nrequestAuthorizationGet\n#\n\n\nGET\n \n/oxauth/authorize\n\n\nThe Authorization Endpoint performs Authentication of the end-user. This is done by sending the User Agent to the Authorization Server's Authorization Endpoint for Authentication and Authorization, using request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect.\n\n\nURL\n#\n\n\nhttp://<hostname of Gluu Server>/oxauth/authorize\n\n\nParameters\n#\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nscope\n\n            \ntrue\n\n            \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n            \nstring\n\n        \n\n        \n\n            \nresponse_type\n\n            \ntrue\n\n            \nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\n            \nstring\n\n        \n\n        \n\n            \nclient_id\n\n            \ntrue\n\n            \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n            \nstring\n\n        \n\n        \n\n            \nredirect_uri\n\n            \ntrue\n\n            \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n            \nstring\n\n        \n\n        \n\n            \nstate\n\n            \nfalse\n\n            \nOpaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.\n\n            \nstring\n\n        \n\n    \n\n        \nresponse_mode\n\n        \nfalse\n\n        \nThis parameter informs the authorization server about the mechanism to be used to return parameters from the authorization endpoint. This is not recommended if the default for response_type is requested.\n\n        \nstring\n\n    \n\n        \n\n            \nnonce\n\n            \nfalse\n\n            \nString value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n\n            \nstring\n\n        \n\n        \n\n            \ndisplay\n\n            \nfalse\n\n            \nASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap\n\n            \nstring\n\n        \n\n        \n\n            \nprompt\n\n            \nfalse\n\n            \nSpace delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account\n\n            \nstring\n\n        \n\n        \n\n            \nmax_age\n\n            \nfalse\n\n            \nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n\n            \nint\n\n        \n\n        \n\n            \nui_locales\n\n            \nfalse\n\n            \nend-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n\n            \nstring\n\n        \n\n        \n\n            \nid_token_hint\n\n            \nfalse\n\n            \nID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n            \nstring\n\n        \n\n        \n\n            \nlogin_hint\n\n            \nfalse\n\n            \nHint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion.\n\n            \nstring\n\n        \n\n        \n\n            \nacr_values\n\n            \nfalse\n\n            \nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n\n            \nstring\n\n        \n\n        \n\n            \namr_values\n\n            \nfalse\n\n            \nAMR Values\n\n            \nstring\n\n        \n\n        \n\n            \nrequest\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_uri\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_session_state\n\n            \nfalse\n\n            \nRequest session state\n\n            \nstring\n\n        \n\n        \n\n            \nsessionState\n\n            \nfalse\n\n            \nThis is an optional parameter\n\n            \nstring\n\n        \n\n        \n\n            \naccessToken\n\n            \nfalse\n\n            \nThis parameter is optinal and carries the access token for the request.\n\n            \nstring\n\n        \n\n    \n\n        \norigin_headers\n\n        \nfalse\n\n        \nThis optional token is used in custom workflows.\n\n        \nstring\n\n    \n \n        \n\n            \ncodeChallange\n\n            \nfalse\n\n            \nThis parameter allows the code to be challanced using PKCE.\n\n            \nstring\n\n        \n\n        \n\n            \ncodeChallangeMethod\n\n            \nfalse\n\n            \nThis parameter allows the use of PKCE to challange code.\n\n            \nstring\n\n    \n\n       \n\n            \nhttpRequest\n\n            \nfalse\n\n            \nThis is an optional parameter\n\n            \nstring\n\n        \n\n        \n\n            \nsecurityContext\n\n            \nfalse\n\n            \nThis is an injectable interface that provides access to security related information.\n\n            \nstring\n\n        \n\n\n\n\n\n\n\nquery\n\n\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nresponse_mode\n\n            \nfalse\n\n            \nInforms the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.\n\n            \nstring\n\n        \n\n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n302\n\n            \ninteraction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. \n\n        \n\n        \n\n            \n302\n\n            \nlogin_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. \n\n        \n\n        \n\n            \n302\n\n            \naccount_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. \n\n        \n\n        \n\n            \n302\n\n            \nconsent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_object\n    The request parameter contains an invalid Request Object. \n\n        \n\n        \n\n            \n302\n\n            \nrequest_not_supported\n    The OP does not support use of the request parameter\n\n        \n\n        \n\n            \n302\n\n            \nrequest_uri_not_supported\n    The OP does not support use of the request_uri parameter\n\n        \n\n        \n\n            \n302\n\n            \nregistration_not_supported\n    The OP does not support use of the registration parameter\n\n        \n\n        \n\n            \n400\n\n            \nThe request parameters contain an invalid option, e.g. an unusual grant type.\n\n        \n\n        \n\n            \n401\n\n            \nThe request could not be authenticated using the client_id and client_secret.\n\n        \n\n        \n\n            \n500\n\n            \nEither an internal server error occurred (e.g. opendj server is down), or the username and password \n                do not match any known user.\n            \n\n        \n\n\n\n\nrequestAuthorizationPost\n#\n\n\nPOST\n \n/oxauth/authorize\n\n\nPerforms authorization.\nThe Authorization Endpoint performs Authentication of the end-user.\n\n\nURL\n#\n\n\nhttp://<hostname of Gluu Server>/oxauth/authorize\n\n\nParameters\n#\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \nscope\n\n            \ntrue\n\n            \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n            \nstring\n\n        \n\n        \n\n            \nresponse_type\n\n            \ntrue\n\n            \nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\n            \nstring\n\n        \n\n        \n\n            \nclient_id\n\n            \ntrue\n\n            \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n            \nstring\n\n        \n\n        \n\n            \nredirect_uri\n\n            \ntrue\n\n            \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n            \nstring\n\n        \n\n        \n\n            \nstate\n\n            \nfalse\n\n            \nOpaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.\n\n            \nstring\n\n        \n\n        \n\n            \nresponse_mode\n\n            \nfalse\n\n            \nInforms the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.\n\n            \nstring\n\n        \n\n        \n\n            \nnonce\n\n            \nfalse\n\n            \nString value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n\n            \nstring\n\n        \n\n        \n\n            \ndisplay\n\n            \nfalse\n\n            \nASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap\n\n            \nstring\n\n        \n\n        \n\n            \nprompt\n\n            \nfalse\n\n            \nSpace delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account\n\n            \nstring\n\n        \n\n        \n\n            \nmax_age\n\n            \nfalse\n\n            \nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n\n            \nint\n\n        \n\n        \n\n            \nui_locales\n\n            \nfalse\n\n            \nend-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n\n            \nstring\n\n        \n\n        \n\n            \nid_token_hint\n\n            \nfalse\n\n            \nID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n            \nstring\n\n        \n\n        \n\n            \nlogin_hint\n\n            \nfalse\n\n            \nHint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion.\n\n            \nstring\n\n        \n\n        \n\n            \nacr_values\n\n            \nfalse\n\n            \nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n\n            \nstring\n\n        \n\n        \n\n            \namr_values\n\n            \nfalse\n\n            \nAMR Values\n\n            \nstring\n\n        \n\n        \n\n            \nrequest\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in section 6.1. It represents the request as a JWT whose Claims are the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_uri\n\n            \nfalse\n\n            \nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n            \nstring\n\n        \n\n        \n\n            \nrequest_session_state\n\n            \nfalse\n\n            \nRequest session state\n\n            \nstring\n\n        \n\n        \n\n            \nsession_state\n\n            \nfalse\n\n            \nSession state of this call\n\n            \nstring\n\n        \n\n        \n\n            \naccess_token\n\n            \nfalse\n\n            \nAccess token\n\n            \nstring\n\n        \n\n        \n\n            \norigin_headers\n\n            \nfalse\n\n            \nOrigin headers. Used in custom workflows.\n\n            \nstring\n\n        \n\n    \n\n        \ncode_challange\n\n        \nfalse\n\n        \nPKCE Code challange\n\n        \nstring\n\n    \n\n    \n\n        \ncode_challange_method\n\n        \nfalse\n\n        \nPKCE code challange method\n\n        \nstring\n\n    \n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n302\n\n            \ninteraction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. \n\n        \n\n        \n\n            \n302\n\n            \nlogin_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. \n\n        \n\n        \n\n            \n302\n\n            \naccount_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. \n\n        \n\n        \n\n            \n302\n\n            \nconsent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_object\n    The request parameter contains an invalid Request Object. \n\n        \n\n        \n\n            \n302\n\n            \nrequest_not_supported\n    The OP does not support use of the request parameter\n\n        \n\n        \n\n            \n302\n\n            \nrequest_uri_not_supported\n    The OP does not support use of the request_uri parameter\n\n        \n\n        \n\n            \n302\n\n            \nregistration_not_supported\n    The OP does not support use of the registration parameter\n\n        \n\n\n\n\n\n\nOpenID Connect Token Endpoint\n#\n\n\nOverview\n#\n\n\nPath\n#\n\n\n/oxauth/token\n**\n\n\nrequestAccessToken\n#\n\n\nPOST\n \n/oxauth/token\n\n\nTo obtain an Access Token, an ID Token, and optionally a Refresh Token,\nthe RP (Client) sends a Token Request to the Token Endpoint to obtain a\nToken Response.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/token\n\n\n\nParameters\n#\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ngrant_type\n\n        \ntrue\n\n        \nGrant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749].\n\n        \nstring\n\n    \n\n    \n\n        \ncode\n\n        \nfalse\n\n        \nCode which is returned by authorization endpoint (For\ngrant_type=authorization_code).\n\n        \nstring\n\n    \n\n    \n\n        \nredirect_uri\n\n        \nfalse\n\n        \nRedirection uri to which the response will be sent. This\nuri MUST exactly match one of the redirection uri values for the client\npre-registered at the OpenID Provider.\n\n        \nstring\n\n    \n\n    \n\n        \nusername\n\n        \nfalse\n\n        \nEnd-User username.\n\n        \nstring\n\n    \n\n    \n\n        \npassword\n\n        \nfalse\n\n        \nEnd-User password.\n\n        \nstring\n\n    \n\n    \n\n        \nscope\n\n        \nfalse\n\n        \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n        \nstring\n\n    \n\n    \n\n        \nassertion\n\n        \nfalse\n\n        \nAssertion.\n\n        \nstring\n\n    \n\n    \n\n        \nrefresh_token\n\n        \nfalse\n\n        \nRefresh token.\n\n        \nstring\n\n    \n\n    \n\n        \noxauth_exchange_token\n\n        \nfalse\n\n        \noxauth_exchange_token.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_id\n\n        \nfalse\n\n        \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_secret\n\n        \nfalse\n\n        \nThe client secret. The client MAY omit the parameter if the client secret is an empty string.\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\"\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection uri used in the authorization request, or was issued to another client.\n\n        \n\n        \n\n            \n400\n\n            \nunauthorized_client\nThe authenticated client is not authorized to use this authorization grant type.\n\n        \n\n        \n\n            \n400\n\n            \nunsupported_grant_type\nThe authorization grant type is not supported by the authorization server.\n\n        \n\n        \n\n            \n400\n\n            \n invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.\n\n        \n\n\n\n\nAPI for oxAuth Clientinfo\n#\n\n\nThis document provides interface for Client Info REST web services.\n\n\nPath\n#\n\n\n/oxauth/clientinfo\n\n\nOverview\n#\n\n\nThe ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.\n\n\nclientinfoGet\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\naccess_token\n\n\nThe access token for oxAuth\n\n\nstring\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\ncontext\n\n\n\n\n\n\n\n\nclientinfoPost\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\naccess_token\n\n\nThe access token for oxAuth\n\n\nstring\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\ncontext\n\n\n\n\n\n\n\n\nOpenID Connect Register Client API\n#\n\n\nOverview\n#\n\n\nAny OpenID Client needs to register with the OpenID Provider to utilize \nOpenID Services, in this case register a user, and acquire a client ID and a shared secret.\n\n\nPath\n#\n\n\n/oxauth/register\n\n\nregisterPost\n#\n\n\nPOST\n \n/oxauth/register\n\n\nRegisters new dynamic client in oxAuth.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nredirect_uris\n\n\nRedirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request\n\n\n\n\n\n\nresponse_types\n\n\nA list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token\n\n\n\n\n\n\ngrant_types\n\n\nA list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are:\nauthorization_code\n The Authorization Code Grant Type\nimplicit\n The Implicit Grant Type\nrefresh_token\n The Refresh Token Grant Type\nThe following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list:\ncode: authorization_code\nid_token: implicit\ntoken id_token: implicit\ncode id_token: authorization_code, implicit\ncode token: authorization_code, implicit\ncode token id_token: authorization_code, implicit\n\n\n\n\n\n\napplication_type\n\n\nKind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the https scheme as redirect_uris; they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname.\n\n\n\n\n\n\ncontacts\n\n\ne-mail addresses of people responsible for this Client.\n\n\n\n\n\n\nclient_name\n\n\nName of the Client to be presented to the End-User.\n\n\n\n\n\n\nlogo_uri\n\n\nURL that references a logo for the Client application. If present, the server displays this image to the End-User during approval. The value of this field must point to a valid image file.\n\n\n\n\n\n\nclient_uri\n\n\nURL of the home page of the Client. The value of this field must point to a valid Web page. If present, the server displays this URL to the End-User in a followable fashion.\n\n\n\n\n\n\npolicy_uri\n\n\nURL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.\n\n\n\n\n\n\ntos_uri\n\n\nURL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.\n\n\n\n\n\n\njwks_uri\n\n\nURL for the Client's JSON Web Key Set (JWK) document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is not recommended, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values must still be present and must match those in the certificate.\n\n\n\n\n\n\njwks\n\n\nClient's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does). The jwks_uri and jwks parameters must not be used together.\n\n\n\n\n\n\nsector_identifier_uri\n\n\nURL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Providers that use pairwise sub (subject) values utilizes the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.\n\n\n\n\n\n\nsubject_type\n\n\nsubject_type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.\n\n\n\n\n\n\nid_token_signed_response_alg\n\n\nJWS alg algorithm (JWA) required for signing the ID Token issued to this Client. The value none must not be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow). The default, if omitted, is RS256. The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery.\n\n\n\n\n\n\nid_token_encrypted_response_alg\n\n\nJWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.\n\n\n\n\n\n\nid_token_encrypted_response_enc\n\n\nJWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg must also be provided.\n\n\n\n\n\n\nuserinfo_signed_response_alg\n\n\nJWS alg algorithm (JWA) required for signing UserInfo Responses. If this is specified, the response will be JWT serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.\n\n\n\n\n\n\nuserinfo_encrypted_response_alg\n\n\nJWE alg algorithm (JWA) required for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.\n\n\n\n\n\n\nuserinfo_encrypted_response_enc\n\n\nJWE enc algorithm (JWA) required for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg must also be provided.\n\n\n\n\n\n\nrequest_object_signing_alg\n\n\nJWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP. All Request Objects from this Client are rejected, if not signed with this algorithm. This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none may be used. The default, if omitted, is that any algorithm supported by the OP and the RP may be used.\n\n\n\n\n\n\nrequest_object_encryption_alg\n\n\nJWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter should be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP may still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\n\n\n\n\n\nrequest_object_encryption_enc\n\n\nJWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg must also be provided.\n\n\n\n\n\n\ntoken_endpoint_auth_method\n\n\nRequested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\ntoken_endpoint_auth_signing_alg\n\n\nJWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client are rejected, if the JWT is not signed with this algorithm. The value none must not be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.\n\n\n\n\n\n\ndefault_max_age\n\n\nDefault Maximum Authentication Age. Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nrequire_auth_time\n\n\nBoolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter) If omitted, the default value is false.\n\n\n\n\n\n\ndefault_acr_values\n\n\nDefault requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being requested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter. The acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values request parameter or an individual acr Claim request override these default values.\n\n\n\n\n\n\ninitiate_login_uri\n\n\nURI using the https scheme that a third party can use to initiate a login by the RP. The URI must accept requests via both GET and POST. The Client must understand the login_hint and iss parameters and should support the target_link_uri parameter.\n\n\n\n\n\n\nrequest_uris\n\n\nrequest_uri values that are pre-registered by the RP for use at the OP. The Servers cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. If the contents of the request file could ever change, these URI values should include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.\n\n\n\n\n\n\n\n\nResponse\n#\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n    \n\n        \n302\n\n        \naccess_denies The request is denied by the authorization server.\n\n    \n\n\n\n\n\nregisterPut\n#\n\n\nPUT\n \n/oxauth/register\n\n\nThis operation updates the Client Metadata for a registered client.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n#\n\n\nThe request is sent as an \nHTTP POST\n to the client registration endpoint as JSON with the parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientId\n\n\nThe unique client identifier usually INUM\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\n\n\n\n\nhttpRequest\n\n\nThe HTTP Request object\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\n\n\n\n\n\n\nResponse\n#\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n        \n\n            \n302\n\n            \naccess_denies The request is denied by the authorization server.\n\n        \n\n\n\n\n\nregisterGet\n#\n\n\nGET\n \n/oxauth/register\n\n\nThis operation retrieves the Client Metadata for a previously registered client.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n#\n\n\nThe request is sent as an \nHTTP POST\n to the client registration endpoint as JSON with the parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientId\n\n\nThe unique client identifier usually INUM\n\n\n\n\n\n\nsecurityContext\n\n\ninjectable interface that provides access to security related info.\n\n\n\n\n\n\n\n\nResponse\n#\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n        \n\n            \n302\n\n            \naccess_denies The request is denied by the authorization server.\n\n        \n\n\n\n\nOpenID Connect End Session API\n#\n\n\nOverview\n#\n\n\nPath\n#\n\n\n/oxauth/end_session\n\n\nrequestEndSession\n#\n\n\nGET\n \n\n\n/oxauth/end_session\n\n\nEnd current Connect session.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/end_session\n\n\n\nParameters\n#\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nid_token_hint\n\n        \ntrue\n\n        \nPreviously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n        \nstring\n\n    \n\n    \n\n        \npost_logout_redirect_uri\n\n        \nfalse\n\n        \nURL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.\n\n        \nstring\n\n    \n\n    \n\n        \nstate\n\n        \nfalse\n\n        \nOpaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.\n\n        \nstring\n\n    \n\n    \n\n        \nsession_id\n\n        \nfalse\n\n        \nSession ID\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_grant\nThe provided access token is invalid, or was issued to another client.\n\n        \n\n\n\n\nOpenID Connect User Info API\n#\n\n\nOverview\n#\n\n\nPath\n#\n\n\n/oxauth/userinfo\n\n\nrequestUserInfoPost\n#\n\n\nPOST\n \n\n\n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is \nsent as a Bearer Token.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n#\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nrequestUserInfoGet\n#\n\n\nGET\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n#\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.",
            "title": "OpenID Connect API"
        },
        {
            "location": "/api-guide/openid-connect-api/#openid-connect-api",
            "text": "",
            "title": "OpenId Connect API"
        },
        {
            "location": "/api-guide/openid-connect-api/#openid-connect-authorization-grant",
            "text": "This page provides an interface for request authorization through REST web services.",
            "title": "OpenId Connect Authorization Grant"
        },
        {
            "location": "/api-guide/openid-connect-api/#path",
            "text": "/oxauth/authorize",
            "title": "Path"
        },
        {
            "location": "/api-guide/openid-connect-api/#requestauthorizationget",
            "text": "GET   /oxauth/authorize  The Authorization Endpoint performs Authentication of the end-user. This is done by sending the User Agent to the Authorization Server's Authorization Endpoint for Authentication and Authorization, using request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect.",
            "title": "requestAuthorizationGet"
        },
        {
            "location": "/api-guide/openid-connect-api/#url",
            "text": "http://<hostname of Gluu Server>/oxauth/authorize",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters",
            "text": "Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             scope \n             true \n             OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n             string \n         \n         \n             response_type \n             true \n             OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code. \n             string \n         \n         \n             client_id \n             true \n             OAuth 2.0 Client Identifier valid at the Authorization Server. \n             string \n         \n         \n             redirect_uri \n             true \n             Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n             string \n         \n         \n             state \n             false \n             Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie. \n             string \n         \n     \n         response_mode \n         false \n         This parameter informs the authorization server about the mechanism to be used to return parameters from the authorization endpoint. This is not recommended if the default for response_type is requested. \n         string \n     \n         \n             nonce \n             false \n             String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. \n             string \n         \n         \n             display \n             false \n             ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap \n             string \n         \n         \n             prompt \n             false \n             Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account \n             string \n         \n         \n             max_age \n             false \n             Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value. \n             int \n         \n         \n             ui_locales \n             false \n             end-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider. \n             string \n         \n         \n             id_token_hint \n             false \n             ID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n             string \n         \n         \n             login_hint \n             false \n             Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion. \n             string \n         \n         \n             acr_values \n             false \n             Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter. \n             string \n         \n         \n             amr_values \n             false \n             AMR Values \n             string \n         \n         \n             request \n             false \n             This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters. \n             string \n         \n         \n             request_uri \n             false \n             This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters. \n             string \n         \n         \n             request_session_state \n             false \n             Request session state \n             string \n         \n         \n             sessionState \n             false \n             This is an optional parameter \n             string \n         \n         \n             accessToken \n             false \n             This parameter is optinal and carries the access token for the request. \n             string \n         \n     \n         origin_headers \n         false \n         This optional token is used in custom workflows. \n         string \n      \n         \n             codeChallange \n             false \n             This parameter allows the code to be challanced using PKCE. \n             string \n         \n         \n             codeChallangeMethod \n             false \n             This parameter allows the use of PKCE to challange code. \n             string \n     \n        \n             httpRequest \n             false \n             This is an optional parameter \n             string \n         \n         \n             securityContext \n             false \n             This is an injectable interface that provides access to security related information. \n             string \n            query   \n         \n             Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             response_mode \n             false \n             Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type. \n             string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response",
            "text": "JSON[Response]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors",
            "text": "Status Code \n         Reason \n     \n         \n             302 \n             interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction.  \n         \n         \n             302 \n             login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication.  \n         \n         \n             302 \n             account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.  \n         \n         \n             302 \n             consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent.  \n         \n         \n             302 \n             invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data.  \n         \n         \n             302 \n             invalid_request_object\n    The request parameter contains an invalid Request Object.  \n         \n         \n             302 \n             request_not_supported\n    The OP does not support use of the request parameter \n         \n         \n             302 \n             request_uri_not_supported\n    The OP does not support use of the request_uri parameter \n         \n         \n             302 \n             registration_not_supported\n    The OP does not support use of the registration parameter \n         \n         \n             400 \n             The request parameters contain an invalid option, e.g. an unusual grant type. \n         \n         \n             401 \n             The request could not be authenticated using the client_id and client_secret. \n         \n         \n             500 \n             Either an internal server error occurred (e.g. opendj server is down), or the username and password \n                do not match any known user.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#requestauthorizationpost",
            "text": "POST   /oxauth/authorize  Performs authorization.\nThe Authorization Endpoint performs Authentication of the end-user.",
            "title": "requestAuthorizationPost"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_1",
            "text": "http://<hostname of Gluu Server>/oxauth/authorize",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_1",
            "text": "Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             scope \n             true \n             OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n             string \n         \n         \n             response_type \n             true \n             OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code. \n             string \n         \n         \n             client_id \n             true \n             OAuth 2.0 Client Identifier valid at the Authorization Server. \n             string \n         \n         \n             redirect_uri \n             true \n             Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n             string \n         \n         \n             state \n             false \n             Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie. \n             string \n         \n         \n             response_mode \n             false \n             Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type. \n             string \n         \n         \n             nonce \n             false \n             String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. \n             string \n         \n         \n             display \n             false \n             ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap \n             string \n         \n         \n             prompt \n             false \n             Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account \n             string \n         \n         \n             max_age \n             false \n             Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value. \n             int \n         \n         \n             ui_locales \n             false \n             end-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider. \n             string \n         \n         \n             id_token_hint \n             false \n             ID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n             string \n         \n         \n             login_hint \n             false \n             Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion. \n             string \n         \n         \n             acr_values \n             false \n             Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in section 2. The acr Claim is requested as a Voluntary Claim by this parameter. \n             string \n         \n         \n             amr_values \n             false \n             AMR Values \n             string \n         \n         \n             request \n             false \n             This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in section 6.1. It represents the request as a JWT whose Claims are the request parameters. \n             string \n         \n         \n             request_uri \n             false \n             This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters. \n             string \n         \n         \n             request_session_state \n             false \n             Request session state \n             string \n         \n         \n             session_state \n             false \n             Session state of this call \n             string \n         \n         \n             access_token \n             false \n             Access token \n             string \n         \n         \n             origin_headers \n             false \n             Origin headers. Used in custom workflows. \n             string \n         \n     \n         code_challange \n         false \n         PKCE Code challange \n         string \n     \n     \n         code_challange_method \n         false \n         PKCE code challange method \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_1",
            "text": "JSON[Response]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_1",
            "text": "Status Code \n         Reason \n     \n         \n             302 \n             interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction.  \n         \n         \n             302 \n             login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication.  \n         \n         \n             302 \n             account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.  \n         \n         \n             302 \n             consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent.  \n         \n         \n             302 \n             invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data.  \n         \n         \n             302 \n             invalid_request_object\n    The request parameter contains an invalid Request Object.  \n         \n         \n             302 \n             request_not_supported\n    The OP does not support use of the request parameter \n         \n         \n             302 \n             request_uri_not_supported\n    The OP does not support use of the request_uri parameter \n         \n         \n             302 \n             registration_not_supported\n    The OP does not support use of the registration parameter",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#openid-connect-token-endpoint",
            "text": "",
            "title": "OpenID Connect Token Endpoint"
        },
        {
            "location": "/api-guide/openid-connect-api/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/openid-connect-api/#path_1",
            "text": "/oxauth/token **",
            "title": "Path"
        },
        {
            "location": "/api-guide/openid-connect-api/#requestaccesstoken",
            "text": "POST   /oxauth/token  To obtain an Access Token, an ID Token, and optionally a Refresh Token,\nthe RP (Client) sends a Token Request to the Token Endpoint to obtain a\nToken Response.",
            "title": "requestAccessToken"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_2",
            "text": "http://gluu.org/oxauth/token",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_2",
            "text": "form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         grant_type \n         true \n         Grant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749]. \n         string \n     \n     \n         code \n         false \n         Code which is returned by authorization endpoint (For\ngrant_type=authorization_code). \n         string \n     \n     \n         redirect_uri \n         false \n         Redirection uri to which the response will be sent. This\nuri MUST exactly match one of the redirection uri values for the client\npre-registered at the OpenID Provider. \n         string \n     \n     \n         username \n         false \n         End-User username. \n         string \n     \n     \n         password \n         false \n         End-User password. \n         string \n     \n     \n         scope \n         false \n         OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n         string \n     \n     \n         assertion \n         false \n         Assertion. \n         string \n     \n     \n         refresh_token \n         false \n         Refresh token. \n         string \n     \n     \n         oxauth_exchange_token \n         false \n         oxauth_exchange_token. \n         string \n     \n     \n         client_id \n         false \n         OAuth 2.0 Client Identifier valid at the Authorization Server. \n         string \n     \n     \n         client_secret \n         false \n         The client secret. The client MAY omit the parameter if the client secret is an empty string. \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_2",
            "text": "JSON[Response]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_2",
            "text": "Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed. \n         \n         \n             400 \n             invalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\"\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client. \n         \n         \n             400 \n             invalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection uri used in the authorization request, or was issued to another client. \n         \n         \n             400 \n             unauthorized_client\nThe authenticated client is not authorized to use this authorization grant type. \n         \n         \n             400 \n             unsupported_grant_type\nThe authorization grant type is not supported by the authorization server. \n         \n         \n             400 \n              invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#api-for-oxauth-clientinfo",
            "text": "This document provides interface for Client Info REST web services.",
            "title": "API for oxAuth Clientinfo"
        },
        {
            "location": "/api-guide/openid-connect-api/#path_2",
            "text": "/oxauth/clientinfo",
            "title": "Path"
        },
        {
            "location": "/api-guide/openid-connect-api/#overview_1",
            "text": "The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.",
            "title": "Overview"
        },
        {
            "location": "/api-guide/openid-connect-api/#clientinfoget",
            "text": "Parameter  Description  Data Type      access_token  The access token for oxAuth  string    authorization  The authorization for the client  string    securityContext  Injectable interface providing access to security info  context",
            "title": "clientinfoGet"
        },
        {
            "location": "/api-guide/openid-connect-api/#clientinfopost",
            "text": "Parameter  Description  Data Type      access_token  The access token for oxAuth  string    authorization  The authorization for the client  string    securityContext  Injectable interface providing access to security info  context",
            "title": "clientinfoPost"
        },
        {
            "location": "/api-guide/openid-connect-api/#openid-connect-register-client-api",
            "text": "",
            "title": "OpenID Connect Register Client API"
        },
        {
            "location": "/api-guide/openid-connect-api/#overview_2",
            "text": "Any OpenID Client needs to register with the OpenID Provider to utilize \nOpenID Services, in this case register a user, and acquire a client ID and a shared secret.",
            "title": "Overview"
        },
        {
            "location": "/api-guide/openid-connect-api/#path_3",
            "text": "/oxauth/register",
            "title": "Path"
        },
        {
            "location": "/api-guide/openid-connect-api/#registerpost",
            "text": "POST   /oxauth/register  Registers new dynamic client in oxAuth.",
            "title": "registerPost"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_3",
            "text": "http://gluu.org/oxauth/register",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_3",
            "text": "Parameter  Description      redirect_uris  Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request    response_types  A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token    grant_types  A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are: authorization_code  The Authorization Code Grant Type implicit  The Implicit Grant Type refresh_token  The Refresh Token Grant Type The following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list: code: authorization_code id_token: implicit token id_token: implicit code id_token: authorization_code, implicit code token: authorization_code, implicit code token id_token: authorization_code, implicit    application_type  Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the https scheme as redirect_uris; they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname.    contacts  e-mail addresses of people responsible for this Client.    client_name  Name of the Client to be presented to the End-User.    logo_uri  URL that references a logo for the Client application. If present, the server displays this image to the End-User during approval. The value of this field must point to a valid image file.    client_uri  URL of the home page of the Client. The value of this field must point to a valid Web page. If present, the server displays this URL to the End-User in a followable fashion.    policy_uri  URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.    tos_uri  URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.    jwks_uri  URL for the Client's JSON Web Key Set (JWK) document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is not recommended, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values must still be present and must match those in the certificate.    jwks  Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does). The jwks_uri and jwks parameters must not be used together.    sector_identifier_uri  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Providers that use pairwise sub (subject) values utilizes the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.    subject_type  subject_type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.    id_token_signed_response_alg  JWS alg algorithm (JWA) required for signing the ID Token issued to this Client. The value none must not be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow). The default, if omitted, is RS256. The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery.    id_token_encrypted_response_alg  JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.    id_token_encrypted_response_enc  JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg must also be provided.    userinfo_signed_response_alg  JWS alg algorithm (JWA) required for signing UserInfo Responses. If this is specified, the response will be JWT serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.    userinfo_encrypted_response_alg  JWE alg algorithm (JWA) required for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.    userinfo_encrypted_response_enc  JWE enc algorithm (JWA) required for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg must also be provided.    request_object_signing_alg  JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP. All Request Objects from this Client are rejected, if not signed with this algorithm. This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none may be used. The default, if omitted, is that any algorithm supported by the OP and the RP may be used.    request_object_encryption_alg  JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter should be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP may still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.    request_object_encryption_enc  JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg must also be provided.    token_endpoint_auth_method  Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.    token_endpoint_auth_signing_alg  JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client are rejected, if the JWT is not signed with this algorithm. The value none must not be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.    default_max_age  Default Maximum Authentication Age. Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.    require_auth_time  Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter) If omitted, the default value is false.    default_acr_values  Default requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being requested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter. The acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values request parameter or an individual acr Claim request override these default values.    initiate_login_uri  URI using the https scheme that a third party can use to initiate a login by the RP. The URI must accept requests via both GET and POST. The Client must understand the login_hint and iss parameters and should support the target_link_uri parameter.    request_uris  request_uri values that are pre-registered by the RP for use at the OP. The Servers cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. If the contents of the request file could ever change, these URI values should include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_3",
            "text": "Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_3",
            "text": "Status Code \n         Reason \n     \n     \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n         \n     \n         302 \n         access_denies The request is denied by the authorization server.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#registerput",
            "text": "PUT   /oxauth/register  This operation updates the Client Metadata for a registered client.",
            "title": "registerPut"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_4",
            "text": "http://gluu.org/oxauth/register",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_4",
            "text": "The request is sent as an  HTTP POST  to the client registration endpoint as JSON with the parameters.     Parameter  Description      clientId  The unique client identifier usually INUM    authorization  The authorization for the client    httpRequest  The HTTP Request object    securityContext  Injectable interface providing access to security info",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_4",
            "text": "Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_4",
            "text": "Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n         \n         \n             302 \n             access_denies The request is denied by the authorization server.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#registerget",
            "text": "GET   /oxauth/register  This operation retrieves the Client Metadata for a previously registered client.",
            "title": "registerGet"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_5",
            "text": "http://gluu.org/oxauth/register",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_5",
            "text": "The request is sent as an  HTTP POST  to the client registration endpoint as JSON with the parameters.     Parameter  Description      clientId  The unique client identifier usually INUM    securityContext  injectable interface that provides access to security related info.",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_5",
            "text": "Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_5",
            "text": "Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource. \n         \n         \n             302 \n             access_denies The request is denied by the authorization server.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#openid-connect-end-session-api",
            "text": "",
            "title": "OpenID Connect End Session API"
        },
        {
            "location": "/api-guide/openid-connect-api/#overview_3",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/openid-connect-api/#path_4",
            "text": "/oxauth/end_session",
            "title": "Path"
        },
        {
            "location": "/api-guide/openid-connect-api/#requestendsession",
            "text": "GET    /oxauth/end_session  End current Connect session.",
            "title": "requestEndSession"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_6",
            "text": "http://gluu.org/oxauth/end_session",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_6",
            "text": "query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         id_token_hint \n         true \n         Previously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n         string \n     \n     \n         post_logout_redirect_uri \n         false \n         URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout. \n         string \n     \n     \n         state \n         false \n         Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP. \n         string \n     \n     \n         session_id \n         false \n         Session ID \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_6",
            "text": "JSON[Response]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_6",
            "text": "Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             400 \n             invalid_grant\nThe provided access token is invalid, or was issued to another client.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#openid-connect-user-info-api",
            "text": "",
            "title": "OpenID Connect User Info API"
        },
        {
            "location": "/api-guide/openid-connect-api/#overview_4",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/openid-connect-api/#path_5",
            "text": "/oxauth/userinfo",
            "title": "Path"
        },
        {
            "location": "/api-guide/openid-connect-api/#requestuserinfopost",
            "text": "POST    /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is \nsent as a Bearer Token.",
            "title": "requestUserInfoPost"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_7",
            "text": "http://gluu.org/oxauth/userinfo",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_7",
            "text": "form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_7",
            "text": "JSON[Response]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_7",
            "text": "Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/openid-connect-api/#requestuserinfoget",
            "text": "GET   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.",
            "title": "requestUserInfoGet"
        },
        {
            "location": "/api-guide/openid-connect-api/#url_8",
            "text": "http://gluu.org/oxauth/userinfo",
            "title": "URL"
        },
        {
            "location": "/api-guide/openid-connect-api/#parameters_8",
            "text": "query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/openid-connect-api/#response_8",
            "text": "JSON[Response]",
            "title": "Response"
        },
        {
            "location": "/api-guide/openid-connect-api/#errors_8",
            "text": "Status Code \n         Reason \n     \n         \n             400 \n             invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope\nThe request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/scim-api/",
            "text": "SCIM\n#\n\n\nGluu Server Community Edition supports System for Cross-domain Identity Management (SCIM) Version 1.0 and 2.0 out of the box, operated using HTTP \nGET\n and \nPOST\n commands. SCIM uses a REST API for operations which are disabled by default. The support for SCIM must be enabled from the oxTrust admin interface. \nSCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to \nOrganization Configuration\n --> \nSystem Configuration\n.\n\n\n\n\nPlease navigate down the page to find \nSCIM Support\n in the \nSYstem Configuration\n page and select \nEnabled\n.\n\n\n\n\nSCIM Endpoints\n#\n\n\nSCIM uses REST API for the operations which are covered in short in this section. There are two versions of the SCIM API each with its own specification. This usage of SCIM requires advanced level knowledge of HTTP GET and POST commands and not recommended for entry level users.\n\n\nThe SCIM 1.1 is governed by the \nSCIM:Protocol 1.1\n document and SCIM 2.0 is governed by the \nSCIM:Core Schema\n & \nSCIM:Protocol\n. As it is mentioned before, the specifications define an API, the operations are performed through endpoints. There are three endpoints that are available in Gluu Server SCIM:\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nThe supported operations are given later in this document.\n\n\nSCIM 1.1\n#\n\n\nThe endpoints URLS are incomplete withour the hostname. Please use the hostname of Gluu Server Community Edition before the give URLS to make any requrest using SCIM.\n\n\n\n\n\n\n\n\nResource\n\n\nEndpoint\n\n\nOperations\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUser\n\n\n/seam/resource/restv1/Users\n\n\nGET, POST\n\n\nRetrieve/Add/Modify Users\n\n\n\n\n\n\nGroup\n\n\n/seam/resource/restv1/Groups\n\n\nGET, POST\n\n\nRetrieve/Add/Modify Groups\n\n\n\n\n\n\nBulk\n\n\n/seam/resource/restv1/scim/v1/Bulk\n\n\nGET, POST\n\n\nBulk modify Resources\n\n\n\n\n\n\n\n\nThe endpoints are described in detail in the follwing sections. Please remember to go through the specifications before using SCIM.\n\n\nEndpoint: User & Group\n#\n\n\nThe userinfo endpoint is given above in \nSection SCIM 1.1\n. The example below shows the userinfo endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\n\n\nThe groups endpoint is given in \nSection SCIM 1.1\n. The example below shown the groupinfo endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\n\n\nThe following table details the request parameters to the endpoints:\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nLocation\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrsid\n\n\nstring\n\n\npath\n\n\nTRUE\n\n\nResource set description ID\n\n\n\n\n\n\nAuthorization\n\n\nstring\n\n\nheader\n\n\nFALSE\n\n\n\n\n\n\n\n\n\n\nThe response contains either JSON/XML application with a status code \n200\n if the request is successful.\n\n\nPlease see the \nResponse Code Section\n for more details.\n\n\nExample\n#\n\n\nThe following is an example to add a new user with SCIM 1.1 in \nidp.gluu.org\n using a JSON Request.\n\n\nPOST https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=\n\n\n\n\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}\n\n\n\n\nThe response is in JSON as well. The following is the expected response\n\n\n201 CREATED\nServer:  Apache-Coyote/1.1\nLocation:  https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type:  application/json\n\n\n\n\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"id\":\"@!1111!0000!D4E7\",\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"Hiden for Privacy Reasons\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}\n\n\n\n\nEndpoint: Bulk\n#\n\n\nBulk endpoint allows the administrator to work with a large collection of Resources with a single request.A body of a bulk operation may contain a set of HTTP Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE. Please see the \nSCIM Specs\n for more details. \n\n\nThe example below shows the bulk operaiton endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/seam/resource/restv1/scim/v1/Bulk\n\n\n\n\nThe following table details the request parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nstring\n\n\nheader\n\n\n\n\n\n\nbody\n\n\nBulkRequest\n\n\nbody\n\n\n\n\n\n\n\n\nDefinitions\n#\n\n\nThe definitions for the bulk operation is covered in the tables below. The parametes below are all optional.\n\n\n\n\n\n\n\n\nBulkOperation\n\n\n\n\nBulkRequest\n\n\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nParameter\n\n\nData Type\n\n\nParameter\n\n\nData Type\n\n\n\n\n\n\nbulkid\n\n\nstring\n\n\nschemes\n\n\narray[string]\n\n\nschemes\n\n\narray[string]\n\n\n\n\n\n\nversion\n\n\nstring\n\n\noperations\n\n\narray[BulkOperation]\n\n\noperations\n\n\narray[BulkOperation]\n\n\n\n\n\n\nmethod\n\n\nstring\n\n\nfailOnErrors\n\n\nintegar(int32)\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocation\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse Codes\n#\n\n\nThis sections defines the response codes for the requests sent to the SCIM endpoints.\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nSuccessful Operation\n\n\n\n\n\n\n201\n\n\nCreated\n\n\nSuccessfully created resource\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n400\n\n\nBad Request\n\n\nRequest cannot be parsed, is syntactically incorrect, or violates schema\n\n\n\n\n\n\n401\n\n\nUnauthorized\n\n\nAuthorization header is invalid or missing\n\n\n\n\n\n\n403\n\n\nForbidden\n\n\nOperation is not permitted based on the supplied authorization\n\n\n\n\n\n\n404\n\n\nNot Found\n\n\nSpecified resource does not exist\n\n\n\n\n\n\n\n\nSCIM 2.0\n#\n\n\nThe detailed SCIM 2.0 Specifications are available at:\n\n\n\n\nSystem for Cross-domain Identity Management: Core Schema\n\n\nSystem for Cross-domain Identity Management: Protocol\n\n\n\n\nSCIM 2.0 Endpoints\n#\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nDefinitions\n#\n\n\nAddress\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nformatted\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstreetAddress\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocality\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nregion\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npostalCode\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ncountry\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkOperation\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nbulkId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmethod\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npath\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndata\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstatus\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresponse\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkRequest\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfailOnErrors\n\n        \n integer (int32) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEmail\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEntitlement\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n   \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroup\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmembers\n\n        \n array[\nMemberRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroupRef\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nIm\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nListResponse\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ntotalResults\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstartIndex\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nitemsPerPage\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresources\n\n        \narray[\nResource\n]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMemberRef\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMeta\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ncreated\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlastModified\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nattributes\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresourceType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nName\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nformatted\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfamilyName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngivenName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmiddleName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificPrefix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificSuffix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoneNumber\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoto\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nResource\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \nMeta\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nRole\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nType\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n\n\n\nUser\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nname\n\n        \n \nName\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nnickName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprofileUrl\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntitle\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npreferredLanguage\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocale\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntimezone\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nactive\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npassword\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nemails\n\n        \n array[\nEmail\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphoneNumbers\n\n        \n array[\nPhoneNumber\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nims\n\n        \n array[\nIm\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphotos\n\n        \n array[\nPhoto\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \naddresses\n\n        \n array[\nAddress\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngroups\n\n        \n array[\nGroupRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nentitlements\n\n        \n array[\nEntitlement\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nroles\n\n        \n array[\nRole\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nx509Certificates\n\n        \n array[\nX509Certificate\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nX509Certificate\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nScimPersonSearch\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nattribute\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Name\n\n        \nUsername\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Value\n\n        \nMike\n\n    \n\n\n\n\n\n\n\nUser Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users\n\n\n\nGET\n#\n\n\nSearch Users\n - searches users based on filter criteria\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n#\n\n\nCreate User\n - creates a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}\n\n\n\nGET\n#\n\n\nFind User By ID\n - returns a user by id as path parameter\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/scim\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nPUT\n#\n\n\nUpdate User\n - updates a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nDELETE\n#\n\n\nDelete User\n - deletes a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/Search\n\n\n\nPOST\n#\n\n\nSearch Users\n (\nDeprecated\n)\n - searches users by HTTP POST\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \n\n        \n - \n\n        \nScimPersonSearch\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\n\n\nGroup Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups\n\n\n\nGET\n#\n\n\nSearch Groups\n - searches groups based on filter criteria\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n#\n\n\nCreate Group\n - creates a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}\n\n\n\nGET\n#\n\n\nFind Group By ID\n - returns a group by id as path parameter\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nPUT\n#\n\n\nUpdate Group\n - updates a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nDELETE\n#\n\n\nDelete Group\n - deletes a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of the group\n\n        \n - \n\n        \nstring \n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\n\n\nBulk Operation Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Bulk\n\n\n\nPOST\n#\n\n\nBulk Operations\n - bulk operations\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nBulkRequest\n\n        \n - \n\n        \nBulkRequest\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse",
            "title": "SCIM API Configuration"
        },
        {
            "location": "/api-guide/scim-api/#scim",
            "text": "Gluu Server Community Edition supports System for Cross-domain Identity Management (SCIM) Version 1.0 and 2.0 out of the box, operated using HTTP  GET  and  POST  commands. SCIM uses a REST API for operations which are disabled by default. The support for SCIM must be enabled from the oxTrust admin interface. \nSCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to  Organization Configuration  -->  System Configuration .   Please navigate down the page to find  SCIM Support  in the  SYstem Configuration  page and select  Enabled .",
            "title": "SCIM"
        },
        {
            "location": "/api-guide/scim-api/#scim-endpoints",
            "text": "SCIM uses REST API for the operations which are covered in short in this section. There are two versions of the SCIM API each with its own specification. This usage of SCIM requires advanced level knowledge of HTTP GET and POST commands and not recommended for entry level users.  The SCIM 1.1 is governed by the  SCIM:Protocol 1.1  document and SCIM 2.0 is governed by the  SCIM:Core Schema  &  SCIM:Protocol . As it is mentioned before, the specifications define an API, the operations are performed through endpoints. There are three endpoints that are available in Gluu Server SCIM:   User Endpoint  Group Endpoint  Bulk Operation Endpoint   The supported operations are given later in this document.",
            "title": "SCIM Endpoints"
        },
        {
            "location": "/api-guide/scim-api/#scim-11",
            "text": "The endpoints URLS are incomplete withour the hostname. Please use the hostname of Gluu Server Community Edition before the give URLS to make any requrest using SCIM.     Resource  Endpoint  Operations  Description      User  /seam/resource/restv1/Users  GET, POST  Retrieve/Add/Modify Users    Group  /seam/resource/restv1/Groups  GET, POST  Retrieve/Add/Modify Groups    Bulk  /seam/resource/restv1/scim/v1/Bulk  GET, POST  Bulk modify Resources     The endpoints are described in detail in the follwing sections. Please remember to go through the specifications before using SCIM.",
            "title": "SCIM 1.1"
        },
        {
            "location": "/api-guide/scim-api/#endpoint-user-group",
            "text": "The userinfo endpoint is given above in  Section SCIM 1.1 . The example below shows the userinfo endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}  The groups endpoint is given in  Section SCIM 1.1 . The example below shown the groupinfo endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}  The following table details the request parameters to the endpoints:     Parameter  Data Type  Location  Required  Description      rsid  string  path  TRUE  Resource set description ID    Authorization  string  header  FALSE      The response contains either JSON/XML application with a status code  200  if the request is successful.  Please see the  Response Code Section  for more details.",
            "title": "Endpoint: User &amp; Group"
        },
        {
            "location": "/api-guide/scim-api/#example",
            "text": "The following is an example to add a new user with SCIM 1.1 in  idp.gluu.org  using a JSON Request.  POST https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=  {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}  The response is in JSON as well. The following is the expected response  201 CREATED\nServer:  Apache-Coyote/1.1\nLocation:  https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type:  application/json  {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"id\":\"@!1111!0000!D4E7\",\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"Hiden for Privacy Reasons\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}",
            "title": "Example"
        },
        {
            "location": "/api-guide/scim-api/#endpoint-bulk",
            "text": "Bulk endpoint allows the administrator to work with a large collection of Resources with a single request.A body of a bulk operation may contain a set of HTTP Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE. Please see the  SCIM Specs  for more details.   The example below shows the bulk operaiton endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/seam/resource/restv1/scim/v1/Bulk  The following table details the request parameters:     Parameter  Data Type  Location      Authorization  string  header    body  BulkRequest  body",
            "title": "Endpoint: Bulk"
        },
        {
            "location": "/api-guide/scim-api/#definitions",
            "text": "The definitions for the bulk operation is covered in the tables below. The parametes below are all optional.     BulkOperation   BulkRequest   BulkResponse       Parameter  Data Type  Parameter  Data Type  Parameter  Data Type    bulkid  string  schemes  array[string]  schemes  array[string]    version  string  operations  array[BulkOperation]  operations  array[BulkOperation]    method  string  failOnErrors  integar(int32)      path  string        location  string        status  string        data  object        response  object",
            "title": "Definitions"
        },
        {
            "location": "/api-guide/scim-api/#response-codes",
            "text": "This sections defines the response codes for the requests sent to the SCIM endpoints.     Status Code  Reason  Description      200  OK  Successful Operation    201  Created  Successfully created resource        Status Code  Reason  Description      400  Bad Request  Request cannot be parsed, is syntactically incorrect, or violates schema    401  Unauthorized  Authorization header is invalid or missing    403  Forbidden  Operation is not permitted based on the supplied authorization    404  Not Found  Specified resource does not exist",
            "title": "Response Codes"
        },
        {
            "location": "/api-guide/scim-api/#scim-20",
            "text": "The detailed SCIM 2.0 Specifications are available at:   System for Cross-domain Identity Management: Core Schema  System for Cross-domain Identity Management: Protocol",
            "title": "SCIM 2.0"
        },
        {
            "location": "/api-guide/scim-api/#scim-20-endpoints",
            "text": "User Endpoint  Group Endpoint  Bulk Operation Endpoint",
            "title": "SCIM 2.0 Endpoints"
        },
        {
            "location": "/api-guide/scim-api/#definitions_1",
            "text": "Address  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         formatted \n         string \n         optional \n         - \n         \n     \n     \n         streetAddress \n         string \n         optional \n         - \n         \n     \n     \n         locality \n         string \n         optional \n         - \n         \n     \n     \n         region \n         string \n         optional \n         - \n         \n     \n     \n         postalCode \n         string \n         optional \n         - \n         \n     \n     \n         country \n         string \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         - \n         \n       BulkOperation  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         bulkId \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         method \n          string  \n         optional \n         - \n         \n     \n     \n         path \n          string  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         data \n          object  \n         optional \n         - \n         \n     \n     \n         status \n          string  \n         optional \n         - \n         \n     \n     \n         response \n          object  \n         optional \n         - \n         \n       BulkRequest  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         failOnErrors \n          integer (int32)  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         - \n         \n       BulkResponse  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         - \n         \n       Email  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Entitlement  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n    \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Group  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         members \n          array[ MemberRef ]  \n         optional \n         - \n         \n       GroupRef  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Im  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       ListResponse  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         totalResults \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         startIndex \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         itemsPerPage \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         optional \n         - \n         \n     \n     \n         resources \n         array[ Resource ] \n         optional \n         - \n         \n       MemberRef  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Meta  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         created \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         lastModified \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         attributes \n          array[string]  \n         optional \n         - \n         \n     \n     \n         resourceType \n          string  \n         optional \n         - \n         \n       Name  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         formatted \n          string  \n         optional \n         - \n         \n     \n     \n         familyName \n          string  \n         optional \n         - \n         \n     \n     \n         givenName \n          string  \n         optional \n         - \n         \n     \n     \n         middleName \n          string  \n         optional \n         - \n         \n     \n     \n         honorificPrefix \n          string  \n         optional \n         - \n         \n     \n     \n         honorificSuffix \n          string  \n         optional \n         - \n         \n       PhoneNumber  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Photo  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Resource  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         id \n         string \n         optional \n         - \n         \n     \n     \n         externalId \n         string \n         optional \n         - \n         \n     \n     \n         meta \n         Meta \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         required \n         - \n         \n       Role  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Type  \n     \n         name \n         type \n         required \n         description \n         example \n       User  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         userName \n          string  \n         optional \n         - \n         \n     \n     \n         name \n           Name   \n         optional \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         nickName \n          string  \n         optional \n         - \n         \n     \n     \n         profileUrl \n          string  \n         optional \n         - \n         \n     \n     \n         title \n          string  \n         optional \n         - \n         \n     \n     \n         userType \n          string  \n         optional \n         - \n         \n     \n     \n         preferredLanguage \n          string  \n         optional \n         - \n         \n     \n     \n         locale \n          string  \n         optional \n         - \n         \n     \n     \n         timezone \n          string  \n         optional \n         - \n         \n     \n     \n         active \n          boolean  \n         optional \n         - \n         \n     \n     \n         password \n          string  \n         optional \n         - \n         \n     \n     \n         emails \n          array[ Email ]  \n         optional \n         - \n         \n     \n     \n         phoneNumbers \n          array[ PhoneNumber ]  \n         optional \n         - \n         \n     \n     \n         ims \n          array[ Im ]  \n         optional \n         - \n         \n     \n     \n         photos \n          array[ Photo ]  \n         optional \n         - \n         \n     \n     \n         addresses \n          array[ Address ]  \n         optional \n         - \n         \n     \n     \n         groups \n          array[ GroupRef ]  \n         optional \n         - \n         \n     \n     \n         entitlements \n          array[ Entitlement ]  \n         optional \n         - \n         \n     \n     \n         roles \n          array[ Role ]  \n         optional \n         - \n         \n     \n     \n         x509Certificates \n          array[ X509Certificate ]  \n         optional \n         - \n         \n       X509Certificate  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         value \n         string \n         optional \n         - \n         \n     \n     \n         display \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         - \n         \n       ScimPersonSearch  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         attribute \n          string  \n         required \n         User Attribute Name \n         Username \n     \n     \n         value \n          string  \n         required \n         User Attribute Value \n         Mike",
            "title": "Definitions"
        },
        {
            "location": "/api-guide/scim-api/#user-endpoint",
            "text": "",
            "title": "User Endpoint"
        },
        {
            "location": "/api-guide/scim-api/#url",
            "text": "<domain root>/identity/seam/resource/restv1/scim/v2/Users",
            "title": "URL"
        },
        {
            "location": "/api-guide/scim-api/#get",
            "text": "Search Users  - searches users based on filter criteria",
            "title": "GET"
        },
        {
            "location": "/api-guide/scim-api/#security",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#post",
            "text": "Create User  - creates a user",
            "title": "POST"
        },
        {
            "location": "/api-guide/scim-api/#security_1",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_1",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_1",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_1",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  User",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#url_1",
            "text": "<domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}",
            "title": "URL"
        },
        {
            "location": "/api-guide/scim-api/#get_1",
            "text": "Find User By ID  - returns a user by id as path parameter",
            "title": "GET"
        },
        {
            "location": "/api-guide/scim-api/#security_2",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_2",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_2",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_2",
            "text": "Content-Type:   application/scim+json ,  application/scim     Status Code  Reason  Response Model      200  successful operation  User",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#put",
            "text": "Update User  - updates a user",
            "title": "PUT"
        },
        {
            "location": "/api-guide/scim-api/#security_3",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_3",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_3",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_3",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  User",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#delete",
            "text": "Delete User  - deletes a user",
            "title": "DELETE"
        },
        {
            "location": "/api-guide/scim-api/#security_4",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_4",
            "text": "",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_4",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_4",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#url_2",
            "text": "<domain root>/identity/seam/resource/restv1/scim/v2/Users/Search",
            "title": "URL"
        },
        {
            "location": "/api-guide/scim-api/#post_1",
            "text": "Search Users  ( Deprecated )  - searches users by HTTP POST",
            "title": "POST"
        },
        {
            "location": "/api-guide/scim-api/#security_5",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_5",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_5",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         \n          -  \n         ScimPersonSearch",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_5",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#group-endpoint",
            "text": "",
            "title": "Group Endpoint"
        },
        {
            "location": "/api-guide/scim-api/#url_3",
            "text": "<domain root>/identity/seam/resource/restv1/scim/v2/Groups",
            "title": "URL"
        },
        {
            "location": "/api-guide/scim-api/#get_2",
            "text": "Search Groups  - searches groups based on filter criteria",
            "title": "GET"
        },
        {
            "location": "/api-guide/scim-api/#security_6",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_6",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_6",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_6",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#post_2",
            "text": "Create Group  - creates a group",
            "title": "POST"
        },
        {
            "location": "/api-guide/scim-api/#security_7",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_7",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_7",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_7",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  Group",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#url_4",
            "text": "<domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}",
            "title": "URL"
        },
        {
            "location": "/api-guide/scim-api/#get_3",
            "text": "Find Group By ID  - returns a group by id as path parameter",
            "title": "GET"
        },
        {
            "location": "/api-guide/scim-api/#security_8",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_8",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_8",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_8",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#put_1",
            "text": "Update Group  - updates a group",
            "title": "PUT"
        },
        {
            "location": "/api-guide/scim-api/#security_9",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_9",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_9",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_9",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#delete_1",
            "text": "Delete Group  - deletes a group",
            "title": "DELETE"
        },
        {
            "location": "/api-guide/scim-api/#security_10",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_10",
            "text": "",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_10",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of the group \n          -  \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_10",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -",
            "title": "Response"
        },
        {
            "location": "/api-guide/scim-api/#bulk-operation-endpoint",
            "text": "",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/api-guide/scim-api/#url_5",
            "text": "<domain root>/identity/seam/resource/restv1/scim/v2/Bulk",
            "title": "URL"
        },
        {
            "location": "/api-guide/scim-api/#post_3",
            "text": "Bulk Operations  - bulk operations",
            "title": "POST"
        },
        {
            "location": "/api-guide/scim-api/#security_11",
            "text": "UMA (default)  OAuth2 Access Token (Test Mode)",
            "title": "Security"
        },
        {
            "location": "/api-guide/scim-api/#request_11",
            "text": "Content-Type:   application/scim+json ,  application/json",
            "title": "Request"
        },
        {
            "location": "/api-guide/scim-api/#parameters_11",
            "text": "Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         BulkRequest \n          -  \n         BulkRequest",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/scim-api/#response_11",
            "text": "Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/",
            "text": "UMA API Document\n#\n\n\nUser-Managed Access (UMA) is a profile of OAuth 2.0. UMA defines how \nresource owners can manipulate the protect resources.\nThe client can have access by arbitrary requesting parties, which means the \nrequesting resource can be any number of resource servers and a centralized \nauthorization server managing the access based on protected resource rules and policies defined.\n\n\nIn order to increase interoperable communication among the \nauthorization server, resource server, and client, UMA leverages \ntwo purpose-built APIs related to the outsourcing of authorization, \nthemselves protected by OAuth (or an OAuth-based authentication protocol) in embedded fashion.\n\n\nThe UMA protocol has three broad phases as below\n\n\n                                          +--------------+\n                                           |   resource   |\n          +---------manage (A)------------ |     owner    |\n          |                                +--------------+\n          |         Phase 1:                      |\n          |         protect a                control (C)\n          |         resource                      |\n          v                                       v\n   +------------+               +----------+--------------+\n   |            |               |protection|              |\n   |  resource  |               |   API    | authorization|\n   |   server   |<-protect (B)--|  (needs  |    server    |\n   |            |               |   PAT)   |              |\n   +------------+               +----------+--------------+\n   | protected  |                          | authorization|\n   | resource   |                          |     API      |\n   |(needs RPT) |                          |  (needs AAT) |\n   +------------+                          +--------------+\n          ^                                       |\n          |         Phases 2 and 3:         authorize (D)\n          |         get authorization,            |\n          |         access a resource             v\n          |                                +--------------+\n          +---------access (E)-------------|    client    |\n                                           +--------------+\n\n                                           requesting party\n\n\n\n\nThe Three Phases of the UMA. \n\n\n\n\n\n\nProtect a resource\n\n\n\n\n\n\nGet Authorization\n\n\n\n\n\n\nAccess a Resource\n\n\n\n\n\n\nUMA Discovery API\n#\n\n\n /.well-known/uma-configuration\n\n\nOverview\n#\n\n\nPATH\n#\n\n\n/oxauth/uma-configuration\n\n\ngetConfiguration\n#\n\n\nGET\n \n/oxauth/uma-configuration\n\n\nProvides configuration data as JSON document. It contains options and\nendpoints supported by the authorization server.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/uma-configuration\n\n\n\nParameters\n#\n\n\n\n    \n\n        \nAccess\n\n        \nType\n\n        \nrequired\n\n        \nDescription\n\n    \n\n    \n\n        \nScopes\n\n        \nArray(string)\n\n        \nrequired\n\n        \n-\n\n    \n\n    \n\n        \nClaims\n\n        \nstring\n\n        \nrequired\n\n        \n-\n\n    \n\n\n\n\nResponse\n#\n\n\nUmaConfiguration\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n500\n\n        \nFailed to build UMA configuration JSON object.\n\n    \n\n\n\n\n\n\nData Types\n#\n\n\nUmaConfiguration\n#\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nversion\n\n        \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nissuer\n\n        \nA URI indicating the party operating the authorization server.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \npatProfilesSupported\n\n        \nOAuth access token profiles supported by this authorization server for PAT issuance. The property value is an array of string values, where each string value is either a reserved keyword defined in this specification or a URI identifying an access token profile defined elsewhere. The reserved keyword \"bearer\" as a value for this property stands for the OAuth bearer token profile [OAuth-bearer]. The authorization server is REQUIRED to support this profile, and to supply this string value explicitly. The authorization server MAY declare its support for additional access token profiles for PATs.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \naatProfilesSupported\n\n        \nOAuth access token profiles supported by this authorization server for AAT issuance. The property value is an array of string values, where each string value is either a reserved keyword defined in this specification or a URI identifying an access token profile defined elsewhere. The reserved keyword \"bearer\" as a value for this property stands for the OAuth bearer token profile [OAuth-bearer]. The authorization server is REQUIRED to support this profile, and to supply this string value explicitly. The authorization server MAY declare its support for additional access token profiles for AATs.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \nrptProfilesSupported\n\n        \nUMA RPT profiles supported by this authorization server for RPT issuance. The property value is an array of string values, where each string value is either a reserved keyword defined in this specification or a URI identifying an RPT profile defined elsewhere. The reserved keyword \"bearer\" as a value for this property stands for the UMA bearer RPT profile defined in Section 3.3.2. The authorization server is REQUIRED to support this profile, and to supply this string value explicitly. The authorization server MAY declare its support for additional RPT profiles.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \npatGrantTypesSupported\n\n        \nOAuth grant types supported by this authorization server in issuing PATs. The property value is an array of string values. Each string value MUST be one of the grant_type values defined in [OAuth2], or alternatively a URI identifying a grant type defined elsewhere.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \naatGrantTypesSupported\n\n        \nOAuth grant types supported by this authorization server in issuing AATs. The property value is an array of string values. Each string value MUST be one of the grant_type values defined in [OAuth2], or alternatively a URI identifying a grant type defined elsewhere.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \nclaimTokenProfilesSupported\n\n        \nClaim formats and associated sub-protocols for gathering claims from requesting parties, as supported by this authorization server. The property value is an array of string values, which each string value is either a reserved keyword defined in this specification or a URI identifying a claim profile defined elsewhere.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \noptional\n\n        \numaProfilesSupported\n\n        \nUMA profiles supported by this authorization server. The property value is an array of string values, where each string value is a URI identifying an UMA profile. Examples of UMA profiles are the API extensibility profiles defined in Section 5.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \ndynamicClientEndpoint\n\n        \nThe endpoint to use for performing dynamic client registration. Usage of this endpoint is defined by [DynClientReg]. The presence of this property indicates authorization server support for the dynamic client registration feature and its absence indicates a lack of support.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \ntokenEndpoint\n\n        \nThe endpoint URI at which the resource server or client asks the authorization server for a PAT or AAT, respectively. A requested scope of \"uma_protection\" results in a PAT. A requested scope of \"uma_authorization\" results in an AAT. Usage of this endpoint is defined by [OAuth2].\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nresourceSetRegistrationEndpoint\n\n        \nThe endpoint URI at which the resource server introspects an RPT presented to it by a client. Usage of this endpoint is defined by [OAuth-introspection] and Section 3.3.1. A valid PAT MUST accompany requests to this protected endpoint.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nintrospectionEndpoint\n\n        \nThe endpoint URI at which the resource server introspects an RPT presented to it by a client. Usage of this endpoint is defined by [OAuth-introspection] and Section 3.3.1. A valid PAT MUST accompany requests to this protected endpoint.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \npermissionRegistrationEndpoint\n\n        \nThe endpoint URI at which the resource server registers a client-requested permission with the authorization server. Usage of this endpoint is defined by Section 3.2. A valid PAT MUST accompany requests to this protected endpoint.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nrptEndpoint\n\n        \nThe endpoint URI at which the client asks the authorization server for an RPT. Usage of this endpoint is defined by Section 3.4.1. A valid AAT MUST accompany requests to this protected endpoint.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \ngatEndpoint\n\n        \nThe endpoint URI at which the client asks the authorization server for an GAT. Usage of this endpoint is defined by Gluu documentation.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nauthorizationEndpoint\n\n        \nThe endpoint URI at which the client asks to have authorization data associated with its RPT. Usage of this endpoint is defined in Section 3.4.2. A valid AAT MUST accompany requests to this protected endpoint.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nscopeEndpoint\n\n        \nScope endpoint\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nrequestingPartyClaimsEndpoint\n\n        \nThe endpoint URI at which the authorization server interacts with the end-user requesting party to gather claims. If this property is absent, the authorization server does not interact with the end-user requesting party for claims gathering.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \nrptAsJwt\n\n        \nRPT as JWT\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \nrptAsJwt\n\n        \nRPT as JWT\n\n        \n-\n\n    \n\n\n\n\n\nUMA Authorization API\n#\n\n\nOverview\n#\n\n\nPATH\n#\n\n\n/requester/perm\n\n\nrequestRptPermissionAuthorization\n#\n\n\nPOST\n \n\n\n/requester/perm\n\n\nClient Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this\nauthorization server, the client asks the authorization server to give\nit authorization data corresponding to that permission ticket. It\nperforms a POST on the RPT endpoint, supplying its own AAT in the header\nand a JSON object in the body with a \"ticket\" property containing the\nticket as its value.\n\n\nIf the client had included an RPT in its failed access attempt, It MAY\nalso provide that RPT in an \"rpt\" property in its request to the\nauthorization server.\n\n\nIn circumstances where the client needs to provide requesting party\nclaims to the authorization server, it MAY also include a \"claim_tokens\"\nproperty in its request; see Section 3.4.1.2.1 for more information. The\nauthorization server uses the ticket to look up the details of the\npreviously registered requested permission, maps the requested\npermission to operative resource owner policies based on the resource\nset identifier and scopes associated with it, potentially requests\nadditional information, and ultimately responds positively or negatively\nto the request for authorization data.\n\n\nThe authorization server bases the issuing of authorization data on\nresource owner policies. These policies thus amount to an asynchronous\nOAuth authorization grant. The authorization server is also free to\nenable the resource owner to set policies that require the owner to\ninteract with the server in near-real time to provide consent subsequent\nto an access attempt. All such processes are outside the scope of this\nspecification.\n\n\nURL\n#\n\n\nhttp://gluu.org/requester/perm\n\n\n\nParameters\n#\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \nfalse\n\n        \n\n        \nRptAuthorizationRequest\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \nthe resource server will receive\n         an error of any kind from the authorization server \n         when trying to register a requested permission such that \n         it did not receive a permission ticket, then assuming the \n         resource server chooses to respond to the client\n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \nThe Client Host seeking access\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n403\n\n            \nForbidden. Example of a \"need_info\" respo\n            nse with a full set of \"error_details\" hints:\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n\n{\n \"error\": \"need_info\",\n \"error_details\": {\n   \"authentication_context\": {\n     \"required_acr\": [\"https://example.com/acrs/LOA3.14159\"]\n   },\n   \"requesting_party_claims\": {\n     \"required_claims\": [\n       {\n         \"name\": \"email23423453ou453\",\n         \"friendly_name\": \"email\",\n         \"claim_type\": \"urn:oid:0.9.2342.19200300.100.1.3\",\n         \"claim_token_format\": \n[\"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\"],\n         \"issuer\": [\"https://example.com/idp\"]\n       }\n     ],\n     \"redirect_user\": true,\n     \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n   }\n }\n}\n\n\n        \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n        \n\n            \n400\n\n            \nBad request\n\n        \n\n\n\n\n\n\nData Types\n#\n\n\nClaimTokenList\n#\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nformat\n\n        \nA string specifying the format of the accompanying \n        claim tokens. \n        The string MAY be a URI.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \ntoken\n\n        \nA string containing the claim information in the \n        indicated format, base64url encoded if it is not already so encoded. If claim token format features are included that require special interpretation, the client and authorization server are assumed to have a prior relationship \n        that establishes how to interpret these features.\n\n        \n-\n\n    \n\n\n\n\n\nRptAuthorizationRequest\n#\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nClaimTokenList\n\n        \nrequired\n\n        \nclaims\n\n        \n-\n\n     \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nrpt\n\n        \nRequesting party token\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nticket\n\n        \nThe same permission ticket value that the client \n        provided in the request. It MUST be present \n        if and only if the authorization_state is need_info.\n\n        \n-\n\n    \n\n\n\n\n\nUMA Create rpt API\n#\n\n\n /requester/rpt\n\n\nOverview\n#\n\n\nThe endpoint at which the requester asks the \nAM to issue an RPT.\n\n\nPATH\n#\n\n\n/requester/rpt\n\n\nPermissionToken\n#\n\n\nPOST\n \n\n\n/requester/rpt\n\n\nURL\n#\n\n\nhttp://gluu.org/requester/rpt\n\n\n\nParameters\n#\n\n\n\n\n\n\nheader\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nticket\n\n        \nrequired\n\n        \n-\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\nUMA Resource Registration API\n#\n\n\n/host/rsrc/resource_set\n\n\nOverview\n#\n\n\nResource set is defined by the resource server, which is required\nby the authorization server to register the resource set description.\n\n\nResource set description is a JSON document with the \nfollowing properties described in \nResourceSet\n\n\nRESTful API  is used by Resource Server at the authorization server's \nresource set registration endpoint to create, read, update, and delete \nresource set description.\n\n\nRequest to the resource set is registration is incorrect, the authorization\nserver responds with an with error message by including the below  error \ncodes in the response. Discussed detail in \nunsupported methods\n\n\n\n\nunsupported_method_type: The resource server request used an unsupported HTTP method. \n  The authorization server MUST respond with the HTTP 405 (Method Not Allowed) status code.\n\n\nnot_found: The resource set requested from the authorization server cannot be \n  found. The authorization server MUST respond with HTTP 404 (Not Found) status code.\n\n\n\n\nPATH\n#\n\n\n/host/rsrc/resource_set{rsid}\n\n\ndeleteResourceSet\n#\n\n\nDELETE\n \n/host/rsrc/resource_set{rsid}\n\n\nDeletes a previously registered resource set description using the\nDELETE method, thereby removing it from the authorization server's\nprotection regime.\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n#\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nResourceSet\n\n\nJSON body of a successful response will contain the following properties\n\n\n\n        \n\n            \nParameter\n\n            \nRequired\n\n            \nDescription\n\n            \nData Type\n\n        \n\n        \n\n            \n_id\n\n            \nrequired\n\n            \nA string value repeating the authorization server-defined \n            identifier for the web resource corresponding to the resource set. Its appearance in the body makes it readily available as an object identifier for various resource set management tasks.\n\n            \nstring\n\n        \n\n        \n\n            \nuser_access_policy_uri\n\n            \noptional\n\n            \nA URI that allows the resource server to redirect an end-user \n            resource owner to a specific user interface within the authorization \n            server where the resource owner can immediately set or modify access policies \n            subsequent to the resource set registration action just completed. \n            The authorization server is free to choose the targeted user interface.\n\n            \nstring\n\n        \n\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\ngetResourceSet\n#\n\n\nGET\n \n\n\n/host/rsrc/resource_set{rsid}\n\n\nReads a previously registered resource set description using the GET\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes a body containing the\nreferenced resource set description, along with an \"_id\" property.\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n#\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description object ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nResourceSet\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\nupdateResourceSet\n#\n\n\nPUT\n \n/host/rsrc/resource_set{rsid}\n\n\nUpdates a previously registered resource set description using the PUT\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes an \"_id\" property.\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n#\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nResource set description JSON object\n\n        \nResourceSet\n\n    \n\n\n\n- path\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\nResourceSetList\n#\n\n\nPath\n#\n\n\n/host/rsrc/resource_set\n\n\nGET\n \n\n\n/host/rsrc/resource_set\n\n\nLists all previously registered resource set identifiers for \nthis user using the GET method. \nThe authorization server MUST return the list in\nthe form of a JSON array of {rsid} string values.\n\n\nThe resource server uses this method as a first step in checking whether\nits understanding of protected resources is in full synchronization with\nthe authorization server's understanding.\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n#\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n        \nName\n\n        \nrequired\n\n        \nA human-readable string describing some scope (extent) of access. \n        The authorization server MAY use this name in any user interface \n        it presents to the resource owner.\n\n        \nstring\n\n    \n\n    \n\n        \nicon_uri\n\n        \noptional\n\n        \nA URI for a graphic icon representing the scope. \n        The authorization server MAY use the referenced icon in \n        any user interface it presents to the resource owner.\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nheader\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nrequired\n\n        \naccess token in the header, \n        response from the authorization server\n        , if the request is successful. \n        Along with the properties below\n\n        \nstring\n\n    \n\n    \n\n        \n_id\n\n        \nrequired\n\n        \nObtained the request is successful, \n        from the authroization server\n\n        \nstring\n\n    \n\n    \nName\n\n        \nrequired\n\n        \nA human-readable string describing some scope (extent) of access. \n        The authorization server MAY use this name in any user interface \n        it presents to the resource owner.\n\n        \nstring\n\n    \n\n    \n\n        \nicon_uri\n\n        \noptional\n\n        \nA URI for a graphic icon representing the scope. \n        The authorization server MAY use the referenced icon in \n        any user interface it presents to the resource owner.\n\n        \nstring\n\n    \n\n    \n\n        \nscopes\n\n        \nrequired\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\nResourceSet\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized\n\n    \n\n\n\n\n\n\ncreateResourceSet\n#\n\n\nPOST\n \n/host/rsrc/resource_set\n\n\nAdds a new resource set description using the POST method. If the\nrequest is successful, the authorization server MUST respond with a\nstatus message that includes an _id property.\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n#\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nResource set description\n\n        \nResourceSet\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nrequired\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nunsupportedHeadMethod\n#\n\n\nHEAD\n \n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n#\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n    \n\n    \n\n        \nerror\n\n        \nrequired\n\n        \nA single error code. Values for this \n        property are defined throughout this specification.\n\n    \n\n    \n\n        \nerror_description\n\n        \noptional\n\n        \nA URI identifying a human-readable web \n        page with information about the error.\n\n     \n\n    \n\n        \nerror_uri\n\n        \noptional\n\n        \nA single error code. Values for this \n        property are defined throughout this specification.\n\n     \n \n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nunsupportedOptionsMethod\n#\n\n\nOPTIONS\n \n\n\n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n#\n\n\n[unsupported methods]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nData Types\n#\n\n\nResourceSet\n#\n\n\n\n    \n\n        \nType\n\n        \nRequired\n\n        \nAccess\n\n        \nDescription\n\n        \nNotes\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nname\n\n        \nA human-readable string describing a set of \n        one or more resources. The authorization server \n        MAY use this name in any user interface it presents \n        to the resource owner.\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \nuri\n\n        \nA URI that provides the network location for the \n        resource set being registered. For example, if the \n        resource set corresponds to a digital photo, the value \n        of this property could be an HTTP-based URI identifying \n        the location of the photo on the web. The authorization \n        server MAY use this information in various ways to \n        inform clients about a resource set's location.\n\n        \n When a client attempts access to a presumptively \n        protected resource without an access token, the resource \n        server needs to ascertain the authorization server and \n        resource set identifier associated with that resource \n        without any context to guide it. In practice, this likely \n        means that the URI reference used \n        by the client needs to be unique per resource set.\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \ntype\n\n        \nA string uniquely identifying the semantics of the \n        resource set. For example, if the resource set \n        consists of a single resource that is an identity \n        claim that leverages standardized claim semantics for \n        \"verified email address\", the value of this property \n        could be an identifying URI for this claim. \n        The authorization server MAY use this information in \n        processing information about the resource set or \n        displaying information about it in any user \n        interface it presents to the resource owner.\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \nscopes\n\n        \nAn array of strings indicating the available scopes for this resource set. \n        Any of the strings MAY be either a plain string or a URI \n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \noptional\n\n        \nicon_uri\n\n        \nA URI for a graphic icon representing the resource \n        set. The authorization server MAY use the referenced icon in \n        any user interface it presents to the resource owner.\n\n        \n-\n\n    \n\n\n\n\n\nUMA Permission Registration API\n#\n\n\n /host/rsrc_pr\n\n\nOverview\n#\n\n\nPATH\n#\n\n\n/host/rsrc_pr\n\n\nregisterResourceSetPermission\n#\n\n\nPOST\n \n\n\n/host/rsrc_pr\n\n\nRegisters permission using the POST method.\nThe resource server uses the POST method at the endpoint. The body of\nthe HTTP request message contains a JSON object providing the requested\npermission, using a format derived from the scope description format\nspecified in [OAuth-resource-reg], as follows. The object has the\nfollowing properties:\n\n\nURL\n#\n\n\nhttp://gluu.org/host/rsrc_pr\n\n\n\nParameters\n#\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nThe identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered.\n\n        \nUmaPermission\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n        \n\n            \n400\n\n            \nBad Request\n\n        \n\n\n\n\n\n\nData Types\n#\n\n\nUmaPermission\n#\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n    \n\n        \nDate\n\n        \noptional\n\n        \nissuedAt\n\n        \nIssued date of the permission request\n\n        \n-\n\n    \n\n    \n\n        \nArray[string]\n\n        \nrequired\n\n        \nscopes\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nDate\n\n        \noptional\n\n        \nexpiresAt\n\n        \nExpiry of the permission request\n\n        \n-\n\n    \n\n    \n\n        \nstring\n\n        \nrequired\n\n        \nresourceSetId\n\n        \n-\n\n        \n-\n\n    \n\n    \n\n        \nDate\n\n        \noptional\n\n        \nnbf\n\n        \nnot before\n\n        \n-\n\n    \n\n\n\n\n\nUMA rpt Status API\n#\n\n\n /rpt/status \n\n\nOverview\n#\n\n\nPATH\n#\n\n\n/rpt/status\n\n\nrequestRptStatusGet\n#\n\n\nGET\n \n\n/rpt/status\n\n\nNot allowed\n\n\nURL\n#\n\n\nhttp://gluu.org/rpt/status\n\n\n\nParameters\n#\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ntoken\n\n        \nrequired\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \ntoken_type_hint\n\n        \nrequired\n\n        \n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n405\n\n        \nIntrospection of RPT is not allowed by GET HTTP method.\n\n    \n\n\n\n\n\n\nrequestRptStatus\n#\n\n\nPOST\n \n/rpt/status\n\n\nThe resource server MUST determine a received RPT's status, including\nboth whether it is active and, if so, its associated authorization data,\nbefore giving or refusing access to the client. An RPT is associated\nwith a set of authorization data that governs whether the client is\nauthorized for access. \n\n\nThe token's nature and format are dictated by its profile. The profile\nmight allow it to be self-contained, such that the resource server is\nable to determine its status locally, or might require or allow the\nresource server to make a run-time introspection request of the\nauthorization server that issued the token.\n\n\nThe endpoint MAY allow other parameters to provide further context to\nthe query. For instance, an authorization service may need to know the\nIP address of the client accessing the protected resource in order to\ndetermine the appropriateness of the token being presented.\n\n\nTo prevent unauthorized token scanning attacks, the endpoint MUST also\nrequire some form of authorization to access this endpoint, such as\nclient authentication as described in OAuth 2.0 [RFC6749] or a separate\nOAuth 2.0 access token such as the bearer token described in OAuth 2.0\nBearer Token Usage [RFC6750]. The methods of managing and validating\nthese authentication credentials are out of scope of this specification.\n\n\nURL\n#\n\n\nhttp://gluu.org/rpt/status\n\n\n\nParameters\n#\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ntoken\n\n        \ntrue\n\n        \nThe string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint as defined\nin OAuth 2.0 [RFC6749] section 5.1. For refresh tokens, this is the\n\"refresh_token\" value returned from the token endpoint as defined in\nOAuth 2.0 [RFC6749] section 5.1. Other token types are outside the scope\nof this specification.\n\n        \nstring\n\n    \n\n    \n\n        \ntoken_type_hint\n\n        \nfalse\n\n        \nA hint about the type of the token submitted for\nintrospection. The protected resource MAY pass this parameter in order\nto help the authorization server to optimize the token lookup. If the\nserver is unable to locate the token using the given hint, it MUST\nextend its search across all of its supported token types. An\nauthorization server MAY ignore this parameter, particularly if it is\nable to detect the token type automatically. Values for this field are\ndefined in OAuth Token Revocation [RFC7009].\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n#\n\n\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n    \n\n        \n401\n\n        \nUnauthorized",
            "title": "UMA API"
        },
        {
            "location": "/api-guide/uma-api/#uma-api-document",
            "text": "User-Managed Access (UMA) is a profile of OAuth 2.0. UMA defines how \nresource owners can manipulate the protect resources.\nThe client can have access by arbitrary requesting parties, which means the \nrequesting resource can be any number of resource servers and a centralized \nauthorization server managing the access based on protected resource rules and policies defined.  In order to increase interoperable communication among the \nauthorization server, resource server, and client, UMA leverages \ntwo purpose-built APIs related to the outsourcing of authorization, \nthemselves protected by OAuth (or an OAuth-based authentication protocol) in embedded fashion.  The UMA protocol has three broad phases as below                                            +--------------+\n                                           |   resource   |\n          +---------manage (A)------------ |     owner    |\n          |                                +--------------+\n          |         Phase 1:                      |\n          |         protect a                control (C)\n          |         resource                      |\n          v                                       v\n   +------------+               +----------+--------------+\n   |            |               |protection|              |\n   |  resource  |               |   API    | authorization|\n   |   server   |<-protect (B)--|  (needs  |    server    |\n   |            |               |   PAT)   |              |\n   +------------+               +----------+--------------+\n   | protected  |                          | authorization|\n   | resource   |                          |     API      |\n   |(needs RPT) |                          |  (needs AAT) |\n   +------------+                          +--------------+\n          ^                                       |\n          |         Phases 2 and 3:         authorize (D)\n          |         get authorization,            |\n          |         access a resource             v\n          |                                +--------------+\n          +---------access (E)-------------|    client    |\n                                           +--------------+\n\n                                           requesting party  The Three Phases of the UMA.     Protect a resource    Get Authorization    Access a Resource",
            "title": "UMA API Document"
        },
        {
            "location": "/api-guide/uma-api/#uma-discovery-api",
            "text": "/.well-known/uma-configuration",
            "title": "UMA Discovery API"
        },
        {
            "location": "/api-guide/uma-api/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/uma-api/#path",
            "text": "/oxauth/uma-configuration",
            "title": "PATH"
        },
        {
            "location": "/api-guide/uma-api/#getconfiguration",
            "text": "GET   /oxauth/uma-configuration  Provides configuration data as JSON document. It contains options and\nendpoints supported by the authorization server.",
            "title": "getConfiguration"
        },
        {
            "location": "/api-guide/uma-api/#url",
            "text": "http://gluu.org/oxauth/uma-configuration",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters",
            "text": "Access \n         Type \n         required \n         Description \n     \n     \n         Scopes \n         Array(string) \n         required \n         - \n     \n     \n         Claims \n         string \n         required \n         -",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response",
            "text": "UmaConfiguration",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors",
            "text": "Status Code \n         Reason \n     \n     \n         500 \n         Failed to build UMA configuration JSON object.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api-guide/uma-api/#umaconfiguration",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         string \n         required \n         version \n         The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\". \n         - \n     \n     \n         string \n         required \n         issuer \n         A URI indicating the party operating the authorization server. \n         - \n     \n     \n         Array[string] \n         required \n         patProfilesSupported \n         OAuth access token profiles supported by this authorization server for PAT issuance. The property value is an array of string values, where each string value is either a reserved keyword defined in this specification or a URI identifying an access token profile defined elsewhere. The reserved keyword \"bearer\" as a value for this property stands for the OAuth bearer token profile [OAuth-bearer]. The authorization server is REQUIRED to support this profile, and to supply this string value explicitly. The authorization server MAY declare its support for additional access token profiles for PATs. \n         - \n     \n     \n         Array[string] \n         required \n         aatProfilesSupported \n         OAuth access token profiles supported by this authorization server for AAT issuance. The property value is an array of string values, where each string value is either a reserved keyword defined in this specification or a URI identifying an access token profile defined elsewhere. The reserved keyword \"bearer\" as a value for this property stands for the OAuth bearer token profile [OAuth-bearer]. The authorization server is REQUIRED to support this profile, and to supply this string value explicitly. The authorization server MAY declare its support for additional access token profiles for AATs. \n         - \n     \n     \n         Array[string] \n         required \n         rptProfilesSupported \n         UMA RPT profiles supported by this authorization server for RPT issuance. The property value is an array of string values, where each string value is either a reserved keyword defined in this specification or a URI identifying an RPT profile defined elsewhere. The reserved keyword \"bearer\" as a value for this property stands for the UMA bearer RPT profile defined in Section 3.3.2. The authorization server is REQUIRED to support this profile, and to supply this string value explicitly. The authorization server MAY declare its support for additional RPT profiles. \n         - \n     \n     \n         Array[string] \n         required \n         patGrantTypesSupported \n         OAuth grant types supported by this authorization server in issuing PATs. The property value is an array of string values. Each string value MUST be one of the grant_type values defined in [OAuth2], or alternatively a URI identifying a grant type defined elsewhere. \n         - \n     \n     \n         Array[string] \n         required \n         aatGrantTypesSupported \n         OAuth grant types supported by this authorization server in issuing AATs. The property value is an array of string values. Each string value MUST be one of the grant_type values defined in [OAuth2], or alternatively a URI identifying a grant type defined elsewhere. \n         - \n     \n     \n         Array[string] \n         optional \n         claimTokenProfilesSupported \n         Claim formats and associated sub-protocols for gathering claims from requesting parties, as supported by this authorization server. The property value is an array of string values, which each string value is either a reserved keyword defined in this specification or a URI identifying a claim profile defined elsewhere. \n         - \n     \n     \n         Array[string] \n         optional \n         umaProfilesSupported \n         UMA profiles supported by this authorization server. The property value is an array of string values, where each string value is a URI identifying an UMA profile. Examples of UMA profiles are the API extensibility profiles defined in Section 5. \n         - \n     \n     \n         string \n         required \n         dynamicClientEndpoint \n         The endpoint to use for performing dynamic client registration. Usage of this endpoint is defined by [DynClientReg]. The presence of this property indicates authorization server support for the dynamic client registration feature and its absence indicates a lack of support. \n         - \n     \n     \n         string \n         required \n         tokenEndpoint \n         The endpoint URI at which the resource server or client asks the authorization server for a PAT or AAT, respectively. A requested scope of \"uma_protection\" results in a PAT. A requested scope of \"uma_authorization\" results in an AAT. Usage of this endpoint is defined by [OAuth2]. \n         - \n     \n     \n         string \n         required \n         resourceSetRegistrationEndpoint \n         The endpoint URI at which the resource server introspects an RPT presented to it by a client. Usage of this endpoint is defined by [OAuth-introspection] and Section 3.3.1. A valid PAT MUST accompany requests to this protected endpoint. \n         - \n     \n     \n         string \n         required \n         introspectionEndpoint \n         The endpoint URI at which the resource server introspects an RPT presented to it by a client. Usage of this endpoint is defined by [OAuth-introspection] and Section 3.3.1. A valid PAT MUST accompany requests to this protected endpoint. \n         - \n     \n     \n         string \n         required \n         permissionRegistrationEndpoint \n         The endpoint URI at which the resource server registers a client-requested permission with the authorization server. Usage of this endpoint is defined by Section 3.2. A valid PAT MUST accompany requests to this protected endpoint. \n         - \n     \n     \n         string \n         required \n         rptEndpoint \n         The endpoint URI at which the client asks the authorization server for an RPT. Usage of this endpoint is defined by Section 3.4.1. A valid AAT MUST accompany requests to this protected endpoint. \n         - \n     \n     \n         string \n         required \n         gatEndpoint \n         The endpoint URI at which the client asks the authorization server for an GAT. Usage of this endpoint is defined by Gluu documentation. \n         - \n     \n     \n         string \n         required \n         authorizationEndpoint \n         The endpoint URI at which the client asks to have authorization data associated with its RPT. Usage of this endpoint is defined in Section 3.4.2. A valid AAT MUST accompany requests to this protected endpoint. \n         - \n     \n     \n         string \n         required \n         scopeEndpoint \n         Scope endpoint \n         - \n     \n     \n         string \n         required \n         requestingPartyClaimsEndpoint \n         The endpoint URI at which the authorization server interacts with the end-user requesting party to gather claims. If this property is absent, the authorization server does not interact with the end-user requesting party for claims gathering. \n         - \n     \n     \n         string \n         optional \n         rptAsJwt \n         RPT as JWT \n         - \n     \n     \n         string \n         optional \n         rptAsJwt \n         RPT as JWT \n         -",
            "title": "UmaConfiguration"
        },
        {
            "location": "/api-guide/uma-api/#uma-authorization-api",
            "text": "",
            "title": "UMA Authorization API"
        },
        {
            "location": "/api-guide/uma-api/#overview_1",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/uma-api/#path_1",
            "text": "/requester/perm",
            "title": "PATH"
        },
        {
            "location": "/api-guide/uma-api/#requestrptpermissionauthorization",
            "text": "POST    /requester/perm  Client Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this\nauthorization server, the client asks the authorization server to give\nit authorization data corresponding to that permission ticket. It\nperforms a POST on the RPT endpoint, supplying its own AAT in the header\nand a JSON object in the body with a \"ticket\" property containing the\nticket as its value.  If the client had included an RPT in its failed access attempt, It MAY\nalso provide that RPT in an \"rpt\" property in its request to the\nauthorization server.  In circumstances where the client needs to provide requesting party\nclaims to the authorization server, it MAY also include a \"claim_tokens\"\nproperty in its request; see Section 3.4.1.2.1 for more information. The\nauthorization server uses the ticket to look up the details of the\npreviously registered requested permission, maps the requested\npermission to operative resource owner policies based on the resource\nset identifier and scopes associated with it, potentially requests\nadditional information, and ultimately responds positively or negatively\nto the request for authorization data.  The authorization server bases the issuing of authorization data on\nresource owner policies. These policies thus amount to an asynchronous\nOAuth authorization grant. The authorization server is also free to\nenable the resource owner to set policies that require the owner to\ninteract with the server in near-real time to provide consent subsequent\nto an access attempt. All such processes are outside the scope of this\nspecification.",
            "title": "requestRptPermissionAuthorization"
        },
        {
            "location": "/api-guide/uma-api/#url_1",
            "text": "http://gluu.org/requester/perm",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_1",
            "text": "body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         false \n         \n         RptAuthorizationRequest \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         the resource server will receive\n         an error of any kind from the authorization server \n         when trying to register a requested permission such that \n         it did not receive a permission ticket, then assuming the \n         resource server chooses to respond to the client \n         string \n     \n     \n         Host \n         false \n         The Client Host seeking access \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_1",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_1",
            "text": "Status Code \n         Reason \n     \n         \n             403 \n             Forbidden. Example of a \"need_info\" respo\n            nse with a full set of \"error_details\" hints:\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n\n{\n \"error\": \"need_info\",\n \"error_details\": {\n   \"authentication_context\": {\n     \"required_acr\": [\"https://example.com/acrs/LOA3.14159\"]\n   },\n   \"requesting_party_claims\": {\n     \"required_claims\": [\n       {\n         \"name\": \"email23423453ou453\",\n         \"friendly_name\": \"email\",\n         \"claim_type\": \"urn:oid:0.9.2342.19200300.100.1.3\",\n         \"claim_token_format\": \n[\"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\"],\n         \"issuer\": [\"https://example.com/idp\"]\n       }\n     ],\n     \"redirect_user\": true,\n     \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n   }\n }\n} \n         \n         \n             401 \n             Unauthorized \n         \n         \n             400 \n             Bad request",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#data-types_1",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api-guide/uma-api/#claimtokenlist",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         string \n         required \n         format \n         A string specifying the format of the accompanying \n        claim tokens. \n        The string MAY be a URI. \n         - \n     \n     \n         string \n         required \n         token \n         A string containing the claim information in the \n        indicated format, base64url encoded if it is not already so encoded. If claim token format features are included that require special interpretation, the client and authorization server are assumed to have a prior relationship \n        that establishes how to interpret these features. \n         -",
            "title": "ClaimTokenList"
        },
        {
            "location": "/api-guide/uma-api/#rptauthorizationrequest",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         ClaimTokenList \n         required \n         claims \n         - \n      \n     \n         string \n         required \n         rpt \n         Requesting party token \n         - \n     \n     \n         string \n         required \n         ticket \n         The same permission ticket value that the client \n        provided in the request. It MUST be present \n        if and only if the authorization_state is need_info. \n         -",
            "title": "RptAuthorizationRequest"
        },
        {
            "location": "/api-guide/uma-api/#uma-create-rpt-api",
            "text": "/requester/rpt",
            "title": "UMA Create rpt API"
        },
        {
            "location": "/api-guide/uma-api/#overview_2",
            "text": "The endpoint at which the requester asks the \nAM to issue an RPT.",
            "title": "Overview"
        },
        {
            "location": "/api-guide/uma-api/#path_2",
            "text": "/requester/rpt",
            "title": "PATH"
        },
        {
            "location": "/api-guide/uma-api/#permissiontoken",
            "text": "POST    /requester/rpt",
            "title": "PermissionToken"
        },
        {
            "location": "/api-guide/uma-api/#url_2",
            "text": "http://gluu.org/requester/rpt",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_2",
            "text": "header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         ticket \n         required \n         - \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_2",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_2",
            "text": "Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#uma-resource-registration-api",
            "text": "/host/rsrc/resource_set",
            "title": "UMA Resource Registration API"
        },
        {
            "location": "/api-guide/uma-api/#overview_3",
            "text": "Resource set is defined by the resource server, which is required\nby the authorization server to register the resource set description.  Resource set description is a JSON document with the \nfollowing properties described in  ResourceSet  RESTful API  is used by Resource Server at the authorization server's \nresource set registration endpoint to create, read, update, and delete \nresource set description.  Request to the resource set is registration is incorrect, the authorization\nserver responds with an with error message by including the below  error \ncodes in the response. Discussed detail in  unsupported methods   unsupported_method_type: The resource server request used an unsupported HTTP method. \n  The authorization server MUST respond with the HTTP 405 (Method Not Allowed) status code.  not_found: The resource set requested from the authorization server cannot be \n  found. The authorization server MUST respond with HTTP 404 (Not Found) status code.",
            "title": "Overview"
        },
        {
            "location": "/api-guide/uma-api/#path_3",
            "text": "/host/rsrc/resource_set{rsid}",
            "title": "PATH"
        },
        {
            "location": "/api-guide/uma-api/#deleteresourceset",
            "text": "DELETE   /host/rsrc/resource_set{rsid}  Deletes a previously registered resource set description using the\nDELETE method, thereby removing it from the authorization server's\nprotection regime.",
            "title": "deleteResourceSet"
        },
        {
            "location": "/api-guide/uma-api/#url_3",
            "text": "http://gluu.org/host/rsrc/resource_set{rsid}",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_3",
            "text": "path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_3",
            "text": "ResourceSet  JSON body of a successful response will contain the following properties  \n         \n             Parameter \n             Required \n             Description \n             Data Type \n         \n         \n             _id \n             required \n             A string value repeating the authorization server-defined \n            identifier for the web resource corresponding to the resource set. Its appearance in the body makes it readily available as an object identifier for various resource set management tasks. \n             string \n         \n         \n             user_access_policy_uri \n             optional \n             A URI that allows the resource server to redirect an end-user \n            resource owner to a specific user interface within the authorization \n            server where the resource owner can immediately set or modify access policies \n            subsequent to the resource set registration action just completed. \n            The authorization server is free to choose the targeted user interface. \n             string",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_3",
            "text": "Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#getresourceset",
            "text": "GET    /host/rsrc/resource_set{rsid}  Reads a previously registered resource set description using the GET\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes a body containing the\nreferenced resource set description, along with an \"_id\" property.",
            "title": "getResourceSet"
        },
        {
            "location": "/api-guide/uma-api/#url_4",
            "text": "http://gluu.org/host/rsrc/resource_set{rsid}",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_4",
            "text": "path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description object ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_4",
            "text": "ResourceSet",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_4",
            "text": "Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#updateresourceset",
            "text": "PUT   /host/rsrc/resource_set{rsid}  Updates a previously registered resource set description using the PUT\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes an \"_id\" property.",
            "title": "updateResourceSet"
        },
        {
            "location": "/api-guide/uma-api/#url_5",
            "text": "http://gluu.org/host/rsrc/resource_set{rsid}",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_5",
            "text": "body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         Resource set description JSON object \n         ResourceSet \n      \n- path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_5",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_5",
            "text": "Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#resourcesetlist",
            "text": "",
            "title": "ResourceSetList"
        },
        {
            "location": "/api-guide/uma-api/#path_4",
            "text": "/host/rsrc/resource_set  GET    /host/rsrc/resource_set  Lists all previously registered resource set identifiers for \nthis user using the GET method. \nThe authorization server MUST return the list in\nthe form of a JSON array of {rsid} string values.  The resource server uses this method as a first step in checking whether\nits understanding of protected resources is in full synchronization with\nthe authorization server's understanding.",
            "title": "Path"
        },
        {
            "location": "/api-guide/uma-api/#url_6",
            "text": "http://gluu.org/host/rsrc/resource_set",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_6",
            "text": "query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n         Name \n         required \n         A human-readable string describing some scope (extent) of access. \n        The authorization server MAY use this name in any user interface \n        it presents to the resource owner. \n         string \n     \n     \n         icon_uri \n         optional \n         A URI for a graphic icon representing the scope. \n        The authorization server MAY use the referenced icon in \n        any user interface it presents to the resource owner. \n         string \n         header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         required \n         access token in the header, \n        response from the authorization server\n        , if the request is successful. \n        Along with the properties below \n         string \n     \n     \n         _id \n         required \n         Obtained the request is successful, \n        from the authroization server \n         string \n     \n     Name \n         required \n         A human-readable string describing some scope (extent) of access. \n        The authorization server MAY use this name in any user interface \n        it presents to the resource owner. \n         string \n     \n     \n         icon_uri \n         optional \n         A URI for a graphic icon representing the scope. \n        The authorization server MAY use the referenced icon in \n        any user interface it presents to the resource owner. \n         string \n     \n     \n         scopes \n         required \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_6",
            "text": "ResourceSet",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_6",
            "text": "Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#createresourceset",
            "text": "POST   /host/rsrc/resource_set  Adds a new resource set description using the POST method. If the\nrequest is successful, the authorization server MUST respond with a\nstatus message that includes an _id property.",
            "title": "createResourceSet"
        },
        {
            "location": "/api-guide/uma-api/#url_7",
            "text": "http://gluu.org/host/rsrc/resource_set",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_7",
            "text": "body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         Resource set description \n         ResourceSet \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         required \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_7",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_7",
            "text": "Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#unsupportedheadmethod",
            "text": "HEAD   /host/rsrc/resource_set  Not allowed",
            "title": "unsupportedHeadMethod"
        },
        {
            "location": "/api-guide/uma-api/#url_8",
            "text": "http://gluu.org/host/rsrc/resource_set",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_8",
            "text": "Parameter \n         Required \n         Description \n     \n     \n         error \n         required \n         A single error code. Values for this \n        property are defined throughout this specification. \n     \n     \n         error_description \n         optional \n         A URI identifying a human-readable web \n        page with information about the error. \n      \n     \n         error_uri \n         optional \n         A single error code. Values for this \n        property are defined throughout this specification.",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#errors_8",
            "text": "Status Code \n         Reason",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#unsupportedoptionsmethod",
            "text": "OPTIONS    /host/rsrc/resource_set  Not allowed",
            "title": "unsupportedOptionsMethod"
        },
        {
            "location": "/api-guide/uma-api/#url_9",
            "text": "http://gluu.org/host/rsrc/resource_set",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_9",
            "text": "[unsupported methods]",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#errors_9",
            "text": "Status Code \n         Reason",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#data-types_2",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api-guide/uma-api/#resourceset",
            "text": "Type \n         Required \n         Access \n         Description \n         Notes \n     \n     \n         string \n         required \n         name \n         A human-readable string describing a set of \n        one or more resources. The authorization server \n        MAY use this name in any user interface it presents \n        to the resource owner. \n         - \n     \n     \n         string \n         optional \n         uri \n         A URI that provides the network location for the \n        resource set being registered. For example, if the \n        resource set corresponds to a digital photo, the value \n        of this property could be an HTTP-based URI identifying \n        the location of the photo on the web. The authorization \n        server MAY use this information in various ways to \n        inform clients about a resource set's location. \n          When a client attempts access to a presumptively \n        protected resource without an access token, the resource \n        server needs to ascertain the authorization server and \n        resource set identifier associated with that resource \n        without any context to guide it. In practice, this likely \n        means that the URI reference used \n        by the client needs to be unique per resource set. \n     \n     \n         string \n         optional \n         type \n         A string uniquely identifying the semantics of the \n        resource set. For example, if the resource set \n        consists of a single resource that is an identity \n        claim that leverages standardized claim semantics for \n        \"verified email address\", the value of this property \n        could be an identifying URI for this claim. \n        The authorization server MAY use this information in \n        processing information about the resource set or \n        displaying information about it in any user \n        interface it presents to the resource owner. \n         - \n     \n     \n         Array[string] \n         required \n         scopes \n         An array of strings indicating the available scopes for this resource set. \n        Any of the strings MAY be either a plain string or a URI  \n         - \n     \n     \n         string \n         optional \n         icon_uri \n         A URI for a graphic icon representing the resource \n        set. The authorization server MAY use the referenced icon in \n        any user interface it presents to the resource owner. \n         -",
            "title": "ResourceSet"
        },
        {
            "location": "/api-guide/uma-api/#uma-permission-registration-api",
            "text": "/host/rsrc_pr",
            "title": "UMA Permission Registration API"
        },
        {
            "location": "/api-guide/uma-api/#overview_4",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/uma-api/#path_5",
            "text": "/host/rsrc_pr",
            "title": "PATH"
        },
        {
            "location": "/api-guide/uma-api/#registerresourcesetpermission",
            "text": "POST    /host/rsrc_pr  Registers permission using the POST method.\nThe resource server uses the POST method at the endpoint. The body of\nthe HTTP request message contains a JSON object providing the requested\npermission, using a format derived from the scope description format\nspecified in [OAuth-resource-reg], as follows. The object has the\nfollowing properties:",
            "title": "registerResourceSetPermission"
        },
        {
            "location": "/api-guide/uma-api/#url_10",
            "text": "http://gluu.org/host/rsrc_pr",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_10",
            "text": "body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         The identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered. \n         UmaPermission \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_8",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_10",
            "text": "Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n         \n         \n             400 \n             Bad Request",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#data-types_3",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/api-guide/uma-api/#umapermission",
            "text": "type \n         required \n         access \n         description \n         notes \n     \n     \n         Date \n         optional \n         issuedAt \n         Issued date of the permission request \n         - \n     \n     \n         Array[string] \n         required \n         scopes \n         - \n         - \n     \n     \n         Date \n         optional \n         expiresAt \n         Expiry of the permission request \n         - \n     \n     \n         string \n         required \n         resourceSetId \n         - \n         - \n     \n     \n         Date \n         optional \n         nbf \n         not before \n         -",
            "title": "UmaPermission"
        },
        {
            "location": "/api-guide/uma-api/#uma-rpt-status-api",
            "text": "/rpt/status",
            "title": "UMA rpt Status API"
        },
        {
            "location": "/api-guide/uma-api/#overview_5",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/api-guide/uma-api/#path_6",
            "text": "/rpt/status",
            "title": "PATH"
        },
        {
            "location": "/api-guide/uma-api/#requestrptstatusget",
            "text": "GET   /rpt/status  Not allowed",
            "title": "requestRptStatusGet"
        },
        {
            "location": "/api-guide/uma-api/#url_11",
            "text": "http://gluu.org/rpt/status",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_11",
            "text": "form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         token \n         required \n         \n         string \n     \n     \n         token_type_hint \n         required \n         \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_9",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_11",
            "text": "Status Code \n         Reason \n     \n     \n         405 \n         Introspection of RPT is not allowed by GET HTTP method.",
            "title": "Errors"
        },
        {
            "location": "/api-guide/uma-api/#requestrptstatus",
            "text": "POST   /rpt/status  The resource server MUST determine a received RPT's status, including\nboth whether it is active and, if so, its associated authorization data,\nbefore giving or refusing access to the client. An RPT is associated\nwith a set of authorization data that governs whether the client is\nauthorized for access.   The token's nature and format are dictated by its profile. The profile\nmight allow it to be self-contained, such that the resource server is\nable to determine its status locally, or might require or allow the\nresource server to make a run-time introspection request of the\nauthorization server that issued the token.  The endpoint MAY allow other parameters to provide further context to\nthe query. For instance, an authorization service may need to know the\nIP address of the client accessing the protected resource in order to\ndetermine the appropriateness of the token being presented.  To prevent unauthorized token scanning attacks, the endpoint MUST also\nrequire some form of authorization to access this endpoint, such as\nclient authentication as described in OAuth 2.0 [RFC6749] or a separate\nOAuth 2.0 access token such as the bearer token described in OAuth 2.0\nBearer Token Usage [RFC6750]. The methods of managing and validating\nthese authentication credentials are out of scope of this specification.",
            "title": "requestRptStatus"
        },
        {
            "location": "/api-guide/uma-api/#url_12",
            "text": "http://gluu.org/rpt/status",
            "title": "URL"
        },
        {
            "location": "/api-guide/uma-api/#parameters_12",
            "text": "form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         token \n         true \n         The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint as defined\nin OAuth 2.0 [RFC6749] section 5.1. For refresh tokens, this is the\n\"refresh_token\" value returned from the token endpoint as defined in\nOAuth 2.0 [RFC6749] section 5.1. Other token types are outside the scope\nof this specification. \n         string \n     \n     \n         token_type_hint \n         false \n         A hint about the type of the token submitted for\nintrospection. The protected resource MAY pass this parameter in order\nto help the authorization server to optimize the token lookup. If the\nserver is unable to locate the token using the given hint, it MUST\nextend its search across all of its supported token types. An\nauthorization server MAY ignore this parameter, particularly if it is\nable to detect the token type automatically. Values for this field are\ndefined in OAuth Token Revocation [RFC7009]. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string",
            "title": "Parameters"
        },
        {
            "location": "/api-guide/uma-api/#response_10",
            "text": "",
            "title": "Response"
        },
        {
            "location": "/api-guide/uma-api/#errors_12",
            "text": "Status Code \n         Reason \n     \n     \n         401 \n         Unauthorized",
            "title": "Errors"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/",
            "text": "oxTrust JSON Configurations\n#\n\n\nOverview\n#\n\n\nThis page explains the oxTrust JSON Configuration which can by found by navigating to \nConfiguration\n > \nJSON Configuration\n. \n\n\noxtrust.properties\n#\n\n\n\n\nThe following fields are available for edit in the menu.\n\n\n\n\n\n\n\n\nFields/Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nidpBindDn\n\n\nThe admin user of the ldap server\n\n\n\n\n\n\nbaseDN\n\n\nThe base doaim name of oxtrust. The default is \no=gluu\n\n\n\n\n\n\norgIname\n\n\nThis can be left blank\n\n\n\n\n\n\norgSupportEmail\n\n\nThe support email address of the Gluu Server installation\n\n\n\n\n\n\napplianceInum\n\n\nThe \nINUM\n of the appliance\n\n\n\n\n\n\napplianceUrl\n\n\nThe \nURI\n of the appliance\n\n\n\n\n\n\nbaseEndpoint\n\n\n\n\n\n\n\n\nschemaAddObjectClassWithAttributeTypesDefinition\n\n\nThe schema to add various attribute types\n\n\n\n\n\n\nschemaAddObjectClassWithoutAttributeTypesDefinition\n\n\nThe schema to add various attribute types\n\n\n\n\n\n\n\n\npersonObjectClassTypes\n#\n\n\nThis class holds the relation between the person entry and it's relative object class.\n\n\n\n\n\n\n\n\nFields/Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem 1\n\n\ninetOrgPerson\n\n\n\n\n\n\nitem 2\n\n\ngluuPerson\n\n\n\n\n\n\npersonCustomObjectClass\n\n\n\n\n\n\n\n\n\n\npersonObjectClassDisplayNames\n#\n\n\nThis class holds the relation betwee the display name of the person and the relative object class.\n\n\n\n\n\n\n\n\nFields/Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem 1\n\n\ninetOrgPerson\n\n\n\n\n\n\nitem 2\n\n\ngluuPerson\n\n\n\n\n\n\nschemaAddAttributeDefenition\n\n\n\n\n\n\n\n\n\n\ncontactObjectClassDisplayNames\n#\n\n\nItems can be added under this class by clicking on the \n+ item\n button.\n\n\n\n\n\n\n\n\nFields/Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nphotoRepositoryRootDir\n\n\nPath to the root directory of photographs\n\n\n\n\n\n\nphotoRepositoryThumbWidth\n\n\nthumb with a photo\n\n\n\n\n\n\nphotoRepositoryThumbheight\n\n\nsets the thumb height of a photo\n\n\n\n\n\n\nphotoRepositoryCountLevels\n\n\ncount level per photo repository\n\n\n\n\n\n\nphotoRepositoryCountFoldersPerLevel\n\n\nnumber of folders per level\n\n\n\n\n\n\nauthMode\n\n\nset this tag to \nbasic\n to use basic authentication or leave it blank to use oxAuth\n\n\n\n\n\n\nldifStore\n\n\nPath to the \nLDIF\n store\n\n\n\n\n\n\nshibboleth2IdpRootDir\n\n\nroot directory for the shibboleth plugin\n\n\n\n\n\n\nshibboleth2SpConfDir\n\n\nConfiguration directory for the shibboleth plugin\n\n\n\n\n\n\npokenApplicationSecret\n\n\n\n\n\n\n\n\nupdateAplicanceStatus\n\n\nupdate appliance state for the site. Use \ntrue\n to allow, and \nfalse\n to forbid (default value)\n\n\n\n\n\n\nsvnConfigurationStoreRoot\n\n\nRoot of the \nSVN\n configuration store\n\n\n\n\n\n\nsvnConfigurationStorePassword\n\n\nPassword of the \nSVN\n configuration store\n\n\n\n\n\n\nkeystorePath\n\n\nPath to the keystore\n\n\n\n\n\n\nkeystorePassword\n\n\nPassword to the keystore\n\n\n\n\n\n\nallowPersonModification\n\n\nEnables or disables the allowance to modify a person entry. Use \ntrue\n to allow (default value), and  \nfalse\n otherwise\n\n\n\n\n\n\nidpUrl\n\n\nuri\n of the \nOpenID\n provider that is in use\n\n\n\n\n\n\nvelocityLog\n\n\nVelocity log filename with path\n\n\n\n\n\n\nspMetadataPath\n\n\nPath to the Gluu Server metadata\n\n\n\n\n\n\nlogoLocation\n\n\nDirectory name for the images and logos that are used\n\n\n\n\n\n\nidpSecurityKey\n\n\nSecurity key of the \nOpenID\n provider\n\n\n\n\n\n\nidpSecurityKeyPassowrd\n\n\nSecurity password of the \nOpenID\n provider\n\n\n\n\n\n\nidpSecurityCert\n\n\nSecurity certificate of the machine\n\n\n\n\n\n\n\n\ngluuSpAttributes\n#\n\n\nItems can be added here by clicking on the \n+ item\n button.\n\n\n\n\n\n\n\n\nFields/Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconfigGeneration\n\n\nThis entry controls the automatic generation of the configuration files. Use \nenable\n to allow and \ndisable\n otherwise\n\n\n\n\n\n\nidpLdapProtocol\n\n\nProtocol used by the [LDAP][ldap] server\n\n\n\n\n\n\nidpLdapServer\n\n\nHostname of the [LDAP][ldap] server with port\n\n\n\n\n\n\norgInum\n\n\nINUM\n of the organization\n\n\n\n\n\n\nidpBindDn\n\n\nDomain name of the \nOpenID\n provider\n\n\n\n\n\n\nidpBindPassowrd\n\n\nPassword for the \nOpenID\n provider\n\n\n\n\n\n\nidpUserFields\n\n\n\n\n\n\n\n\ngluuSpCert\n\n\nCertificate name and location of the Gluu Server\n\n\n\n\n\n\nmysqlUrl\n\n\nMySql connector as \nURI\n\n\n\n\n\n\nmysqlUser\n\n\nUsername for the MySql server\n\n\n\n\n\n\nmysqlPassword\n\n\nPassowrd for the MySql server\n\n\n\n\n\n\nshibboleth2FederationRootDir\n\n\nRoot directory for the \nShobboleth\n federation plugin\n\n\n\n\n\n\ncacheRefreshEnabled\n\n\nValue of the cache refresh mechanism. Use \ntrue\n to enable and \nfalse\n otherwise\n\n\n\n\n\n\ncacheRefreshIntervalMinutes\n\n\nTime in minutes counting down to next cache-refresh event\n\n\n\n\n\n\ncaCertsLocation\n\n\nKeystore to use for downloaded \nSSL\n certificates\n\n\n\n\n\n\ncaCertsPassphrase\n\n\nPassword for the caCerts keystore\n\n\n\n\n\n\ntempCertDir\n\n\nTemporary location for certificates while certificate update procedure\n\n\n\n\n\n\ncertDir\n\n\nLocaiton of certificates used in configuration files\n\n\n\n\n\n\nservicesRestartTrigger\n\n\nLocation of the file which will restart the applicance server if deleted\n\n\n\n\n\n\npersistSVN\n\n\nState of persistence in \nSVN\n. Use \ntrue\n to enable or \nfalse\n otherwise\n\n\n\n\n\n\noxAuthAuthorizeUrl\n\n\nAuthorization \nURI\n for oxAuth\n\n\n\n\n\n\noxAuthTokenUrl\n\n\nToken \nURI\n for oxAuth\n\n\n\n\n\n\noxAuthValidateTokenUrl\n\n\nURI\n for oxAuth token validation\n\n\n\n\n\n\noxAuthEndSessionUrl\n\n\nURI\n for oxAuth session termination\n\n\n\n\n\n\noxAuthLogoutUrl\n\n\nURI\n for logging out of oxAuth\n\n\n\n\n\n\noxAuthTokenValidationUrl\n\n\nURI\n for oxAuth token validation\n\n\n\n\n\n\noxAuthUserInfo\n\n\nURI\n for oxAuth user information\n\n\n\n\n\n\noxAuthSectorIdentifierUrl\n\n\nURI\n for oxAuth sector identifier\n\n\n\n\n\n\noxAuthClientId\n\n\nIdentification number for oxAuth client\n\n\n\n\n\n\noxAuthClientPassowrd\n\n\nPassword for oxAuth client\n\n\n\n\n\n\noxAuthClientScope\n\n\nScope of the oxAuth client\n\n\n\n\n\n\nloginRedirectUrl\n\n\nRedirect \nURI\n for oxAuth\n\n\n\n\n\n\nlogoutRedirectUrl\n\n\nURI\n for oxAuth\n\n\n\n\n\n\n\n\nclusteredInums\n#\n\n\nItems can be added here by clicking on the \n+ item\n button.\n\n\n\n\n\n\n\n\nFields/Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientAssociationAttribute\n\n\nAttribute which identifies the \nOpenID\n client\n\n\n\n\n\n\noxAuthIssuers\n\n\nURI\n of the issuer authorization server\n\n\n\n\n\n\nignoreValidation\n\n\nControl to check/ignore token validation. Use \ntrue\n to validate or \nfalse\n otherwise\n\n\n\n\n\n\numaIssuer\n\n\nURI\n of the issuer authorization server\n\n\n\n\n\n\numaClientId\n\n\nIdentification of the \nUMA\n client\n\n\n\n\n\n\numaClientKeyId\n\n\n\n\n\n\n\n\numaResourceId\n\n\n\n\n\n\n\n\numaScope\n\n\nScopes available for this resource\n\n\n\n\n\n\nrecaptchaSiteKey\n\n\n\n\n\n\n\n\nrecaptchaSecretKey\n\n\n\n\n\n\n\n\ncssLocation\n\n\nPath to the CSS files\n\n\n\n\n\n\njsLocation\n\n\nPath to the JS files\n\n\n\n\n\n\nrepactchUrl\n\n\nType for the recaptcha \nURI\n attribute\n\n\n\n\n\n\n\n\nDescription of OxTrust Properties\n#\n\n\nDescription of OxTrust Properties can be viewed \nhere\n\n\nOxtrust import JSON description \nhere",
            "title": "OxTrust JSON Properties"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#oxtrust-json-configurations",
            "text": "",
            "title": "oxTrust JSON Configurations"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#overview",
            "text": "This page explains the oxTrust JSON Configuration which can by found by navigating to  Configuration  >  JSON Configuration .",
            "title": "Overview"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#oxtrustproperties",
            "text": "The following fields are available for edit in the menu.     Fields/Attributes  Description      idpBindDn  The admin user of the ldap server    baseDN  The base doaim name of oxtrust. The default is  o=gluu    orgIname  This can be left blank    orgSupportEmail  The support email address of the Gluu Server installation    applianceInum  The  INUM  of the appliance    applianceUrl  The  URI  of the appliance    baseEndpoint     schemaAddObjectClassWithAttributeTypesDefinition  The schema to add various attribute types    schemaAddObjectClassWithoutAttributeTypesDefinition  The schema to add various attribute types",
            "title": "oxtrust.properties"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#personobjectclasstypes",
            "text": "This class holds the relation between the person entry and it's relative object class.     Fields/Attributes  Description      item 1  inetOrgPerson    item 2  gluuPerson    personCustomObjectClass",
            "title": "personObjectClassTypes"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#personobjectclassdisplaynames",
            "text": "This class holds the relation betwee the display name of the person and the relative object class.     Fields/Attributes  Description      item 1  inetOrgPerson    item 2  gluuPerson    schemaAddAttributeDefenition",
            "title": "personObjectClassDisplayNames"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#contactobjectclassdisplaynames",
            "text": "Items can be added under this class by clicking on the  + item  button.     Fields/Attributes  Description      photoRepositoryRootDir  Path to the root directory of photographs    photoRepositoryThumbWidth  thumb with a photo    photoRepositoryThumbheight  sets the thumb height of a photo    photoRepositoryCountLevels  count level per photo repository    photoRepositoryCountFoldersPerLevel  number of folders per level    authMode  set this tag to  basic  to use basic authentication or leave it blank to use oxAuth    ldifStore  Path to the  LDIF  store    shibboleth2IdpRootDir  root directory for the shibboleth plugin    shibboleth2SpConfDir  Configuration directory for the shibboleth plugin    pokenApplicationSecret     updateAplicanceStatus  update appliance state for the site. Use  true  to allow, and  false  to forbid (default value)    svnConfigurationStoreRoot  Root of the  SVN  configuration store    svnConfigurationStorePassword  Password of the  SVN  configuration store    keystorePath  Path to the keystore    keystorePassword  Password to the keystore    allowPersonModification  Enables or disables the allowance to modify a person entry. Use  true  to allow (default value), and   false  otherwise    idpUrl  uri  of the  OpenID  provider that is in use    velocityLog  Velocity log filename with path    spMetadataPath  Path to the Gluu Server metadata    logoLocation  Directory name for the images and logos that are used    idpSecurityKey  Security key of the  OpenID  provider    idpSecurityKeyPassowrd  Security password of the  OpenID  provider    idpSecurityCert  Security certificate of the machine",
            "title": "contactObjectClassDisplayNames"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#gluuspattributes",
            "text": "Items can be added here by clicking on the  + item  button.     Fields/Attributes  Description      configGeneration  This entry controls the automatic generation of the configuration files. Use  enable  to allow and  disable  otherwise    idpLdapProtocol  Protocol used by the [LDAP][ldap] server    idpLdapServer  Hostname of the [LDAP][ldap] server with port    orgInum  INUM  of the organization    idpBindDn  Domain name of the  OpenID  provider    idpBindPassowrd  Password for the  OpenID  provider    idpUserFields     gluuSpCert  Certificate name and location of the Gluu Server    mysqlUrl  MySql connector as  URI    mysqlUser  Username for the MySql server    mysqlPassword  Passowrd for the MySql server    shibboleth2FederationRootDir  Root directory for the  Shobboleth  federation plugin    cacheRefreshEnabled  Value of the cache refresh mechanism. Use  true  to enable and  false  otherwise    cacheRefreshIntervalMinutes  Time in minutes counting down to next cache-refresh event    caCertsLocation  Keystore to use for downloaded  SSL  certificates    caCertsPassphrase  Password for the caCerts keystore    tempCertDir  Temporary location for certificates while certificate update procedure    certDir  Locaiton of certificates used in configuration files    servicesRestartTrigger  Location of the file which will restart the applicance server if deleted    persistSVN  State of persistence in  SVN . Use  true  to enable or  false  otherwise    oxAuthAuthorizeUrl  Authorization  URI  for oxAuth    oxAuthTokenUrl  Token  URI  for oxAuth    oxAuthValidateTokenUrl  URI  for oxAuth token validation    oxAuthEndSessionUrl  URI  for oxAuth session termination    oxAuthLogoutUrl  URI  for logging out of oxAuth    oxAuthTokenValidationUrl  URI  for oxAuth token validation    oxAuthUserInfo  URI  for oxAuth user information    oxAuthSectorIdentifierUrl  URI  for oxAuth sector identifier    oxAuthClientId  Identification number for oxAuth client    oxAuthClientPassowrd  Password for oxAuth client    oxAuthClientScope  Scope of the oxAuth client    loginRedirectUrl  Redirect  URI  for oxAuth    logoutRedirectUrl  URI  for oxAuth",
            "title": "gluuSpAttributes"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#clusteredinums",
            "text": "Items can be added here by clicking on the  + item  button.     Fields/Attributes  Description      clientAssociationAttribute  Attribute which identifies the  OpenID  client    oxAuthIssuers  URI  of the issuer authorization server    ignoreValidation  Control to check/ignore token validation. Use  true  to validate or  false  otherwise    umaIssuer  URI  of the issuer authorization server    umaClientId  Identification of the  UMA  client    umaClientKeyId     umaResourceId     umaScope  Scopes available for this resource    recaptchaSiteKey     recaptchaSecretKey     cssLocation  Path to the CSS files    jsLocation  Path to the JS files    repactchUrl  Type for the recaptcha  URI  attribute",
            "title": "clusteredInums"
        },
        {
            "location": "/reference/JSON-oxtrust-prop/#description-of-oxtrust-properties",
            "text": "Description of OxTrust Properties can be viewed  here  Oxtrust import JSON description  here",
            "title": "Description of OxTrust Properties"
        },
        {
            "location": "/reference/JSON-oxauth-prop/",
            "text": "oxAuth Configurations\n#\n\n\nOverview\n#\n\n\nThis page explains the JSON Configuration which can be accessed by navigating to \nConfiguration\n > \nJSON Configuration\n > \noxAuth Configuration\n. \n\n\noxAuth.properties\n#\n\n\n\n\nThe descriptions for the oxAuth JSON configurations are given under the fields. \n\n\nOxAuth Config JSON description",
            "title": "OxAuth JSON Properties"
        },
        {
            "location": "/reference/JSON-oxauth-prop/#oxauth-configurations",
            "text": "",
            "title": "oxAuth Configurations"
        },
        {
            "location": "/reference/JSON-oxauth-prop/#overview",
            "text": "This page explains the JSON Configuration which can be accessed by navigating to  Configuration  >  JSON Configuration  >  oxAuth Configuration .",
            "title": "Overview"
        },
        {
            "location": "/reference/JSON-oxauth-prop/#oxauthproperties",
            "text": "The descriptions for the oxAuth JSON configurations are given under the fields.   OxAuth Config JSON description",
            "title": "oxAuth.properties"
        },
        {
            "location": "/reference/oxldap/",
            "text": "OX LDAP Properties\n#\n\n\nOverview\n#\n\n\nOx-LDAP.properties file contains information required for the Gluu CE Server \nto connect with LDAP for authenticating and authorizing the user/admin and also\n\nprovides the connection strings to various component's container or site to \nfetch required information for the installed and configured components during \nsetup after installation. For setup/configuration detail, please refer to \n\nSetup Script Options\n \nox-ldap.properties file will be stored under \n/etc/gluu/conf/\n\n\nProperties in Ox-LDAP\n#\n\n\nBelow are the properties that are written in ox-ldap.properties for the \nGluu CE server to connect with LDAP. \n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBind DN\n\n\nStores the DN of the connecting LDAP server\n\n\n\n\n\n\nBind Password\n\n\nStores the password of the DN, which is provided during setup\n\n\n\n\n\n\nservers\n\n\nLDAP server with port number\n\n\n\n\n\n\nuseSSL\n\n\nProvides a boolean value, depending on the SSL used, and is set to true or false\n\n\n\n\n\n\nmaxconnections\n\n\nnumber of maximum connections to be used, this is can be left to be set it to default\n\n\n\n\n\n\ncertsDir\n\n\nPath of the certificates stored\n\n\n\n\n\n\nconfDir\n\n\nPath of the configuration directory\n\n\n\n\n\n\nbinaryAttributes\n\n\nThis property should be left to be default ObjectGUID\n\n\n\n\n\n\n\n\nBelow screenshot is an example of ox-ldap.properties",
            "title": "Ox LDAP Properties"
        },
        {
            "location": "/reference/oxldap/#ox-ldap-properties",
            "text": "",
            "title": "OX LDAP Properties"
        },
        {
            "location": "/reference/oxldap/#overview",
            "text": "Ox-LDAP.properties file contains information required for the Gluu CE Server \nto connect with LDAP for authenticating and authorizing the user/admin and also \nprovides the connection strings to various component's container or site to \nfetch required information for the installed and configured components during \nsetup after installation. For setup/configuration detail, please refer to  Setup Script Options  \nox-ldap.properties file will be stored under  /etc/gluu/conf/",
            "title": "Overview"
        },
        {
            "location": "/reference/oxldap/#properties-in-ox-ldap",
            "text": "Below are the properties that are written in ox-ldap.properties for the \nGluu CE server to connect with LDAP.      Property  Description      Bind DN  Stores the DN of the connecting LDAP server    Bind Password  Stores the password of the DN, which is provided during setup    servers  LDAP server with port number    useSSL  Provides a boolean value, depending on the SSL used, and is set to true or false    maxconnections  number of maximum connections to be used, this is can be left to be set it to default    certsDir  Path of the certificates stored    confDir  Path of the configuration directory    binaryAttributes  This property should be left to be default ObjectGUID     Below screenshot is an example of ox-ldap.properties",
            "title": "Properties in Ox-LDAP"
        },
        {
            "location": "/reference/schema/",
            "text": "Gluu LDAP Schema\n#\n\n\nBelow are the schemes for OpenDJ and OpenLDAP.\n\n\n\n\nOpenDJ\n\n\nOpenLDAP\n\n\n\n\n\n\nNote\n\n\nThis section of the documentation is for reference and Schemas should not be manually edited.\n\n\n\n\nBelow objectclasses and attributes are extracted from Gluu Specific Schemas.\n\n\npairwiseIdentifier\n#\n\n\n\n\noxId\n:  Identifier\n\n\noxSectorIdentifier\n:  ox Sector Identifier\n\n\n\n\ngluuPerson\n#\n\n\n\n\noxAssociatedClient (or) associatedClient\n:  Associate the dn of an OAuth2 client with a person or UMA Resource Set.\n\n\nc\n\n\ndisplayName\n\n\ngivenName\n\n\ngluuManagedOrganizations\n:  Used to track with which organizations a person is associated\n\n\ngluuOptOuts\n:  White pages attributes restricted by person in oxTrust profile management\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\ngluuWhitePagesListed\n:  Allow Publication\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\nmail\n\n\ngluuSLAManager\n:  Specifies if the person has the SLA manager role\n\n\nmemberOf\n\n\no\n\n\noxAuthPersistentJWT\n:  oxAuth Persistent JWT\n\n\noxCreationTimestamp\n:  Registration time\n\n\noxExternalUid\n\n\noxLastLogonTime\n:  Last logon time\n\n\noxTrustActive\n\n\noxTrustAddresses\n\n\noxTrustEmail\n\n\noxTrustEntitlements\n\n\noxTrustExternalId\n\n\noxTrustImsValue\n\n\noxTrustMetaCreated\n\n\noxTrustMetaLastModified\n\n\noxTrustMetaLocation\n\n\noxTrustMetaVersion\n\n\noxTrustNameFormatted\n\n\noxTrustPhoneValue\n\n\noxTrustPhotos\n\n\noxTrustProfileURL\n\n\noxTrustRole\n\n\noxTrustTitle\n\n\noxTrustUserType\n\n\noxTrusthonorificPrefix\n\n\noxTrusthonorificSuffix\n\n\noxTrustx509Certificate\n\n\noxPasswordExpirationDate\n:  Password Expiration date, represented as an ISO 8601 (YYYY-MM-DD) format\n\n\npersistentId\n:  PersistentId\n\n\nmiddleName (or) oxTrustMiddleName\n:  Middle name(s)\n\n\nnickname (or) oxTrustnickname\n:  Casual name of the End-User\n\n\npreferredUsername\n:  Shorthand Name\n\n\nprofile\n:  Profile page URL of the person\n\n\npicture (or) photo1\n:  Profile picture URL of the person\n\n\nwebsite\n:  Web page or blog URL of the person\n\n\nemailVerified\n:  True if the e-mail address of the person has been verified; otherwise false\n\n\ngender\n:  Gender of the person either female or male\n\n\nbirthdate\n:  Birthday of the person, represented as an ISO 8601:2004 [ISO8601\u20112004] YYYY-MM-DD format\n\n\nzoneinfo (or) timezone\n:  Time zone database representing the End-Users time zone. For example, Europe/Paris or America/Los_Angeles\n\n\nlocale (or) oxTrustLocale\n:  Locale of the person, represented as a BCP47 [RFC5646] language tag\n\n\nphoneNumberVerified\n:  True if the phone number of the person has been verified, otherwise false\n\n\naddress\n:  OpenID Connect formatted JSON object representing the address of the person\n\n\nupdatedAt\n:  Time the information of the person was last updated. Seconds from 1970-01-01T0:0:0Z\n\n\npreferredLanguage\n\n\nrole\n:  Role\n\n\nsecretAnswer\n:  Secret Answer\n\n\nsecretQuestion\n:  Secret Question\n\n\nseeAlso\n\n\nsn\n\n\ncn\n\n\ntransientId\n:  TransientId\n\n\nuid\n\n\nuserPassword\n\n\nst\n\n\nstreet\n\n\nl\n\n\noxCountInvalidLogin\n:  Invalid login attempts count\n\n\noxEnrollmentCode\n:  oxEnrollmentCode\n\n\ngluuIMAPData\n:  This data has information about your imap connection\n\n\noxPPID\n:  Persistent Pairwise ID for OpenID Connect\n\n\n\n\ngluuGroup\n#\n\n\n\n\nc\n\n\ndescription\n\n\ndisplayName\n\n\ngluuGroupType\n:  Type of Group. Not used.\n\n\ngluuGroupVisibility\n:  Group visibility. Not used.\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\nmember\n\n\no\n\n\nowner\n\n\nseeAlso\n\n\noxTrustMetaCreated\n\n\noxTrustMetaLastModified\n\n\noxTrustMetaLocation\n\n\noxTrustMetaVersion\n\n\n\n\ngluuOrganization\n#\n\n\n\n\nc\n\n\ncounty\n:  ISO 3166-1 Alpha-2 Country Code\n\n\ndeployedAppliances\n:  Track which appliances are deployed at an organization.\n\n\ndescription\n\n\ndisplayName\n\n\ngluuAddPersonCapability\n:  Organizational attribute to control whether new users can be added  via the oxTrust GUI.\n\n\ngluuAdditionalUsers\n:  TODO : use unclear\n\n\ngluuApplianceUpdateRequestList (or) gluuApplianceUpdateReuestList\n:  Used by the Gluu Server to request an update\n\n\ngluuCustomMessage\n:  oxTrust custom welcome message\n\n\ngluuFaviconImage\n:  TODO - Stores URL of favicon\n\n\ngluuFederationHostingEnabled\n:  oxTrust flag for the federation feature. Values enabled or disabled.\n\n\ngluuInvoiceNo\n:  TODO - in use?\n\n\ngluuLogoImage\n:  Logo used by oxTrust for default look and feel.\n\n\ngluuManageIdentityPermission\n:  TODO - in use?\n\n\ngluuManager\n:  Used to specify if a person has the manager role\n\n\ngluuManagerGroup\n:  Used in organizatoin entry to specifies the dn of the group that  has admin priviledges in oxTrust.\n\n\ngluuOrgProfileMgt\n:  enable or disable profile management feature in oxTrust\n\n\ngluuOrgShortName\n:  Short description, as few letters as possible, no spaces.\n\n\ngluuPaidUntil\n:  TODO - in use?\n\n\ngluuPaymentProcessorTimestamp\n:  TODO - in use?\n\n\ngluuProStoresUser\n:  TODO - remove\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\ngluuTempFaviconImage\n:  Store location for upload of Favicon\n\n\ngluuThemeColor\n:  oxTrust login page configuration\n\n\ngluuWhitePagesEnabled\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\nl\n\n\nmail\n\n\nmemberOf\n\n\nnonProfit\n:  TODO - in use?\n\n\no\n\n\noxCreationTimestamp\n:  Registration time\n\n\noxLinkLinktrack\n:  Linktrack link\n\n\noxLinktrackEnabled\n:  Is Linktrack API configured\n\n\noxLinktrackLogin\n:  Linktrack API login\n\n\noxLinktrackPassword\n:  Linktrack API password\n\n\noxRegistrationConfiguration\n:  Registration Configuration\n\n\npostalCode\n\n\nproStoresToken\n\n\nprostoresTimestamp\n\n\nscimAuthMode\n:  SCIM Authorization mode\n\n\nscimGroup\n:  scim Group\n\n\nscimStatus\n:  scim status\n\n\nst\n\n\nstreet\n\n\ntelephoneNumber\n\n\ntitle\n\n\nuid\n\n\nuserPassword\n\n\n\n\ngluuAppliance\n#\n\n\n\n\nblowfishPassword\n:  Blowfish crypted text\n\n\nc\n\n\ndescription\n\n\ndisplayName\n\n\ngluuAdditionalBandwidth\n:  Track bandwidth requirements for the Gluu Server instance\n\n\ngluuAdditionalMemory\n:  Track additional memory requirements for the Gluu Server instance.\n\n\ngluuApplianceDnsServer\n:  Persist the DNS server that should be used for the Gluu Server instance.\n\n\ngluuAppliancePollingInterval\n:  Set the frequency of the health status update of the Gluu Server\n\n\ngluuBandwidthRX\n:  Track data received by the Gluu Server\n\n\ngluuBandwidthTX\n:  Track data sent by the Gluu Server\n\n\ngluuDSstatus\n:  Monitor health of the instance LDAP server.\n\n\ngluuFederationHostingEnabled\n:  oxTrust flag for the federation feature. Values enabled or disabled.\n\n\ngluuFreeDiskSpace\n:  Monitor free disk space on the Gluu Server instance\n\n\ngluuFreeMemory\n:  Monitor free memory on the Gluu Server instance\n\n\ngluuFreeSwap\n:  Monitor swap space on the Gluu Server instance\n\n\ngluuGroupCount\n:  Monitor the number of groups. TODO - Remove?\n\n\ngluuHTTPstatus\n:  Monitor HTTP availability of the Gluu Server instance\n\n\ngluuHostname\n:  The hostname of the Gluu Server instance\n\n\ngluuInvoiceNo\n:  TODO - in use?\n\n\ngluuIpAddress\n:  IP address of the Gluu Server instance\n\n\ngluuLastUpdate\n:  Monitors last time the server was able to connect to  the monitoring system.\n\n\ngluuLifeRay (or) TODO-remove\n\n\ngluuLoadAvg\n:  Montior the average CPU load for a Gluu Server instance.\n\n\ngluuManageIdentityPermission\n:  TODO - in use?\n\n\ngluuManager\n:  Used to specify if a person has the manager role\n\n\ngluuMaxLogSize\n:  Maximum Log File Size\n\n\ngluuOrgProfileMgt\n:  enable or disable profile management feature in oxTrust\n\n\ngluuPaidUntil\n:  TODO - in use?\n\n\ngluuPaymentProcessorTimestamp\n:  TODO - in use?\n\n\ngluuPersonCount\n:  Monitor the number of people in the LDAP severs for a Gluu Server instance\n\n\ngluuPrivate\n:  TODO - in use?\n\n\ngluuPublishIdpMetadata\n:  Gluu Server flag to publish the IDP metadata via the web server\n\n\ngluuResizeInitiated\n:  TODO - in use?\n\n\ngluuSPTR\n:  TODO - in use?\n\n\ngluuScimEnabled\n:  oxTrust SCIM feature - enabled or disabled\n\n\ngluuShibAssertionsIssued\n:  Monitors activity of Gluu Server Shibboleth IDP\n\n\ngluuShibFailedAuth\n:  Monitors failed login attempts on Gluu Server Shibboleth IDP\n\n\ngluuShibSecurityEvents\n:  Monitors security events on Gluu Server Shibboleth IDP\n\n\ngluuShibSuccessfulAuths\n:  Monitors login attempts on Gluu Server Shibboleth IDP\n\n\noxTrustEmail\n\n\ngluuSmtpFromEmailAddress\n:  Gluu Server SMTP configuration\n\n\ngluuSmtpFromName\n:  SMTP From Name\n\n\ngluuSmtpHost\n:  SMTP Host\n\n\ngluuSmtpPassword\n:  SMTP User Password\n\n\ngluuSmtpPort\n:  SMTP Port\n\n\ngluuSmtpRequiresAuthentication\n:  SMTP Requires Authentication\n\n\ngluuSmtpRequiresSsl\n:  SMTP Requires SSL\n\n\ngluuSmtpUserName\n:  SMTP User Name\n\n\ngluuSslExpiry\n:  SAML Trust Relationship configuration\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\ngluuSystemUptime\n:  Monitors how long the Gluu Server instance has been running.\n\n\ngluuTargetRAM\n:  Monitors total available RAM on Gluu Server instance\n\n\ngluuUrl\n:  Gluu instance URL\n\n\ngluuVDSenabled\n:  oxTrust VDS enabled or disabled\n\n\ngluuVDSstatus\n:  Gluu VDS configuration\n\n\ngluuVdsCacheRefreshEnabled\n\n\ngluuVdsCacheRefreshLastUpdate\n\n\ngluuVdsCacheRefreshLastUpdateCount\n\n\ngluuVdsCacheRefreshPollingInterval\n\n\ngluuVdsCacheRefreshProblemCount\n\n\ngluuWhitePagesEnabled\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\ninumFN\n:  XRI i-number sans punctuation\n\n\no\n\n\noxAuthenticationMode\n\n\noxTrustAuthenticationMode\n\n\noxIDPAuthentication\n:  Custom IDP authentication configuration\n\n\noxLogViewerConfig\n:  Log viewer configuration\n\n\noxSmtpConfiguration\n:  SMTP configuration\n\n\noxMemcachedConfiguration\n:  Memcached configuration\n\n\noxTrustStoreCert\n:  oxPush device configuration\n\n\noxTrustStoreConf\n:  oxPush application configuration\n\n\npasswordResetAllowed\n:  Is password reset mechanics allowed\n\n\nsoftwareVersion\n\n\nuserPassword\n\n\noxTrustCacheRefreshServerIpAddress\n\n\ngluuPassportEnabled\n\n\n\n\ngluuAttribute\n#\n\n\n\n\ndescription\n\n\ndisplayName\n\n\ngluuAttributeEditType\n:  Specify in oxTrust who can update an attribute, admin or user\n\n\ngluuAttributeName\n:  Specify an identifier for an attribute. May be multi-value  where an attribute has two names, like givenName and first-name.\n\n\ngluuAttributeOrigin\n:  Specify the person objectclass associated with the attribute,  used for display purposes in oxTrust.\n\n\ngluuAttributeSystemEditType\n:  TODO - still required?\n\n\ngluuAttributeType\n:  Data type of attribute. Values can be string, photo, numeric, date\n\n\noxAuthClaimName\n:  Used by oxAuth in conjunction with gluuttributeName to map claims to attributes in LDAP.\n\n\ngluuAttributeUsageType\n:  TODO - Usage? Value can be OpenID\n\n\ngluuAttributeViewType\n:  Specify in oxTrust who can view an attribute, admin or user\n\n\ngluuCategory\n:  TODO - in use? Used to group attributes together.\n\n\ngluuSAML1URI\n:  SAML 1 uri of attribute\n\n\ngluuSAML2URI\n:  SAML 2 uri of attribute\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\noxAttributeType\n:  NameId or attribute\n\n\noxMultivaluedAttribute\n\n\noxNameIdType\n:  NameId Type\n\n\noxSCIMCustomAttribute\n\n\noxSourceAttribute\n:  Source Attribute for this Attribute\n\n\nseeAlso\n\n\nurn\n\n\ngluuRegExp\n:  Regular expression used to validate attribute data\n\n\ngluuTooltip\n:  Custom tooltip to be shown on the UI\n\n\noxValidation\n:  This data has information about attribute Validation\n\n\n\n\ngluuSAMLconfig\n#\n\n\n\n\ndescription\n\n\ndisplayName\n\n\nfederationRules\n:  Track rules for the federation in Gluu SAML config. Deprecated  as multi-party federation management should move to Jagger.\n\n\ngluuContainerFederation\n:  SAML Trust Relationship federation info\n\n\ngluuEntityId\n:  Specifies SAML trust relationship entity ID\n\n\ngluuIsFederation\n:  Used in oxTrust to specify if a SAML Trust Relationship is a federation.  It could also be a website\n\n\ngluuProfileConfiguration\n:  SAML Trust Relationship attribute\n\n\ngluuReleasedAttribute\n:  oxTrust reference for the dn of the released attribute\n\n\ngluuRulesAccepted\n:  TODO - use unknown for Gluu SAML config\n\n\ngluuSAMLMetaDataFilter\n:  Metadata filter in SAML trust relationship\n\n\ngluuSAMLTrustEngine\n:  SAML trust relationship configuration\n\n\ngluuSAMLmaxRefreshDelay\n:  SAML trust relationship refresh time\n\n\ngluuSAMLspMetaDataFN\n:  SAML Trust Relationship file location of metadata\n\n\ngluuSAMLspMetaDataSourceType\n:  SAML Trust Relationship SP metadata type - file, URI, federation\n\n\ngluuSAMLspMetaDataURL\n:  SAML Trust Relationship URI location of metadata\n\n\ngluuSpecificRelyingPartyConfig\n:  SAML Trust Relationship configuration\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\ngluuTrustContact\n:  oxTrust login page configuration\n\n\ngluuTrustDeconstruction\n:  TODO - in use?\n\n\ngluuValidationLog\n\n\ngluuValidationStatus\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\no\n\n\noxAuthPostLogoutRedirectURI\n:  oxAuth Post Logout Redirect URI\n\n\nurl\n\n\nresearchAndScholarshipEnabled\n:  Trust relationship attribute to show that InCommon R&S activated\n\n\ngluuEntityType\n:  This data has information about TR EntityType\n\n\n\n\ngluuInumMap\n#\n\n\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\ninum\n:  XRI i-number\n\n\nprimaryKeyAttrName\n:  Primary Key Attribute Name\n\n\nprimaryKeyValue\n:  Primary Key Value\n\n\nsecondaryKeyAttrName\n:  Secondary Key Attribute Name\n\n\nsecondaryKeyValue\n:  Secondary Key Value\n\n\ntertiaryKeyAttrName\n:  Tertiary Key Attribute Name\n\n\ntertiaryKeyValue\n:  Tertiary Key Value\n\n\n\n\ngluuInvoice\n#\n\n\n\n\ngluuInvoiceAmount\n:  TODO - in use?\n\n\ngluuInvoiceDate\n:  TODO - in use?\n\n\ngluuInvoiceLineItemName\n:  TODO - in use?\n\n\ngluuInvoiceNumber\n:  TODO - in use?\n\n\ngluuInvoiceProductNumber\n:  TODO - in use?\n\n\ngluuInvoiceQuantity\n:  TODO - in use?\n\n\ngluuInvoiceStatus\n:  TODO - in use?\n\n\ninum\n:  XRI i-number\n\n\n\n\ngluuPasswordResetRequest\n#\n\n\n\n\ncreationDate\n:  Creation Date used for password reset requests\n\n\noxGuid\n:  A random string to mark temporary tokens\n\n\npersonInum\n:  Inum of a person\n\n\n\n\noxLink\n#\n\n\n\n\ndescription\n\n\noxGuid\n:  A random string to mark temporary tokens\n\n\noxLinkCreator\n:  Link Creator\n\n\noxLinkExpirationDate\n:  Link Expiration Date\n\n\noxLinkLinktrack\n:  Linktrack link\n\n\noxLinkModerated\n:  Is Link Moderated?\n\n\noxLinkModerators\n:  Link Moderators\n\n\noxLinkPending\n:  Pending Registrations\n\n\n\n\nvdapcontainer\n#\n\n\n\n\nou\n\n\n\n\nvdDirectoryView\n#\n\n\n\n\no\n\n\n\n\nvdlabel\n#\n\n\n\n\no\n\n\n\n\noxEntry\n#\n\n\n\n\ndisplayName\n\n\niname\n\n\ninum\n:  XRI i-number\n\n\n\n\noxNode\n#\n\n\n\n\norganizationalOwner\n:  OX organizationalOwner\n\n\nowner\n\n\nsourceRelationalXdiStatement\n:  OX SourceRelationalXdiStatement\n\n\ntargetRelationalXdiStatement\n:  OX TargetRelationalXdiStatement\n\n\nx\n:  OX XRI Component\n\n\nxdiStatement\n:  OX xdiStatement\n\n\nxri\n:  OX XRI address\n\n\n\n\noxAuthClient\n#\n\n\n\n\nassociatedPerson\n:  Reference the dn of a person.\n\n\ndisplayName\n\n\ninum\n:  XRI i-number\n\n\noxAuthAppType\n:  oxAuth App Type\n\n\noxAuthClientIdIssuedAt\n:  oxAuth Client Issued At\n\n\noxAuthClientSecret\n:  oxAuth Client Secret\n\n\noxAuthClientSecretExpiresAt\n:  Date client expires\n\n\noxAuthClientURI\n:  oxAuth Client URI\n\n\noxAuthContact\n:  oxAuth Contact\n\n\noxAuthDefaultAcrValues\n:  oxAuth Default Acr Values\n\n\noxAuthDefaultMaxAge\n:  oxAuth Default Max Age\n\n\noxAuthGrantType\n:  oxAuth Grant Type\n\n\noxAuthIdTokenEncryptedResponseAlg\n:  oxAuth ID Token Encrypted Response Alg\n\n\noxAuthIdTokenEncryptedResponseEnc\n:  oxAuth ID Token Encrypted Response Enc\n\n\noxAuthIdTokenSignedResponseAlg\n:  oxAuth ID Token Signed Response Alg\n\n\noxAuthInitiateLoginURI\n:  oxAuth Initiate Login URI\n\n\noxAuthJwksURI\n:  oxAuth JWKs URI\n\n\noxAuthJwks\n:  oxAuth JWKs\n\n\noxAuthLogoURI\n:  oxAuth Logo URI\n\n\noxAuthPolicyURI\n:  oxAuth Policy URI\n\n\noxAuthPostLogoutRedirectURI\n:  oxAuth Post Logout Redirect URI\n\n\noxAuthRedirectURI\n:  oxAuth Redirect URI\n\n\noxAuthRegistrationAccessToken\n:  oxAuth Registration Access Token\n\n\noxAuthRequestObjectSigningAlg\n:  oxAuth Request Object Signing Alg\n\n\noxAuthRequestObjectEncryptionAlg\n:  oxAuth Request Object Encryption Alg\n\n\noxAuthRequestObjectEncryptionEnc\n:  oxAuth Request Object Encryption Enc\n\n\noxAuthRequestURI\n:  oxAuth Request URI\n\n\noxAuthRequireAuthTime\n:  oxAuth Require Authentication Time\n\n\noxAuthResponseType\n:  oxAuth Response Type\n\n\noxAuthScope\n:  oxAuth Attribute Scope\n\n\noxAuthSectorIdentifierURI\n:  oxAuth Sector Identifier URI\n\n\noxAuthSignedResponseAlg\n:  oxAuth Signed Response Alg\n\n\noxAuthSubjectType\n:  oxAuth Subject Type\n\n\noxAuthTokenEndpointAuthMethod\n:  oxAuth Token Endpoint Auth Method\n\n\noxAuthTokenEndpointAuthSigningAlg\n:  oxAuth Token Endpoint Auth Signing Alg\n\n\noxAuthTosURI\n:  oxAuth TOS URI\n\n\noxAuthTrustedClient\n:  oxAuth Trusted Client\n\n\noxAuthUserInfoEncryptedResponseAlg\n:  oxAuth User Info Encrypted Response Alg\n\n\noxAuthUserInfoEncryptedResponseEnc\n:  oxAuth User Info Encrypted Response Enc\n\n\noxAuthExtraConf\n:  oxAuth additional configuration\n\n\noxLastAccessTime\n:  Last access time\n\n\noxLastLogonTime\n:  Last logon time\n\n\noxPersistClientAuthorizations\n:  ox Persist Client Authorizations\n\n\noxAuthLogoutURI\n:  oxAuth Policy URI\n\n\noxAuthLogoutSessionRequired\n:  oxAuth Policy URI\n\n\n\n\noxAuthCustomScope\n#\n\n\n\n\ndefaultScope\n:  Track the default scope for an custom OAuth2 Scope.\n\n\ndescription\n\n\ndisplayName\n\n\ninum\n:  XRI i-number\n\n\noxScopeType\n:  OX Attribute Scope type\n\n\noxAuthClaim\n:  oxAuth Attribute Claim\n\n\noxScriptDn\n:  Script object DN\n\n\noxAuthGroupClaims\n:  oxAuth Group Attribute Claims (true or false)\n\n\n\n\noxAuthSessionId\n#\n\n\n\n\noxLastAccessTime\n:  Last access time\n\n\noxAuthAuthenticationTime\n:  oxAuth Authentication Time\n\n\noxAuthPermissionGranted\n:  oxAuth Permission Granted\n\n\noxAuthPermissionGrantedMap\n:  oxAuth Permission Granted Map\n\n\noxAuthUserDN\n:  oxAuth User DN\n\n\noxAuthSessionId\n:  oxAuth Session Id\n\n\noxState\n:  oxState\n\n\noxAuthSessionAttribute\n:  oxAuthSessionAttribute\n\n\noxAsJwt\n:  Boolean field to indicate whether object is used as JWT\n\n\noxJwt\n:  JWT representation of the object or otherwise jwt associated with the object\n\n\noxInvolvedClients\n:  Involved clients\n\n\n\n\noxAuthConfiguration\n#\n\n\n\n\nou\n\n\noxAuthConfDynamic\n:  oxAuth Dynamic Configuration\n\n\noxAuthConfErrors\n:  oxAuth Errors Configuration\n\n\noxAuthConfStatic\n:  oxAuth Static Configuration\n\n\noxAuthConfWebKeys\n:  oxAuth Web Keys Configuration\n\n\noxRevision\n:  Revision\n\n\n\n\noxTrustConfiguration\n#\n\n\n\n\nou\n\n\noxTrustConfApplication\n:  oxTrust Application Configuration\n\n\noxTrustConfCacheRefresh\n:  oxTrust Cache Refresh Configuration\n\n\noxRevision\n:  Revision\n\n\noxTrustConfImportPerson\n:  oxTrust Import Person Configuration\n\n\n\n\noxApplicationConfiguration\n#\n\n\n\n\nou\n\n\noxConfApplication\n:  ox Application Configuration\n\n\noxRevision\n:  Revision\n\n\n\n\noxAuthUmaResourceSet\n#\n\n\n\n\ndisplayName\n\n\ninum\n:  XRI i-number\n\n\nowner\n\n\noxAssociatedClient (or) associatedClient\n:  Associate the dn of an OAuth2 client with a person or UMA Resource Set.\n\n\noxAuthUmaScope\n:  URI reference of scope descriptor\n\n\noxFaviconImage\n:  URI for a graphic icon\n\n\noxGroup\n:  User group\n\n\noxId\n:  Identifier\n\n\noxResource\n:  Host path\n\n\noxRevision\n:  Revision\n\n\noxType\n:  ox type\n\n\noxUrl\n:  ox url\n\n\n\n\noxAuthUmaScopeDescription\n#\n\n\n\n\ndisplayName\n\n\ninum\n:  XRI i-number\n\n\nowner\n\n\noxFaviconImage\n:  URI for a graphic icon\n\n\noxIconUrl\n:  ox icon url\n\n\noxId\n:  Identifier\n\n\noxPolicyRule\n:  Policy Rule\n\n\noxPolicyScriptDn\n:  OX policy script Dn\n\n\noxRevision\n:  Revision\n\n\noxType\n:  ox type\n\n\noxUrl\n:  ox url\n\n\n\n\noxAuthUmaResourceSetPermission\n#\n\n\n\n\noxAmHost\n:  am host\n\n\noxAuthExpiration\n:  oxAuth Expiration\n\n\noxAuthUmaScope\n:  URI reference of scope descriptor\n\n\noxConfigurationCode\n:  ox configuration code\n\n\noxHost\n:  ox host\n\n\noxResourceSetId\n:  ox resource set id\n\n\noxTicket\n:  ox ticket\n\n\n\n\noxAuthGrant\n#\n\n\n\n\noxAuthGrantId\n:  oxAuth grant id\n\n\noxAuthCreation\n:  oxAuth Creation\n\n\n\n\noxAuthToken\n#\n\n\n\n\noxAuthAuthenticationTime\n:  oxAuth Authentication Time\n\n\noxAuthAuthorizationCode\n:  oxAuth authorization code\n\n\noxAuthCreation\n:  oxAuth Creation\n\n\noxAuthExpiration\n:  oxAuth Expiration\n\n\noxAuthGrantId\n:  oxAuth grant id\n\n\noxAuthGrantType\n:  oxAuth Grant Type\n\n\noxAuthJwtRequest\n:  oxAuth JWT Request\n\n\noxAuthNonce\n:  oxAuth nonce\n\n\noxAuthScope\n:  oxAuth Attribute Scope\n\n\noxAuthTokenCode\n:  oxAuth Token Code\n\n\noxAuthTokenType\n:  oxAuth Token Type\n\n\noxAuthUserId\n:  oxAuth user id\n\n\noxAuthClientId\n:  oxAuth Client id\n\n\noxAuthenticationMode\n\n\nuniqueIdentifier\n\n\noxCodeChallenge\n:  OX PKCE code challenge\n\n\noxCodeChallengeMethod\n:  OX PKCE code challenge method\n\n\noxAuthSessionDn\n:  oxAuth Session DN\n\n\n\n\noxAuthUmaRPT\n#\n\n\n\n\noxAmHost\n:  am host\n\n\noxAuthAuthenticationTime\n:  oxAuth Authentication Time\n\n\noxAuthClientId\n:  oxAuth Client id\n\n\noxAuthCreation\n:  oxAuth Creation\n\n\noxAuthExpiration\n:  oxAuth Expiration\n\n\noxAuthTokenCode\n:  oxAuth Token Code\n\n\noxAuthUserId\n:  oxAuth user id\n\n\noxUmaPermission\n:  ox uma permission\n\n\nuniqueIdentifier\n\n\n\n\noxLiteralNode\n#\n\n\n\n\nliteralBinaryValue\n:  OX literalValue\n\n\nliteralValue\n:  OX literalValue\n\n\norganizationalOwner\n:  OX organizationalOwner\n\n\nowner\n\n\ntargetRelationalXdiStatement\n:  OX TargetRelationalXdiStatement\n\n\nx\n:  OX XRI Component\n\n\nxdiStatement\n:  OX xdiStatement\n\n\nxri\n:  OX XRI address\n\n\n\n\noxProxConfiguration\n#\n\n\n\n\nou\n\n\noxProxConf\n:  oxProx Configuration\n\n\noxScriptDn\n:  Script object DN\n\n\n\n\noxProxOp\n#\n\n\n\n\nc\n\n\ndisplayName\n\n\ninum\n:  XRI i-number\n\n\nl\n\n\noxDomain\n:  domain\n\n\noxId\n:  Identifier\n\n\noxX509PEM\n:  x509 in PEM format\n\n\noxX509URL\n:  x509 URL\n\n\n\n\noxProxClient\n#\n\n\n\n\ndisplayName\n\n\ninum\n:  XRI i-number\n\n\noxProxyClaimMapping\n:  oxProx claim mapping\n\n\noxProxyScope\n:  oxProx scope\n\n\noxProxyToOpClientMapping\n:  oxProx client mapping to op client\n\n\n\n\noxProxAccessToken\n#\n\n\n\n\noxAuthCreation\n:  oxAuth Creation\n\n\noxAuthExpiration\n:  oxAuth Expiration\n\n\noxProxyAccessToken\n:  oxProx access token\n\n\noxProxyClientId\n:  oxProx client id\n\n\n\n\noxScript\n#\n\n\n\n\ninum\n:  XRI i-number\n\n\noxScript\n:  Attribute that contains script (python, java script)\n\n\noxScriptType\n:  Attribute that contains script type (e.g. python, java script)\n\n\n\n\noxPushApplication\n#\n\n\n\n\ndisplayName\n\n\noxId\n:  Identifier\n\n\noxName\n:  Name\n\n\noxPushApplicationConf\n:  oxPush application configuration\n\n\n\n\noxPushDevice\n#\n\n\n\n\noxAuthUserId\n:  oxAuth user id\n\n\noxId\n:  Identifier\n\n\noxPushApplication\n:  oxPush application DN\n\n\noxPushDeviceConf\n:  oxPush device configuration\n\n\noxType\n:  ox type\n\n\n\n\noxCustomScript\n#\n\n\n\n\ninum\n:  XRI i-number\n\n\ndisplayName\n\n\ndescription\n\n\noxScript\n:  Attribute that contains script (python, java script)\n\n\noxScriptType\n:  Attribute that contains script type (e.g. python, java script)\n\n\nprogrammingLanguage\n:  programming language\n\n\noxModuleProperty\n:  Module property\n\n\noxConfigurationProperty\n:  Configuration property\n\n\noxLevel\n:  Level\n\n\noxRevision\n:  Revision\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\n\n\noxDeviceRegistration\n#\n\n\n\n\noxId\n:  Identifier\n\n\ndisplayName\n\n\ndescription\n\n\noxDeviceKeyHandle\n:  oxDeviceKeyHandle\n\n\noxDeviceHashCode\n:  oxDeviceHashCode\n\n\noxApplication\n:  oxApplication\n\n\noxDeviceRegistrationConf\n:  oxDeviceRegistrationConf\n\n\noxDeviceData\n:  oxDeviceData\n\n\noxCounter\n:  oxCounter\n\n\noxStatus\n:  oxStatus\n\n\ncreationDate\n:  Creation Date used for password reset requests\n\n\noxLastAccessTime\n:  Last access time\n\n\noxTrustMetaLastModified\n\n\noxTrustMetaLocation\n\n\noxTrustMetaVersion\n\n\n\n\noxU2fRequest\n#\n\n\n\n\noxId\n:  Identifier\n\n\noxRequestId\n:  oxRequestId\n\n\noxRequest\n:  oxRequest\n\n\noxSessionStateId\n:  oxSessionStateId\n\n\npersonInum\n:  Inum of a person\n\n\ncreationDate\n:  Creation Date used for password reset requests\n\n\n\n\noxMetric\n#\n\n\n\n\nuniqueIdentifier\n\n\noxStartDate\n:  Start date\n\n\noxEndDate\n:  End date\n\n\noxApplicationType\n:  Application type\n\n\noxMetricType\n:  Metric type\n\n\ncreationDate\n:  Creation Date used for password reset requests\n\n\noxData\n:  OX data\n\n\n\n\noxClientAuthorizations\n#\n\n\n\n\noxId\n:  Identifier\n\n\noxAuthClientId\n:  oxAuth Client id\n\n\noxAuthScope\n:  oxAuth Attribute Scope\n\n\n\n\noxSectorIdentifier\n#\n\n\n\n\ninum\n:  XRI i-number\n\n\noxAuthRedirectURI\n:  oxAuth Redirect URI\n\n\noxAuthClientId\n:  oxAuth Client id\n\n\n\n\noxAsimbaConfiguration\n#\n\n\n\n\nou\n\n\nfriendlyName\n:  oxAsimba friendlyName field\n\n\nuniqueIdentifier\n\n\ninum\n:  XRI i-number\n\n\noxAsimbaEntry\n:  oxAsimba configuration JSON/XML serialization field\n\n\noxConfApplication\n:  ox Application Configuration\n\n\noxRevision\n:  Revision\n\n\n\n\noxAsimbaSelector\n#\n\n\n\n\nou\n\n\nfriendlyName\n:  oxAsimba friendlyName field\n\n\nuniqueIdentifier\n\n\ninum\n:  XRI i-number\n\n\norganizationId\n:  oxAsimba IDP organizationId field\n\n\noxAsimbaEntry\n:  oxAsimba configuration JSON/XML serialization field\n\n\noxRevision\n:  Revision\n\n\n\n\noxAsimbaIDP\n#\n\n\n\n\nou\n\n\nfriendlyName\n:  oxAsimba friendlyName field\n\n\nuniqueIdentifier\n\n\ninum\n:  XRI i-number\n\n\noxAsimbaEntry\n:  oxAsimba configuration JSON/XML serialization field\n\n\noxRevision\n:  Revision\n\n\n\n\noxAsimbaRequestorPool\n#\n\n\n\n\nou\n\n\nfriendlyName\n:  oxAsimba friendlyName field\n\n\nuniqueIdentifier\n\n\ninum\n:  XRI i-number\n\n\noxAsimbaEntry\n:  oxAsimba configuration JSON/XML serialization field\n\n\noxRevision\n:  Revision\n\n\n\n\noxAsimbaSPRequestor\n#\n\n\n\n\nou\n\n\nfriendlyName\n:  oxAsimba friendlyName field\n\n\nuniqueIdentifier\n\n\ninum\n:  XRI i-number\n\n\noxAsimbaEntry\n:  oxAsimba configuration JSON/XML serialization field\n\n\noxRevision\n:  Revision\n\n\n\n\noxPassportConfiguration\n#\n\n\n\n\nou\n\n\ngluuPassportConfiguration\n:  oxTrust Passport Strategy Configuration\n\n\ngluuStatus\n:  Status of the entry, used by many objectclasses\n\n\n\n\noxShibbolethCASProtocolConfiguration\n#\n\n\n\n\nou\n\n\nfriendlyName\n:  oxAsimba friendlyName field\n\n\nuniqueIdentifier\n\n\ninum\n:  XRI i-number\n\n\noxConfApplication\n:  ox Application Configuration\n\n\noxRevision\n:  Revision",
            "title": "OpenLDAP Schema"
        },
        {
            "location": "/reference/schema/#gluu-ldap-schema",
            "text": "Below are the schemes for OpenDJ and OpenLDAP.   OpenDJ  OpenLDAP    Note  This section of the documentation is for reference and Schemas should not be manually edited.   Below objectclasses and attributes are extracted from Gluu Specific Schemas.",
            "title": "Gluu LDAP Schema"
        },
        {
            "location": "/reference/schema/#pairwiseidentifier",
            "text": "oxId :  Identifier  oxSectorIdentifier :  ox Sector Identifier",
            "title": "pairwiseIdentifier"
        },
        {
            "location": "/reference/schema/#gluuperson",
            "text": "oxAssociatedClient (or) associatedClient :  Associate the dn of an OAuth2 client with a person or UMA Resource Set.  c  displayName  givenName  gluuManagedOrganizations :  Used to track with which organizations a person is associated  gluuOptOuts :  White pages attributes restricted by person in oxTrust profile management  gluuStatus :  Status of the entry, used by many objectclasses  gluuWhitePagesListed :  Allow Publication  iname  inum :  XRI i-number  mail  gluuSLAManager :  Specifies if the person has the SLA manager role  memberOf  o  oxAuthPersistentJWT :  oxAuth Persistent JWT  oxCreationTimestamp :  Registration time  oxExternalUid  oxLastLogonTime :  Last logon time  oxTrustActive  oxTrustAddresses  oxTrustEmail  oxTrustEntitlements  oxTrustExternalId  oxTrustImsValue  oxTrustMetaCreated  oxTrustMetaLastModified  oxTrustMetaLocation  oxTrustMetaVersion  oxTrustNameFormatted  oxTrustPhoneValue  oxTrustPhotos  oxTrustProfileURL  oxTrustRole  oxTrustTitle  oxTrustUserType  oxTrusthonorificPrefix  oxTrusthonorificSuffix  oxTrustx509Certificate  oxPasswordExpirationDate :  Password Expiration date, represented as an ISO 8601 (YYYY-MM-DD) format  persistentId :  PersistentId  middleName (or) oxTrustMiddleName :  Middle name(s)  nickname (or) oxTrustnickname :  Casual name of the End-User  preferredUsername :  Shorthand Name  profile :  Profile page URL of the person  picture (or) photo1 :  Profile picture URL of the person  website :  Web page or blog URL of the person  emailVerified :  True if the e-mail address of the person has been verified; otherwise false  gender :  Gender of the person either female or male  birthdate :  Birthday of the person, represented as an ISO 8601:2004 [ISO8601\u20112004] YYYY-MM-DD format  zoneinfo (or) timezone :  Time zone database representing the End-Users time zone. For example, Europe/Paris or America/Los_Angeles  locale (or) oxTrustLocale :  Locale of the person, represented as a BCP47 [RFC5646] language tag  phoneNumberVerified :  True if the phone number of the person has been verified, otherwise false  address :  OpenID Connect formatted JSON object representing the address of the person  updatedAt :  Time the information of the person was last updated. Seconds from 1970-01-01T0:0:0Z  preferredLanguage  role :  Role  secretAnswer :  Secret Answer  secretQuestion :  Secret Question  seeAlso  sn  cn  transientId :  TransientId  uid  userPassword  st  street  l  oxCountInvalidLogin :  Invalid login attempts count  oxEnrollmentCode :  oxEnrollmentCode  gluuIMAPData :  This data has information about your imap connection  oxPPID :  Persistent Pairwise ID for OpenID Connect",
            "title": "gluuPerson"
        },
        {
            "location": "/reference/schema/#gluugroup",
            "text": "c  description  displayName  gluuGroupType :  Type of Group. Not used.  gluuGroupVisibility :  Group visibility. Not used.  gluuStatus :  Status of the entry, used by many objectclasses  iname  inum :  XRI i-number  member  o  owner  seeAlso  oxTrustMetaCreated  oxTrustMetaLastModified  oxTrustMetaLocation  oxTrustMetaVersion",
            "title": "gluuGroup"
        },
        {
            "location": "/reference/schema/#gluuorganization",
            "text": "c  county :  ISO 3166-1 Alpha-2 Country Code  deployedAppliances :  Track which appliances are deployed at an organization.  description  displayName  gluuAddPersonCapability :  Organizational attribute to control whether new users can be added  via the oxTrust GUI.  gluuAdditionalUsers :  TODO : use unclear  gluuApplianceUpdateRequestList (or) gluuApplianceUpdateReuestList :  Used by the Gluu Server to request an update  gluuCustomMessage :  oxTrust custom welcome message  gluuFaviconImage :  TODO - Stores URL of favicon  gluuFederationHostingEnabled :  oxTrust flag for the federation feature. Values enabled or disabled.  gluuInvoiceNo :  TODO - in use?  gluuLogoImage :  Logo used by oxTrust for default look and feel.  gluuManageIdentityPermission :  TODO - in use?  gluuManager :  Used to specify if a person has the manager role  gluuManagerGroup :  Used in organizatoin entry to specifies the dn of the group that  has admin priviledges in oxTrust.  gluuOrgProfileMgt :  enable or disable profile management feature in oxTrust  gluuOrgShortName :  Short description, as few letters as possible, no spaces.  gluuPaidUntil :  TODO - in use?  gluuPaymentProcessorTimestamp :  TODO - in use?  gluuProStoresUser :  TODO - remove  gluuStatus :  Status of the entry, used by many objectclasses  gluuTempFaviconImage :  Store location for upload of Favicon  gluuThemeColor :  oxTrust login page configuration  gluuWhitePagesEnabled  iname  inum :  XRI i-number  l  mail  memberOf  nonProfit :  TODO - in use?  o  oxCreationTimestamp :  Registration time  oxLinkLinktrack :  Linktrack link  oxLinktrackEnabled :  Is Linktrack API configured  oxLinktrackLogin :  Linktrack API login  oxLinktrackPassword :  Linktrack API password  oxRegistrationConfiguration :  Registration Configuration  postalCode  proStoresToken  prostoresTimestamp  scimAuthMode :  SCIM Authorization mode  scimGroup :  scim Group  scimStatus :  scim status  st  street  telephoneNumber  title  uid  userPassword",
            "title": "gluuOrganization"
        },
        {
            "location": "/reference/schema/#gluuappliance",
            "text": "blowfishPassword :  Blowfish crypted text  c  description  displayName  gluuAdditionalBandwidth :  Track bandwidth requirements for the Gluu Server instance  gluuAdditionalMemory :  Track additional memory requirements for the Gluu Server instance.  gluuApplianceDnsServer :  Persist the DNS server that should be used for the Gluu Server instance.  gluuAppliancePollingInterval :  Set the frequency of the health status update of the Gluu Server  gluuBandwidthRX :  Track data received by the Gluu Server  gluuBandwidthTX :  Track data sent by the Gluu Server  gluuDSstatus :  Monitor health of the instance LDAP server.  gluuFederationHostingEnabled :  oxTrust flag for the federation feature. Values enabled or disabled.  gluuFreeDiskSpace :  Monitor free disk space on the Gluu Server instance  gluuFreeMemory :  Monitor free memory on the Gluu Server instance  gluuFreeSwap :  Monitor swap space on the Gluu Server instance  gluuGroupCount :  Monitor the number of groups. TODO - Remove?  gluuHTTPstatus :  Monitor HTTP availability of the Gluu Server instance  gluuHostname :  The hostname of the Gluu Server instance  gluuInvoiceNo :  TODO - in use?  gluuIpAddress :  IP address of the Gluu Server instance  gluuLastUpdate :  Monitors last time the server was able to connect to  the monitoring system.  gluuLifeRay (or) TODO-remove  gluuLoadAvg :  Montior the average CPU load for a Gluu Server instance.  gluuManageIdentityPermission :  TODO - in use?  gluuManager :  Used to specify if a person has the manager role  gluuMaxLogSize :  Maximum Log File Size  gluuOrgProfileMgt :  enable or disable profile management feature in oxTrust  gluuPaidUntil :  TODO - in use?  gluuPaymentProcessorTimestamp :  TODO - in use?  gluuPersonCount :  Monitor the number of people in the LDAP severs for a Gluu Server instance  gluuPrivate :  TODO - in use?  gluuPublishIdpMetadata :  Gluu Server flag to publish the IDP metadata via the web server  gluuResizeInitiated :  TODO - in use?  gluuSPTR :  TODO - in use?  gluuScimEnabled :  oxTrust SCIM feature - enabled or disabled  gluuShibAssertionsIssued :  Monitors activity of Gluu Server Shibboleth IDP  gluuShibFailedAuth :  Monitors failed login attempts on Gluu Server Shibboleth IDP  gluuShibSecurityEvents :  Monitors security events on Gluu Server Shibboleth IDP  gluuShibSuccessfulAuths :  Monitors login attempts on Gluu Server Shibboleth IDP  oxTrustEmail  gluuSmtpFromEmailAddress :  Gluu Server SMTP configuration  gluuSmtpFromName :  SMTP From Name  gluuSmtpHost :  SMTP Host  gluuSmtpPassword :  SMTP User Password  gluuSmtpPort :  SMTP Port  gluuSmtpRequiresAuthentication :  SMTP Requires Authentication  gluuSmtpRequiresSsl :  SMTP Requires SSL  gluuSmtpUserName :  SMTP User Name  gluuSslExpiry :  SAML Trust Relationship configuration  gluuStatus :  Status of the entry, used by many objectclasses  gluuSystemUptime :  Monitors how long the Gluu Server instance has been running.  gluuTargetRAM :  Monitors total available RAM on Gluu Server instance  gluuUrl :  Gluu instance URL  gluuVDSenabled :  oxTrust VDS enabled or disabled  gluuVDSstatus :  Gluu VDS configuration  gluuVdsCacheRefreshEnabled  gluuVdsCacheRefreshLastUpdate  gluuVdsCacheRefreshLastUpdateCount  gluuVdsCacheRefreshPollingInterval  gluuVdsCacheRefreshProblemCount  gluuWhitePagesEnabled  iname  inum :  XRI i-number  inumFN :  XRI i-number sans punctuation  o  oxAuthenticationMode  oxTrustAuthenticationMode  oxIDPAuthentication :  Custom IDP authentication configuration  oxLogViewerConfig :  Log viewer configuration  oxSmtpConfiguration :  SMTP configuration  oxMemcachedConfiguration :  Memcached configuration  oxTrustStoreCert :  oxPush device configuration  oxTrustStoreConf :  oxPush application configuration  passwordResetAllowed :  Is password reset mechanics allowed  softwareVersion  userPassword  oxTrustCacheRefreshServerIpAddress  gluuPassportEnabled",
            "title": "gluuAppliance"
        },
        {
            "location": "/reference/schema/#gluuattribute",
            "text": "description  displayName  gluuAttributeEditType :  Specify in oxTrust who can update an attribute, admin or user  gluuAttributeName :  Specify an identifier for an attribute. May be multi-value  where an attribute has two names, like givenName and first-name.  gluuAttributeOrigin :  Specify the person objectclass associated with the attribute,  used for display purposes in oxTrust.  gluuAttributeSystemEditType :  TODO - still required?  gluuAttributeType :  Data type of attribute. Values can be string, photo, numeric, date  oxAuthClaimName :  Used by oxAuth in conjunction with gluuttributeName to map claims to attributes in LDAP.  gluuAttributeUsageType :  TODO - Usage? Value can be OpenID  gluuAttributeViewType :  Specify in oxTrust who can view an attribute, admin or user  gluuCategory :  TODO - in use? Used to group attributes together.  gluuSAML1URI :  SAML 1 uri of attribute  gluuSAML2URI :  SAML 2 uri of attribute  gluuStatus :  Status of the entry, used by many objectclasses  iname  inum :  XRI i-number  oxAttributeType :  NameId or attribute  oxMultivaluedAttribute  oxNameIdType :  NameId Type  oxSCIMCustomAttribute  oxSourceAttribute :  Source Attribute for this Attribute  seeAlso  urn  gluuRegExp :  Regular expression used to validate attribute data  gluuTooltip :  Custom tooltip to be shown on the UI  oxValidation :  This data has information about attribute Validation",
            "title": "gluuAttribute"
        },
        {
            "location": "/reference/schema/#gluusamlconfig",
            "text": "description  displayName  federationRules :  Track rules for the federation in Gluu SAML config. Deprecated  as multi-party federation management should move to Jagger.  gluuContainerFederation :  SAML Trust Relationship federation info  gluuEntityId :  Specifies SAML trust relationship entity ID  gluuIsFederation :  Used in oxTrust to specify if a SAML Trust Relationship is a federation.  It could also be a website  gluuProfileConfiguration :  SAML Trust Relationship attribute  gluuReleasedAttribute :  oxTrust reference for the dn of the released attribute  gluuRulesAccepted :  TODO - use unknown for Gluu SAML config  gluuSAMLMetaDataFilter :  Metadata filter in SAML trust relationship  gluuSAMLTrustEngine :  SAML trust relationship configuration  gluuSAMLmaxRefreshDelay :  SAML trust relationship refresh time  gluuSAMLspMetaDataFN :  SAML Trust Relationship file location of metadata  gluuSAMLspMetaDataSourceType :  SAML Trust Relationship SP metadata type - file, URI, federation  gluuSAMLspMetaDataURL :  SAML Trust Relationship URI location of metadata  gluuSpecificRelyingPartyConfig :  SAML Trust Relationship configuration  gluuStatus :  Status of the entry, used by many objectclasses  gluuTrustContact :  oxTrust login page configuration  gluuTrustDeconstruction :  TODO - in use?  gluuValidationLog  gluuValidationStatus  iname  inum :  XRI i-number  o  oxAuthPostLogoutRedirectURI :  oxAuth Post Logout Redirect URI  url  researchAndScholarshipEnabled :  Trust relationship attribute to show that InCommon R&S activated  gluuEntityType :  This data has information about TR EntityType",
            "title": "gluuSAMLconfig"
        },
        {
            "location": "/reference/schema/#gluuinummap",
            "text": "gluuStatus :  Status of the entry, used by many objectclasses  inum :  XRI i-number  primaryKeyAttrName :  Primary Key Attribute Name  primaryKeyValue :  Primary Key Value  secondaryKeyAttrName :  Secondary Key Attribute Name  secondaryKeyValue :  Secondary Key Value  tertiaryKeyAttrName :  Tertiary Key Attribute Name  tertiaryKeyValue :  Tertiary Key Value",
            "title": "gluuInumMap"
        },
        {
            "location": "/reference/schema/#gluuinvoice",
            "text": "gluuInvoiceAmount :  TODO - in use?  gluuInvoiceDate :  TODO - in use?  gluuInvoiceLineItemName :  TODO - in use?  gluuInvoiceNumber :  TODO - in use?  gluuInvoiceProductNumber :  TODO - in use?  gluuInvoiceQuantity :  TODO - in use?  gluuInvoiceStatus :  TODO - in use?  inum :  XRI i-number",
            "title": "gluuInvoice"
        },
        {
            "location": "/reference/schema/#gluupasswordresetrequest",
            "text": "creationDate :  Creation Date used for password reset requests  oxGuid :  A random string to mark temporary tokens  personInum :  Inum of a person",
            "title": "gluuPasswordResetRequest"
        },
        {
            "location": "/reference/schema/#oxlink",
            "text": "description  oxGuid :  A random string to mark temporary tokens  oxLinkCreator :  Link Creator  oxLinkExpirationDate :  Link Expiration Date  oxLinkLinktrack :  Linktrack link  oxLinkModerated :  Is Link Moderated?  oxLinkModerators :  Link Moderators  oxLinkPending :  Pending Registrations",
            "title": "oxLink"
        },
        {
            "location": "/reference/schema/#vdapcontainer",
            "text": "ou",
            "title": "vdapcontainer"
        },
        {
            "location": "/reference/schema/#vddirectoryview",
            "text": "o",
            "title": "vdDirectoryView"
        },
        {
            "location": "/reference/schema/#vdlabel",
            "text": "o",
            "title": "vdlabel"
        },
        {
            "location": "/reference/schema/#oxentry",
            "text": "displayName  iname  inum :  XRI i-number",
            "title": "oxEntry"
        },
        {
            "location": "/reference/schema/#oxnode",
            "text": "organizationalOwner :  OX organizationalOwner  owner  sourceRelationalXdiStatement :  OX SourceRelationalXdiStatement  targetRelationalXdiStatement :  OX TargetRelationalXdiStatement  x :  OX XRI Component  xdiStatement :  OX xdiStatement  xri :  OX XRI address",
            "title": "oxNode"
        },
        {
            "location": "/reference/schema/#oxauthclient",
            "text": "associatedPerson :  Reference the dn of a person.  displayName  inum :  XRI i-number  oxAuthAppType :  oxAuth App Type  oxAuthClientIdIssuedAt :  oxAuth Client Issued At  oxAuthClientSecret :  oxAuth Client Secret  oxAuthClientSecretExpiresAt :  Date client expires  oxAuthClientURI :  oxAuth Client URI  oxAuthContact :  oxAuth Contact  oxAuthDefaultAcrValues :  oxAuth Default Acr Values  oxAuthDefaultMaxAge :  oxAuth Default Max Age  oxAuthGrantType :  oxAuth Grant Type  oxAuthIdTokenEncryptedResponseAlg :  oxAuth ID Token Encrypted Response Alg  oxAuthIdTokenEncryptedResponseEnc :  oxAuth ID Token Encrypted Response Enc  oxAuthIdTokenSignedResponseAlg :  oxAuth ID Token Signed Response Alg  oxAuthInitiateLoginURI :  oxAuth Initiate Login URI  oxAuthJwksURI :  oxAuth JWKs URI  oxAuthJwks :  oxAuth JWKs  oxAuthLogoURI :  oxAuth Logo URI  oxAuthPolicyURI :  oxAuth Policy URI  oxAuthPostLogoutRedirectURI :  oxAuth Post Logout Redirect URI  oxAuthRedirectURI :  oxAuth Redirect URI  oxAuthRegistrationAccessToken :  oxAuth Registration Access Token  oxAuthRequestObjectSigningAlg :  oxAuth Request Object Signing Alg  oxAuthRequestObjectEncryptionAlg :  oxAuth Request Object Encryption Alg  oxAuthRequestObjectEncryptionEnc :  oxAuth Request Object Encryption Enc  oxAuthRequestURI :  oxAuth Request URI  oxAuthRequireAuthTime :  oxAuth Require Authentication Time  oxAuthResponseType :  oxAuth Response Type  oxAuthScope :  oxAuth Attribute Scope  oxAuthSectorIdentifierURI :  oxAuth Sector Identifier URI  oxAuthSignedResponseAlg :  oxAuth Signed Response Alg  oxAuthSubjectType :  oxAuth Subject Type  oxAuthTokenEndpointAuthMethod :  oxAuth Token Endpoint Auth Method  oxAuthTokenEndpointAuthSigningAlg :  oxAuth Token Endpoint Auth Signing Alg  oxAuthTosURI :  oxAuth TOS URI  oxAuthTrustedClient :  oxAuth Trusted Client  oxAuthUserInfoEncryptedResponseAlg :  oxAuth User Info Encrypted Response Alg  oxAuthUserInfoEncryptedResponseEnc :  oxAuth User Info Encrypted Response Enc  oxAuthExtraConf :  oxAuth additional configuration  oxLastAccessTime :  Last access time  oxLastLogonTime :  Last logon time  oxPersistClientAuthorizations :  ox Persist Client Authorizations  oxAuthLogoutURI :  oxAuth Policy URI  oxAuthLogoutSessionRequired :  oxAuth Policy URI",
            "title": "oxAuthClient"
        },
        {
            "location": "/reference/schema/#oxauthcustomscope",
            "text": "defaultScope :  Track the default scope for an custom OAuth2 Scope.  description  displayName  inum :  XRI i-number  oxScopeType :  OX Attribute Scope type  oxAuthClaim :  oxAuth Attribute Claim  oxScriptDn :  Script object DN  oxAuthGroupClaims :  oxAuth Group Attribute Claims (true or false)",
            "title": "oxAuthCustomScope"
        },
        {
            "location": "/reference/schema/#oxauthsessionid",
            "text": "oxLastAccessTime :  Last access time  oxAuthAuthenticationTime :  oxAuth Authentication Time  oxAuthPermissionGranted :  oxAuth Permission Granted  oxAuthPermissionGrantedMap :  oxAuth Permission Granted Map  oxAuthUserDN :  oxAuth User DN  oxAuthSessionId :  oxAuth Session Id  oxState :  oxState  oxAuthSessionAttribute :  oxAuthSessionAttribute  oxAsJwt :  Boolean field to indicate whether object is used as JWT  oxJwt :  JWT representation of the object or otherwise jwt associated with the object  oxInvolvedClients :  Involved clients",
            "title": "oxAuthSessionId"
        },
        {
            "location": "/reference/schema/#oxauthconfiguration",
            "text": "ou  oxAuthConfDynamic :  oxAuth Dynamic Configuration  oxAuthConfErrors :  oxAuth Errors Configuration  oxAuthConfStatic :  oxAuth Static Configuration  oxAuthConfWebKeys :  oxAuth Web Keys Configuration  oxRevision :  Revision",
            "title": "oxAuthConfiguration"
        },
        {
            "location": "/reference/schema/#oxtrustconfiguration",
            "text": "ou  oxTrustConfApplication :  oxTrust Application Configuration  oxTrustConfCacheRefresh :  oxTrust Cache Refresh Configuration  oxRevision :  Revision  oxTrustConfImportPerson :  oxTrust Import Person Configuration",
            "title": "oxTrustConfiguration"
        },
        {
            "location": "/reference/schema/#oxapplicationconfiguration",
            "text": "ou  oxConfApplication :  ox Application Configuration  oxRevision :  Revision",
            "title": "oxApplicationConfiguration"
        },
        {
            "location": "/reference/schema/#oxauthumaresourceset",
            "text": "displayName  inum :  XRI i-number  owner  oxAssociatedClient (or) associatedClient :  Associate the dn of an OAuth2 client with a person or UMA Resource Set.  oxAuthUmaScope :  URI reference of scope descriptor  oxFaviconImage :  URI for a graphic icon  oxGroup :  User group  oxId :  Identifier  oxResource :  Host path  oxRevision :  Revision  oxType :  ox type  oxUrl :  ox url",
            "title": "oxAuthUmaResourceSet"
        },
        {
            "location": "/reference/schema/#oxauthumascopedescription",
            "text": "displayName  inum :  XRI i-number  owner  oxFaviconImage :  URI for a graphic icon  oxIconUrl :  ox icon url  oxId :  Identifier  oxPolicyRule :  Policy Rule  oxPolicyScriptDn :  OX policy script Dn  oxRevision :  Revision  oxType :  ox type  oxUrl :  ox url",
            "title": "oxAuthUmaScopeDescription"
        },
        {
            "location": "/reference/schema/#oxauthumaresourcesetpermission",
            "text": "oxAmHost :  am host  oxAuthExpiration :  oxAuth Expiration  oxAuthUmaScope :  URI reference of scope descriptor  oxConfigurationCode :  ox configuration code  oxHost :  ox host  oxResourceSetId :  ox resource set id  oxTicket :  ox ticket",
            "title": "oxAuthUmaResourceSetPermission"
        },
        {
            "location": "/reference/schema/#oxauthgrant",
            "text": "oxAuthGrantId :  oxAuth grant id  oxAuthCreation :  oxAuth Creation",
            "title": "oxAuthGrant"
        },
        {
            "location": "/reference/schema/#oxauthtoken",
            "text": "oxAuthAuthenticationTime :  oxAuth Authentication Time  oxAuthAuthorizationCode :  oxAuth authorization code  oxAuthCreation :  oxAuth Creation  oxAuthExpiration :  oxAuth Expiration  oxAuthGrantId :  oxAuth grant id  oxAuthGrantType :  oxAuth Grant Type  oxAuthJwtRequest :  oxAuth JWT Request  oxAuthNonce :  oxAuth nonce  oxAuthScope :  oxAuth Attribute Scope  oxAuthTokenCode :  oxAuth Token Code  oxAuthTokenType :  oxAuth Token Type  oxAuthUserId :  oxAuth user id  oxAuthClientId :  oxAuth Client id  oxAuthenticationMode  uniqueIdentifier  oxCodeChallenge :  OX PKCE code challenge  oxCodeChallengeMethod :  OX PKCE code challenge method  oxAuthSessionDn :  oxAuth Session DN",
            "title": "oxAuthToken"
        },
        {
            "location": "/reference/schema/#oxauthumarpt",
            "text": "oxAmHost :  am host  oxAuthAuthenticationTime :  oxAuth Authentication Time  oxAuthClientId :  oxAuth Client id  oxAuthCreation :  oxAuth Creation  oxAuthExpiration :  oxAuth Expiration  oxAuthTokenCode :  oxAuth Token Code  oxAuthUserId :  oxAuth user id  oxUmaPermission :  ox uma permission  uniqueIdentifier",
            "title": "oxAuthUmaRPT"
        },
        {
            "location": "/reference/schema/#oxliteralnode",
            "text": "literalBinaryValue :  OX literalValue  literalValue :  OX literalValue  organizationalOwner :  OX organizationalOwner  owner  targetRelationalXdiStatement :  OX TargetRelationalXdiStatement  x :  OX XRI Component  xdiStatement :  OX xdiStatement  xri :  OX XRI address",
            "title": "oxLiteralNode"
        },
        {
            "location": "/reference/schema/#oxproxconfiguration",
            "text": "ou  oxProxConf :  oxProx Configuration  oxScriptDn :  Script object DN",
            "title": "oxProxConfiguration"
        },
        {
            "location": "/reference/schema/#oxproxop",
            "text": "c  displayName  inum :  XRI i-number  l  oxDomain :  domain  oxId :  Identifier  oxX509PEM :  x509 in PEM format  oxX509URL :  x509 URL",
            "title": "oxProxOp"
        },
        {
            "location": "/reference/schema/#oxproxclient",
            "text": "displayName  inum :  XRI i-number  oxProxyClaimMapping :  oxProx claim mapping  oxProxyScope :  oxProx scope  oxProxyToOpClientMapping :  oxProx client mapping to op client",
            "title": "oxProxClient"
        },
        {
            "location": "/reference/schema/#oxproxaccesstoken",
            "text": "oxAuthCreation :  oxAuth Creation  oxAuthExpiration :  oxAuth Expiration  oxProxyAccessToken :  oxProx access token  oxProxyClientId :  oxProx client id",
            "title": "oxProxAccessToken"
        },
        {
            "location": "/reference/schema/#oxscript",
            "text": "inum :  XRI i-number  oxScript :  Attribute that contains script (python, java script)  oxScriptType :  Attribute that contains script type (e.g. python, java script)",
            "title": "oxScript"
        },
        {
            "location": "/reference/schema/#oxpushapplication",
            "text": "displayName  oxId :  Identifier  oxName :  Name  oxPushApplicationConf :  oxPush application configuration",
            "title": "oxPushApplication"
        },
        {
            "location": "/reference/schema/#oxpushdevice",
            "text": "oxAuthUserId :  oxAuth user id  oxId :  Identifier  oxPushApplication :  oxPush application DN  oxPushDeviceConf :  oxPush device configuration  oxType :  ox type",
            "title": "oxPushDevice"
        },
        {
            "location": "/reference/schema/#oxcustomscript",
            "text": "inum :  XRI i-number  displayName  description  oxScript :  Attribute that contains script (python, java script)  oxScriptType :  Attribute that contains script type (e.g. python, java script)  programmingLanguage :  programming language  oxModuleProperty :  Module property  oxConfigurationProperty :  Configuration property  oxLevel :  Level  oxRevision :  Revision  gluuStatus :  Status of the entry, used by many objectclasses",
            "title": "oxCustomScript"
        },
        {
            "location": "/reference/schema/#oxdeviceregistration",
            "text": "oxId :  Identifier  displayName  description  oxDeviceKeyHandle :  oxDeviceKeyHandle  oxDeviceHashCode :  oxDeviceHashCode  oxApplication :  oxApplication  oxDeviceRegistrationConf :  oxDeviceRegistrationConf  oxDeviceData :  oxDeviceData  oxCounter :  oxCounter  oxStatus :  oxStatus  creationDate :  Creation Date used for password reset requests  oxLastAccessTime :  Last access time  oxTrustMetaLastModified  oxTrustMetaLocation  oxTrustMetaVersion",
            "title": "oxDeviceRegistration"
        },
        {
            "location": "/reference/schema/#oxu2frequest",
            "text": "oxId :  Identifier  oxRequestId :  oxRequestId  oxRequest :  oxRequest  oxSessionStateId :  oxSessionStateId  personInum :  Inum of a person  creationDate :  Creation Date used for password reset requests",
            "title": "oxU2fRequest"
        },
        {
            "location": "/reference/schema/#oxmetric",
            "text": "uniqueIdentifier  oxStartDate :  Start date  oxEndDate :  End date  oxApplicationType :  Application type  oxMetricType :  Metric type  creationDate :  Creation Date used for password reset requests  oxData :  OX data",
            "title": "oxMetric"
        },
        {
            "location": "/reference/schema/#oxclientauthorizations",
            "text": "oxId :  Identifier  oxAuthClientId :  oxAuth Client id  oxAuthScope :  oxAuth Attribute Scope",
            "title": "oxClientAuthorizations"
        },
        {
            "location": "/reference/schema/#oxsectoridentifier",
            "text": "inum :  XRI i-number  oxAuthRedirectURI :  oxAuth Redirect URI  oxAuthClientId :  oxAuth Client id",
            "title": "oxSectorIdentifier"
        },
        {
            "location": "/reference/schema/#oxasimbaconfiguration",
            "text": "ou  friendlyName :  oxAsimba friendlyName field  uniqueIdentifier  inum :  XRI i-number  oxAsimbaEntry :  oxAsimba configuration JSON/XML serialization field  oxConfApplication :  ox Application Configuration  oxRevision :  Revision",
            "title": "oxAsimbaConfiguration"
        },
        {
            "location": "/reference/schema/#oxasimbaselector",
            "text": "ou  friendlyName :  oxAsimba friendlyName field  uniqueIdentifier  inum :  XRI i-number  organizationId :  oxAsimba IDP organizationId field  oxAsimbaEntry :  oxAsimba configuration JSON/XML serialization field  oxRevision :  Revision",
            "title": "oxAsimbaSelector"
        },
        {
            "location": "/reference/schema/#oxasimbaidp",
            "text": "ou  friendlyName :  oxAsimba friendlyName field  uniqueIdentifier  inum :  XRI i-number  oxAsimbaEntry :  oxAsimba configuration JSON/XML serialization field  oxRevision :  Revision",
            "title": "oxAsimbaIDP"
        },
        {
            "location": "/reference/schema/#oxasimbarequestorpool",
            "text": "ou  friendlyName :  oxAsimba friendlyName field  uniqueIdentifier  inum :  XRI i-number  oxAsimbaEntry :  oxAsimba configuration JSON/XML serialization field  oxRevision :  Revision",
            "title": "oxAsimbaRequestorPool"
        },
        {
            "location": "/reference/schema/#oxasimbasprequestor",
            "text": "ou  friendlyName :  oxAsimba friendlyName field  uniqueIdentifier  inum :  XRI i-number  oxAsimbaEntry :  oxAsimba configuration JSON/XML serialization field  oxRevision :  Revision",
            "title": "oxAsimbaSPRequestor"
        },
        {
            "location": "/reference/schema/#oxpassportconfiguration",
            "text": "ou  gluuPassportConfiguration :  oxTrust Passport Strategy Configuration  gluuStatus :  Status of the entry, used by many objectclasses",
            "title": "oxPassportConfiguration"
        },
        {
            "location": "/reference/schema/#oxshibbolethcasprotocolconfiguration",
            "text": "ou  friendlyName :  oxAsimba friendlyName field  uniqueIdentifier  inum :  XRI i-number  oxConfApplication :  ox Application Configuration  oxRevision :  Revision",
            "title": "oxShibbolethCASProtocolConfiguration"
        },
        {
            "location": "/operation/backup/",
            "text": "Gluu Server Backup\n#\n\n\nThere methods of backing up Gluu Server CE is given below:\n\n\n\n\nTarball Method: using \ntar\n command to tarball the entire \nGluu Server CE \nchroot\n folder\n\n\n\n\n\n\n\nTarball Method\n#\n\n\n\n\nStop the server using below command\n    a. #service gluu-server-3.0.0 stop\n\n\nuse tar command to take a back up\n    b. # tar cvf gluu244-backup.tar /opt/gluu-server-3.0.0/",
            "title": "Backups"
        },
        {
            "location": "/operation/backup/#gluu-server-backup",
            "text": "There methods of backing up Gluu Server CE is given below:   Tarball Method: using  tar  command to tarball the entire \nGluu Server CE  chroot  folder",
            "title": "Gluu Server Backup"
        },
        {
            "location": "/operation/backup/#tarball-method",
            "text": "Stop the server using below command\n    a. #service gluu-server-3.0.0 stop  use tar command to take a back up\n    b. # tar cvf gluu244-backup.tar /opt/gluu-server-3.0.0/",
            "title": "Tarball Method"
        },
        {
            "location": "/operation/find-gluu-version/",
            "text": "Here is how you can check which version of the Gluu Server you are using:\n#\n\n\n\n\nSSH into VM\n\n\n\n\nLog into Gluu-Server container. \n\n\na. Using below command\n\n\n# service gluu-server-3.0.0 login\n\n\n\n\n\n\nTo find oxTrust version\n\n\n# cat /opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-8734901518752897483.dir/webapp/META-INF/MANIFEST.MF\n\n\n\n\n\n\noxAuth version can be found using below command \n\n\n# cat /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-6134601069165491713.dir/webapp/META-INF/MANIFEST.MF\n\n\n\n\n\n\nAnother simplest way to find out the Gluu Server installed or upgraded \nversion can be found on the top the oxTrust Admin UI.\n\n\n\n\nVersions of other apps like idp, asimba and oxauth-rp,\ncan be found or viewed in the same directory. These app can be \nidentified with the \nport number\n after the localhost.",
            "title": "Find your Gluu Version"
        },
        {
            "location": "/operation/find-gluu-version/#here-is-how-you-can-check-which-version-of-the-gluu-server-you-are-using",
            "text": "SSH into VM   Log into Gluu-Server container.   a. Using below command  # service gluu-server-3.0.0 login    To find oxTrust version  # cat /opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-8734901518752897483.dir/webapp/META-INF/MANIFEST.MF    oxAuth version can be found using below command   # cat /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-6134601069165491713.dir/webapp/META-INF/MANIFEST.MF    Another simplest way to find out the Gluu Server installed or upgraded \nversion can be found on the top the oxTrust Admin UI.   Versions of other apps like idp, asimba and oxauth-rp,\ncan be found or viewed in the same directory. These app can be \nidentified with the  port number  after the localhost.",
            "title": "Here is how you can check which version of the Gluu Server you are using:"
        },
        {
            "location": "/operation/ports/",
            "text": "Different Ports used for the applications in Gluu\n#\n\n\nInternally Gluu server uses different ports for the application \nincorporated or installed during installation.\n\n\n\n\n\n\n\n\nPort\n\n\nApplication\n\n\n\n\n\n\n\n\n\n\n8081\n\n\nOxAuth Server\n\n\n\n\n\n\n8082\n\n\nOxTrust Server\n\n\n\n\n\n\n8084\n\n\nAsimba\n\n\n\n\n\n\n8085\n\n\nOxAuth-RP\n\n\n\n\n\n\n8086\n\n\nIDP",
            "title": "Ports"
        },
        {
            "location": "/operation/ports/#different-ports-used-for-the-applications-in-gluu",
            "text": "Internally Gluu server uses different ports for the application \nincorporated or installed during installation.     Port  Application      8081  OxAuth Server    8082  OxTrust Server    8084  Asimba    8085  OxAuth-RP    8086  IDP",
            "title": "Different Ports used for the applications in Gluu"
        },
        {
            "location": "/operation/logout/",
            "text": "Logout From Gluu Server\n#\n\n\nGluu Server offers single-logout(SLO) service for OpenID Connect\n\n\nOpenID Connect SLO\n#\n\n\nGluu Server uses OpenID Connect to end session for logout. \nUsually a logout link is provided to the connected SP and the session \nis killed inside the IdP. When using the OpenId Connect Logout, it is \nrecommened to test the \nfront channel logout\n. In the \nfront channel \nlogout\n the browser receives a page with the list of application \nlogout urls each within an iframe. This causes the browser to call each \napplicaiton logout individually and finally calling the OpenID Connect \nend-session endpoint via \njavascript\n. \nPlease see the \nOpenID Connect Frontchannel Logout Specifications\n for more informaiton.\n\n\nSAML Logout\n#\n\n\nAlthough there is a SLO available for Shibboleth, \nit is not supported in Gluu Server because of its instabilities. \nPlease take a look at \nthis page\n for more information.\n\n\n\n\nThe logout URI for SAML SP is \nhttps://<hostname of Gluu Server>/idp/logout.jsp\n Calling this URL within Gluu Server kills the session inside Gluu Server.\n\n\n\n\nAuthentication Script\n#\n\n\nIt is possible to use Custom Authentication Script to call individual \nlogout methods for both SAML and OpenID Connect and log out of the \ndesired SP/SPs when the user logs out of the Gluu Server. \nPlease see the \nCustom Script Guide\n to start writing your own custom script.",
            "title": "Single Logout (SLO)"
        },
        {
            "location": "/operation/logout/#logout-from-gluu-server",
            "text": "Gluu Server offers single-logout(SLO) service for OpenID Connect",
            "title": "Logout From Gluu Server"
        },
        {
            "location": "/operation/logout/#openid-connect-slo",
            "text": "Gluu Server uses OpenID Connect to end session for logout. \nUsually a logout link is provided to the connected SP and the session \nis killed inside the IdP. When using the OpenId Connect Logout, it is \nrecommened to test the  front channel logout . In the  front channel \nlogout  the browser receives a page with the list of application \nlogout urls each within an iframe. This causes the browser to call each \napplicaiton logout individually and finally calling the OpenID Connect \nend-session endpoint via  javascript . \nPlease see the  OpenID Connect Frontchannel Logout Specifications  for more informaiton.",
            "title": "OpenID Connect SLO"
        },
        {
            "location": "/operation/logout/#saml-logout",
            "text": "Although there is a SLO available for Shibboleth, \nit is not supported in Gluu Server because of its instabilities. \nPlease take a look at  this page  for more information.   The logout URI for SAML SP is  https://<hostname of Gluu Server>/idp/logout.jsp  Calling this URL within Gluu Server kills the session inside Gluu Server.",
            "title": "SAML Logout"
        },
        {
            "location": "/operation/logout/#authentication-script",
            "text": "It is possible to use Custom Authentication Script to call individual \nlogout methods for both SAML and OpenID Connect and log out of the \ndesired SP/SPs when the user logs out of the Gluu Server. \nPlease see the  Custom Script Guide  to start writing your own custom script.",
            "title": "Authentication Script"
        },
        {
            "location": "/operation/logs/",
            "text": "Gluu Server Logs\n#\n\n\nWhen it comes to troubleshooting issues in the Gluu Server-from service \nhiccups to outages-logs are the best place to start. \n\n\nThe Gluu Server administrator can investigate logs from the oxTrust \n\nView Logs\n feature or directly \nwith SSH access to the Gluu-Server container. \n\n\nView Log File\n#\n\n\nThe log files configured in the earlier section can be viewed using the\n\nView log file\n feature. This feature can be accessed through the\nconfiguration menu using \nConfiguration --> View Log File\n.\n\n\n\n\nThe \nDisplay last lines count\n field contains the lines that will be\ndisplayed in the Web GUI. If the field contains the value \n400\n, then\nthe Gluu Server will show the last 400 lines of the log in the GUI. The\nscreenshot below shows an according example.\n\n\n\n\nLog Levels\n#\n\n\nLogging Levels configuration through OxTrust UI\n\n\nThese logging levels can also be set in oxTrust UI.\n\n\n\n\nLogin to oxTrust UI as \nadmin\n or with an administrator account.\n\n\nNavigate to Configuration > JSON Configuration > OxTrust Configuration Tab.\n\n\n\nScroll to the very bottom of the page.\n\n\nClick on the \nlogging level\n and select the levels from the drop down.\n\n\n\nDefault value will be set to \nDefault\n, you can change the level as per your requirement for extensive\ntroubleshooting.\n\n\nClick on \nSave Configuration\n to save the configuration.\n\n\n\n\n\nChanging Log Levels using log4j2.xml\n\n\nGluu Server logs use the log4j2 logging levels which can be changed in the \nlog4j2.xml\n file.\n\nlog4j2.xml\n can be found in below path\n\n\n/opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-8516765662711672787.dir\n\n\nAnd also the same file can be found in all incorporated Gluu apps, \ni.e oxauth, asimba, idp, oxauth-rp and identity\n\n\nThe available logging levels are :\n\n\n\n\n\n\n\n\nLevel\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nALL\n\n\nAll log levels are documented\n\n\n\n\n\n\nDEBUG\n\n\nDetailed events useful to debug application\n\n\n\n\n\n\nERROR\n\n\nErrors are documented\n\n\n\n\n\n\nINFO\n\n\nLogs informational messages as the application runs\n\n\n\n\n\n\nOFF\n\n\nNo logs are recorded\n\n\n\n\n\n\nTRACE\n\n\nLogs detailed events; more than DEBUG\n\n\n\n\n\n\n\n\nThe following files define the log levels in Gluu Server. Please edit the \nfile with the levels given above and restart the \njetty\n server. \nThe following section is taken from a live Gluu Server \nlog4j.xml\n file \nshowing different log levels for different logs. The changes made this section will reflect in the logs.\n\n\n<category name=\"org.xdi.oxauth\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### Gluu ################# ->\n    <category name=\"org.gluu\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### opnexdi ################# ->\n    <category name=\"org.openxdi\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### oxTrust ################# ->\n    <category name=\"org.gluu.oxtrust\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### Embedded JBoss AS ################# ->\n    <category name=\"org.jboss\">\n        <priority value=\"ERROR\" />\n    </category>\n    <category name=\"com.arjuna\">\n        <priority value=\"ERROR\" />\n    </category>\n\n\n\n\n\nPlease restart the specific service after any change in log levels to \nallow the changes to take effect. Use the following command to restart tomcat:\n\n\n\n\nNote\n\n\nIt is recommended to use OxTrust UI to change the logging levels.\n\n\n\n\nSetup Logs\n#\n\n\nThe setup logs are stored inside the \n/install/community-edition-setup/\n folder. There are two logs available, one detailing the setup process and the other documenting the errors:\n\n\n\n\nsetup.log\n\n\nsetup_error.log\n\n\n\n\nCore logs\n#\n\n\nThe available log files for Gluu Server Community Edition inside the \nchroot\n \nenvironment are listed below.\n\n\n\n\n\n\n\n\nLog File\n\n\nComponent\n\n\n\n\n\n\n\n\n\n\n/install/community-edition-setup\n/\nsetup.log\n\n\nSetup detail log\n\n\n\n\n\n\n/install/community-edition-setup_/\nsetup_error.log\n\n\nSetup error log\n\n\n\n\n\n\n/opt/gluu/jetty/idp/logs\n/\nstart.log\n\n\nLogs time-stamp when IDP starts\n\n\n\n\n\n\n/opt/shibboleth-idp/logs\n/\nidp-warn.log\n/opt/shibboleth-idp/logs\n/\nidp-process.log\n\n\nIDP diagonostic log \nRead more..\n\n\n\n\n\n\n/opt/shibboleth-idp/logs\n/\nidp-audit.log\n\n\nGeneral audit log \nRead more..\n\n\n\n\n\n\n/opt/shibboleth-idp/logs\n/\nidp-consent-audit.log\n\n\nConsent audit log \nRead more..\n\n\n\n\n\n\n/opt/gluu/node/passport/node_modules/redis-parser\n/\nisolate-0x3615b50-v8.log\n/opt/gluu/node/passport/node_modules/redis-parser\n/\nisolate-0x28e7b50-v8.log\n\n\nPassport log\n\n\n\n\n\n\n/opt/gluu/jetty/asimba/logs\n/\nstart.log\n\n\nLogs time-stamp when ASIMBA starts\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth/logs\n/\nstart.log\n\n\nLogs time-stamp when oxAuth starts\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth/logs\n/\noxauth_audit.log\n\n\nGeneral audit log\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth/logs\n/\noxauth_persistence.log\n\n\nLogs connection with LDAP\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth/logs\n/\noxauth_script.log\n\n\nLogs for oxAuth custom script execution\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth/logs\n/\noxauth.log\n\n\nGeneral log for oxAuth service\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth-rp/logs\n/\nstart.log\n\n\nLogs time-stamp when oxAuthRP starts\n\n\n\n\n\n\n/opt/gluu/jetty/oxauth-rp/logs\n/\noxauth-rp.log\n\n\nGeneral oxAuthRP log\n\n\n\n\n\n\n/opt/gluu/jetty/identity/logs\n/\nstart.log\n\n\nLogs time-stamp when oxTrust starts\n\n\n\n\n\n\n/opt/gluu/jetty/identity/logs\n/\noxtrust_script.log\n\n\n\n\n\n\n\n\n/opt/gluu/jetty/identity/logs\n/\noxtrust.log\n\n\nLogs for oxTrust custom script execution\n\n\n\n\n\n\n/opt/gluu/jetty/identity/logs\n/\noxtrust_persistence.log\n\n\nLogs connection with LDAP\n\n\n\n\n\n\n/opt/gluu/jetty/identity/logs\n/\noxtrust_cache_refresh.log\n\n\nLogs events relating to cache refresh\n\n\n\n\n\n\n/var/log/openldap\n/\nldap.log\n\n\nOpenLDAP Log, contains everything related to OpenLDAP\n\n\n\n\n\n\n\n\noxAuth logs\n#\n\n\nThe oxauth logs contain the information about oxAuth authentication process and errors. \nThe key oxauth logs are\n\n\n\n\n\n\noxauth.log\n under \n/opt/gluu/jetty/oxauth/logs/\n\nThis log is gathering most of the authentication related information. \nGenerally this is the first log to review for any authentication-related troubleshooting, \nlike authentication failure or missing clients etc. Here's an example showing a \nsuccessful user authentication:\n\n\n2016-07-16 15:43:28,232 INFO  [org.xdi.oxauth.auth.Authenticator] Authentication success for Client: '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,232 TRACE [org.xdi.oxauth.auth.Authenticator] Authentication successfully for '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,238 DEBUG [xdi.oxauth.token.ws.rs.TokenRestWebServiceImpl] Attempting to request access token: grantType = authorization_code, code = 61ba3c0d-42c4-4f1f-8420-fd5f6707f1b1, redirectUri = https://test.gluu.org/identity/authentication/authcode, username = null, refreshToken = null, clientId = null, ExtraParams = {grant_type=[Ljava.lang.String;@1add2a62, redirect_uri=[Ljava.lang.String;@2e0995b5, code=[Ljava.lang.String;@7743b5af}, isSecure = true, codeVerifier = null\n2016-07-16 15:43:28,249 DEBUG [org.xdi.oxauth.service.UserService] Getting user information from LDAP: userId = zico\n\n\n\n\n\n\n\noxauth_script.log\n under \n/opt/gluu/jetty/oxauth/logs/\n\nMost of the custom script's initialization and few more information are \nloaded here in this script. In the sample log below we can see 'Super Gluu' 2FA \nhas been loaded in the Gluu Server:\n\n\n2016-07-16 19:06:32,705 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialization\n2016-07-16 19:06:32,713 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialize notification services\n2016-07-16 19:06:32,750 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialized successfully. oneStep: 'False', twoStep: 'True', pushNotifications: 'False'\n\n\n\n\n\n\n\noxTrust logs\n#\n\n\n\n\n\n\noxtrust.log\n under \n/opt/gluu/jetty/identity/logs\n\nThis log gather logs related to Gluu Server Admin panel (called oxTrust). \nFor example, what is the clientID of an oxTrust session? Or, what scopes are \nbeing used, etc. In the example below, you can see an admin user has successfuly \nlogged into the \ntest.gluu.org\n Gluu Server admin panel, has the proper authorizationCode, \na redirectURI, and the user's role:\n\n\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator] authorizationCode : 555a7586-6ca2-4b39-ab39-2ac78ec81524\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator]  scopes : user_name email openid profile\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] clientID : @!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] getting accessToken\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] tokenURL : https://test.gluu.org/oxauth/seam/resource/restv1/oxauth/token\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] Sending request to token endpoint\n2016-07-16 16:41:55,692 INFO  [org.gluu.oxtrust.action.Authenticator] redirectURI : https://test.gluu.org/identity/authentication/authcode\n2016-07-16 16:41:55,919 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse : org.xdi.oxauth.client.TokenResponse@1914b8d\n\n\n\n\n\n\n\noxtrust_script.log\n under \n/opt/gluu/jetty/identity/logs\n \n\nThis log collects information on oxTrust related scripts and their operations. \nFor example, if an organization uses a custom attribute which populates values \nfor every user, then the Gluu Server Administrator needs to use a custom script \nfor their 'Cache Refresh' process. This log will receive information when the custom script runs.\n\n\n\n\n\n\noxtrust_cache_refresh.log\n under \n/opt/gluu/jetty/identity/logs\n  \n\nCache Refresh related information such as status, primary failure, etc., \nis available in this log. In the sample snippet below we see the total number of \nusers that have been synced into the Gluu Server, number of failures, and total number of updated users. \n\n\n2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries\n\n\n\n\n\n\n\nSystem logs\n#\n\n\n\n\nFor Ubuntu: \n/var/log/syslog\n\n\nFor RPM based systems: \n/var/log/messages\n\n\n\n\nWeb Server logs\n#\n\n\n\n\nFor Debian: \n/var/log/apache2/\n\n\nFor RPM based systems: \n/var/log/httpd/\n\n\n\n\nSystem Logs\n#\n\n\nSometimes it worthy to check system logs like \n/var/log/messages\n. These logs contain global system messages.\n\n\nWeb Server logs\n#\n\n\nApache httpd / apache2 logs are available in \n/var/log/httpd\n or \n/var/log/apache2\n for Ubuntu.\n\n\n\n\n\n\naccess_log\n: This log contains information about requests coming into the Gluu Server, \nsuccess status or requests, execution time for any request etc.     \n\n\n\n\n\n\nerror_log\n: This log shows error messages if the web server encounter any issue while \nprocessing incoming requests.    \n\n\n\n\n\n\nother_vhosts_access.log\n: This log is specific to the Gluu Server setup and those links \nwhich are being requested by a user from a web browser. An example below:     \n\n\ntest.gluu.org:443 192.168.201.184 - - [17/Jul/2016:18:25:21 +0000] \"GET /index.html HTTP/1.1\" 200 13239 \"-\" \"Java/1.7.0_95\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET / HTTP/1.1\" 302 2185 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/ HTTP/1.1\" 200 583 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/home.htm HTTP/1.1\" 302 272 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/login?cid=4 HTTP/1.1\" 302 474 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /oxauth/authorize?scope=openid+profile+email+user_name&response_type=code+id_token&nonce=nonce&redirect_uri=https%3A%2F%2Ftest.gluu.org%2Fidentity%2Fauthentication%2Fauthcode&client_id=%40%21EFCB.890F.FB6C.2603%210001%210A49.F454%210008%21F047.7275 HTTP/1.1\" 302 450 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\n\n\n\n\n\n\n\nThere are few other logs like \nssl_access_log\n , \nssl_error_log\n , and \nssl_request_log\n \nwhich are collecting information on port 443 specifically.      \n\n\n\n\n\n\nRemember the initial \nGET\n request will hit the Apache server first, and \nthen be proxied via the AJP port 8082 to . If you see traffic on the web server, \nbut not on Jetty, this is a good place to check to see if something is wrong. \nFor example, you might want to check if the firewall is blocking port 8082 \nif you see somthing like this:\n\n\n    [Thu Jul 14 23:49:19 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:19 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)",
            "title": "Log Management"
        },
        {
            "location": "/operation/logs/#gluu-server-logs",
            "text": "When it comes to troubleshooting issues in the Gluu Server-from service \nhiccups to outages-logs are the best place to start.   The Gluu Server administrator can investigate logs from the oxTrust  View Logs  feature or directly \nwith SSH access to the Gluu-Server container.",
            "title": "Gluu Server Logs"
        },
        {
            "location": "/operation/logs/#view-log-file",
            "text": "The log files configured in the earlier section can be viewed using the View log file  feature. This feature can be accessed through the\nconfiguration menu using  Configuration --> View Log File .   The  Display last lines count  field contains the lines that will be\ndisplayed in the Web GUI. If the field contains the value  400 , then\nthe Gluu Server will show the last 400 lines of the log in the GUI. The\nscreenshot below shows an according example.",
            "title": "View Log File"
        },
        {
            "location": "/operation/logs/#log-levels",
            "text": "Logging Levels configuration through OxTrust UI  These logging levels can also be set in oxTrust UI.   Login to oxTrust UI as  admin  or with an administrator account.  Navigate to Configuration > JSON Configuration > OxTrust Configuration Tab.  Scroll to the very bottom of the page.  Click on the  logging level  and select the levels from the drop down.  Default value will be set to  Default , you can change the level as per your requirement for extensive\ntroubleshooting.  Click on  Save Configuration  to save the configuration.   Changing Log Levels using log4j2.xml  Gluu Server logs use the log4j2 logging levels which can be changed in the  log4j2.xml  file. log4j2.xml  can be found in below path  /opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-8516765662711672787.dir  And also the same file can be found in all incorporated Gluu apps, \ni.e oxauth, asimba, idp, oxauth-rp and identity  The available logging levels are :     Level  Description      ALL  All log levels are documented    DEBUG  Detailed events useful to debug application    ERROR  Errors are documented    INFO  Logs informational messages as the application runs    OFF  No logs are recorded    TRACE  Logs detailed events; more than DEBUG     The following files define the log levels in Gluu Server. Please edit the \nfile with the levels given above and restart the  jetty  server. \nThe following section is taken from a live Gluu Server  log4j.xml  file \nshowing different log levels for different logs. The changes made this section will reflect in the logs.  <category name=\"org.xdi.oxauth\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### Gluu ################# ->\n    <category name=\"org.gluu\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### opnexdi ################# ->\n    <category name=\"org.openxdi\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### oxTrust ################# ->\n    <category name=\"org.gluu.oxtrust\">\n        <priority value=\"TRACE\" />\n    </category>\n\n    <!- ############### Embedded JBoss AS ################# ->\n    <category name=\"org.jboss\">\n        <priority value=\"ERROR\" />\n    </category>\n    <category name=\"com.arjuna\">\n        <priority value=\"ERROR\" />\n    </category>  Please restart the specific service after any change in log levels to \nallow the changes to take effect. Use the following command to restart tomcat:   Note  It is recommended to use OxTrust UI to change the logging levels.",
            "title": "Log Levels"
        },
        {
            "location": "/operation/logs/#setup-logs",
            "text": "The setup logs are stored inside the  /install/community-edition-setup/  folder. There are two logs available, one detailing the setup process and the other documenting the errors:   setup.log  setup_error.log",
            "title": "Setup Logs"
        },
        {
            "location": "/operation/logs/#core-logs",
            "text": "The available log files for Gluu Server Community Edition inside the  chroot  \nenvironment are listed below.     Log File  Component      /install/community-edition-setup / setup.log  Setup detail log    /install/community-edition-setup_/ setup_error.log  Setup error log    /opt/gluu/jetty/idp/logs / start.log  Logs time-stamp when IDP starts    /opt/shibboleth-idp/logs / idp-warn.log /opt/shibboleth-idp/logs / idp-process.log  IDP diagonostic log  Read more..    /opt/shibboleth-idp/logs / idp-audit.log  General audit log  Read more..    /opt/shibboleth-idp/logs / idp-consent-audit.log  Consent audit log  Read more..    /opt/gluu/node/passport/node_modules/redis-parser / isolate-0x3615b50-v8.log /opt/gluu/node/passport/node_modules/redis-parser / isolate-0x28e7b50-v8.log  Passport log    /opt/gluu/jetty/asimba/logs / start.log  Logs time-stamp when ASIMBA starts    /opt/gluu/jetty/oxauth/logs / start.log  Logs time-stamp when oxAuth starts    /opt/gluu/jetty/oxauth/logs / oxauth_audit.log  General audit log    /opt/gluu/jetty/oxauth/logs / oxauth_persistence.log  Logs connection with LDAP    /opt/gluu/jetty/oxauth/logs / oxauth_script.log  Logs for oxAuth custom script execution    /opt/gluu/jetty/oxauth/logs / oxauth.log  General log for oxAuth service    /opt/gluu/jetty/oxauth-rp/logs / start.log  Logs time-stamp when oxAuthRP starts    /opt/gluu/jetty/oxauth-rp/logs / oxauth-rp.log  General oxAuthRP log    /opt/gluu/jetty/identity/logs / start.log  Logs time-stamp when oxTrust starts    /opt/gluu/jetty/identity/logs / oxtrust_script.log     /opt/gluu/jetty/identity/logs / oxtrust.log  Logs for oxTrust custom script execution    /opt/gluu/jetty/identity/logs / oxtrust_persistence.log  Logs connection with LDAP    /opt/gluu/jetty/identity/logs / oxtrust_cache_refresh.log  Logs events relating to cache refresh    /var/log/openldap / ldap.log  OpenLDAP Log, contains everything related to OpenLDAP",
            "title": "Core logs"
        },
        {
            "location": "/operation/logs/#oxauth-logs",
            "text": "The oxauth logs contain the information about oxAuth authentication process and errors. \nThe key oxauth logs are    oxauth.log  under  /opt/gluu/jetty/oxauth/logs/ \nThis log is gathering most of the authentication related information. \nGenerally this is the first log to review for any authentication-related troubleshooting, \nlike authentication failure or missing clients etc. Here's an example showing a \nsuccessful user authentication:  2016-07-16 15:43:28,232 INFO  [org.xdi.oxauth.auth.Authenticator] Authentication success for Client: '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,232 TRACE [org.xdi.oxauth.auth.Authenticator] Authentication successfully for '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,238 DEBUG [xdi.oxauth.token.ws.rs.TokenRestWebServiceImpl] Attempting to request access token: grantType = authorization_code, code = 61ba3c0d-42c4-4f1f-8420-fd5f6707f1b1, redirectUri = https://test.gluu.org/identity/authentication/authcode, username = null, refreshToken = null, clientId = null, ExtraParams = {grant_type=[Ljava.lang.String;@1add2a62, redirect_uri=[Ljava.lang.String;@2e0995b5, code=[Ljava.lang.String;@7743b5af}, isSecure = true, codeVerifier = null\n2016-07-16 15:43:28,249 DEBUG [org.xdi.oxauth.service.UserService] Getting user information from LDAP: userId = zico    oxauth_script.log  under  /opt/gluu/jetty/oxauth/logs/ \nMost of the custom script's initialization and few more information are \nloaded here in this script. In the sample log below we can see 'Super Gluu' 2FA \nhas been loaded in the Gluu Server:  2016-07-16 19:06:32,705 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialization\n2016-07-16 19:06:32,713 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialize notification services\n2016-07-16 19:06:32,750 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialized successfully. oneStep: 'False', twoStep: 'True', pushNotifications: 'False'",
            "title": "oxAuth logs"
        },
        {
            "location": "/operation/logs/#oxtrust-logs",
            "text": "oxtrust.log  under  /opt/gluu/jetty/identity/logs \nThis log gather logs related to Gluu Server Admin panel (called oxTrust). \nFor example, what is the clientID of an oxTrust session? Or, what scopes are \nbeing used, etc. In the example below, you can see an admin user has successfuly \nlogged into the  test.gluu.org  Gluu Server admin panel, has the proper authorizationCode, \na redirectURI, and the user's role:  2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator] authorizationCode : 555a7586-6ca2-4b39-ab39-2ac78ec81524\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator]  scopes : user_name email openid profile\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] clientID : @!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] getting accessToken\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] tokenURL : https://test.gluu.org/oxauth/seam/resource/restv1/oxauth/token\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] Sending request to token endpoint\n2016-07-16 16:41:55,692 INFO  [org.gluu.oxtrust.action.Authenticator] redirectURI : https://test.gluu.org/identity/authentication/authcode\n2016-07-16 16:41:55,919 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse : org.xdi.oxauth.client.TokenResponse@1914b8d    oxtrust_script.log  under  /opt/gluu/jetty/identity/logs   \nThis log collects information on oxTrust related scripts and their operations. \nFor example, if an organization uses a custom attribute which populates values \nfor every user, then the Gluu Server Administrator needs to use a custom script \nfor their 'Cache Refresh' process. This log will receive information when the custom script runs.    oxtrust_cache_refresh.log  under  /opt/gluu/jetty/identity/logs    \nCache Refresh related information such as status, primary failure, etc., \nis available in this log. In the sample snippet below we see the total number of \nusers that have been synced into the Gluu Server, number of failures, and total number of updated users.   2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries",
            "title": "oxTrust logs"
        },
        {
            "location": "/operation/logs/#system-logs",
            "text": "For Ubuntu:  /var/log/syslog  For RPM based systems:  /var/log/messages",
            "title": "System logs"
        },
        {
            "location": "/operation/logs/#web-server-logs",
            "text": "For Debian:  /var/log/apache2/  For RPM based systems:  /var/log/httpd/",
            "title": "Web Server logs"
        },
        {
            "location": "/operation/logs/#system-logs_1",
            "text": "Sometimes it worthy to check system logs like  /var/log/messages . These logs contain global system messages.",
            "title": "System Logs"
        },
        {
            "location": "/operation/logs/#web-server-logs_1",
            "text": "Apache httpd / apache2 logs are available in  /var/log/httpd  or  /var/log/apache2  for Ubuntu.    access_log : This log contains information about requests coming into the Gluu Server, \nsuccess status or requests, execution time for any request etc.         error_log : This log shows error messages if the web server encounter any issue while \nprocessing incoming requests.        other_vhosts_access.log : This log is specific to the Gluu Server setup and those links \nwhich are being requested by a user from a web browser. An example below:       test.gluu.org:443 192.168.201.184 - - [17/Jul/2016:18:25:21 +0000] \"GET /index.html HTTP/1.1\" 200 13239 \"-\" \"Java/1.7.0_95\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET / HTTP/1.1\" 302 2185 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/ HTTP/1.1\" 200 583 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/home.htm HTTP/1.1\" 302 272 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/login?cid=4 HTTP/1.1\" 302 474 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /oxauth/authorize?scope=openid+profile+email+user_name&response_type=code+id_token&nonce=nonce&redirect_uri=https%3A%2F%2Ftest.gluu.org%2Fidentity%2Fauthentication%2Fauthcode&client_id=%40%21EFCB.890F.FB6C.2603%210001%210A49.F454%210008%21F047.7275 HTTP/1.1\" 302 450 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"    There are few other logs like  ssl_access_log  ,  ssl_error_log  , and  ssl_request_log  \nwhich are collecting information on port 443 specifically.          Remember the initial  GET  request will hit the Apache server first, and \nthen be proxied via the AJP port 8082 to . If you see traffic on the web server, \nbut not on Jetty, this is a good place to check to see if something is wrong. \nFor example, you might want to check if the firewall is blocking port 8082 \nif you see somthing like this:      [Thu Jul 14 23:49:19 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:19 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)",
            "title": "Web Server logs"
        },
        {
            "location": "/operation/faq/",
            "text": "FAQ\n#\n\n\nGeneral FAQ\n#\n\n\nLogs\n#\n\n\nWhen it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--your \nserver logs\n are the best place to gather relevant information.\n\n\nHow to change the hostname/IP address/listening port of Gluu Server\n#\n\n\nIt is not recommended to change the hostname or IP address or the listening port of any installed Gluu Server instance. The hostname and the IP address is used in many settings stored in LDAP configuration entries, Apache/Jetty configuration and into the custom authentication script. It is strongly recommended to use a fresh install in a new VM. \n\n\n\n\nNote\n\n\nPlease use static IP address with reverse proxy or load balancer or simple port forwarding.\n\n\n\n\nHow to set the port to something other than 443\n#\n\n\nPorts other than 443 are not supported as the port is used by Apache Web Server. In theory, the change must reflect in the SAML and OpenID Connect metadata and still there might be errors.\n\n\n\n\nNote\n\n\nPlease use a virtual ethernet interface and a different IP address on your server\n\n\n\n\nHow to customize IDP to ask for Email instead of username\n#\n\n\nIn oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to \nuid\n. Set those va    lues to \nmail\n and now your Gluu Server will expect email as the identifier instead of username.\n\n\n\n\nNow you will want to update your IDP login page to display \nEmail Address\n as the requested identifier. In order to do that you need to modify the \nlogin.xhtm    l\n file, which is located in \n/opt/tomcat/webapps/oxauth/\n. Insert \nEmail Address\n as the value for \noutputLabel\n; this snippet is under the \ndialog\n class. S    ee the screenshot below.\n\n\n\n\nHow to add additional roles to oxTrust and change permissions for existing ones\n#\n\n\nThe additional role requires the implementation of dynamic rules in Jboss SEAM and then uitlize them in oxTrust as the available \nmanager\n and \nuser\n roles are defined within the \nsecurit.drl\n hard-coded into oxTrust. The file checks for the \nmaanger\n group membership and adds the role to the web context. This is currently out of the scope of support. \n\n\n\n\nWarning\n\n\noxTrust is a tool for administrators and it must nto be used as a user facing application.\n\n\n\n\nTroubleshooting Guide\n#\n\n\nAdd admin for Gluu server\n#\n\n\nPlease follow these steps to restore your Gluu admin account (you will\nprobably need to substitute actual port, bind names and hostnames with\nones used by your installation):\n\n\n1) Login into Gluu's chroot environment with the command below:\n\n\n# service gluu-server login\n\n\n\n\n2) Run this command:\n\n\n#/opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu gluuGroupType=gluuManagerGroup 1.1\n\n\n\n\nand remember the displayed dn of the Gluu Manager Group for future use.\n\n\n3) Run this command:\n\n\n# /opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu ou=people 1.1\n\n\n\n\nand remember the displayed dn of the People ou for future use.\n\n\n4) While staying in the chrooted environment, create the file\n\n~/add_user.ldif\n using your favorite text editor, and copy the\nfollowing lines to it:\n\n\ndn: inum=tempadmin,ou=people,o=@!F9CC.D762.4778.1032!0001!2C72.BB87,o=gluu\nchangetype: add\nuid: tempadmin\nobjectClass: gluuPerson\nobjectClass: top\ngivenName: tempadmin\nsn: tempadmin\ninum: tempadmin\ngluuStatus: active\nuserPassword: 1q2w3e\n\n\n\n\nPlease note the string's segment marked with bold: you will have to\nsubstitute it with dn of your own People ou which you've acquired in\nstep 3).\n\n\n5) Run this command:\n\n\n# /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_user.ldif\n\n\n\n\nThis will create new user tempadmin with attributes provided via file\ncreated in step 4).\n\n\n6) Now create file \nadd_2_group.ldif\n in your home (\"~/\") directory and\ncopy the following lines to it:\n\n\ndn: inum=@!F9CC.D762.4778.1032!0001!2C72.BB87!0003!60B7,ou=groups,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\nchangetype: modify\nadd: member\nmember: inum=tempadmin,ou=people,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\n\n\n\n\nAgain, please note the strings' segment marked with bold: you will have\nto substitute contents of the \"dn:\" string with dn of your own Gluu\nManager Group which you've acquired in step 2), and for \"member:\" string\nyou will have to use the dn of tempadmin user (the one you already\nspecified in the 1st line of the file in step 4).\n\n\n7) Run this command:\n\n\n# /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_2_group.ldif\n\n\n\n\nThis will add tempadmin user to the IdP managers group and you can then\nlogin and assign another user to act as admin.\n\n\nConnectivity Issues?\n#\n\n\nDNS names not resolving!\n#\n\n\nIt is possible that even after configuring everything there is a \nDNS\n resolve error in Gluu Server.\nThe reason is the \nDNS\n used inside the chroot container; the \ndns\n used by the container is the Google DNS servers \nand the \nDNS\n for the host OS is not used. Therefore to fix this issue:\n\n\n\n\nChange the DNS inside the container by editing the \n/etc/resolv.conf\n file and adding the DNS used by your organization\n\n\n\n\nForgot the admin password!\n#\n\n\nGluu Server stores the admin password in the file \n/install/community-edition-setup/setup.properties.last\n under the\nproperty \nldapPass\n. Retrieve the data using the following command:\n\n\n# grep ldapPass= /install/community-edition-setup/*.last\n\n\n\n\n\n\nWarning\n\n\nIt is strongly recommended to remove the file from any production environment or encrypt the file\n\n\n\n\nRevert Authentication Method\n#\n\n\nIt is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method.\n\n\n\n\nRun the following command to collect the \ninum\n for the Gluu Server installation.\n\n\n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory \nmanager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" \noxAuthenticationMode\n\n\n\n\nCreate a \nLDIF\n file with the contents below:\n\n\n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\n\nAs an example, we shall call this file \nchangeAuth.ldif\n.\n\n\nNote:\n Replace the \ninum\n from the example above with the \ninum\n of the Gluu Server from the \nldapsearch\n command.\n\n\n\n\nReplace the the authentication mode using \nldapmodify\n command.\n\n\n\n\n`/opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/changeAuth.ldif\n\n\nNo admin access after Cache Refresh?\n#\n\n\nAdd the password for your admin account to \n~/.pw\n and then use the commands below to add yourself as an admin.\n\n\n# set this to your actual user name\nexport newgluuadmin='myusername'\n\n# this is the file that will hold the info to be imported\nexport ldiffile='addManagers.ldif'\n\n# run this and verify that the output is for your account\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.\n 3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nuid: myusername\ngivenName: John\nsn: Doe\ncn: John Doe\n\n\n\n\nNow you can run these commands to make the file above:\n\n\nhead -n1 /opt/opendj/ldif/groups.ldif > $ldiffile\necho 'changetype: modify' >> $ldiffile\necho 'add: member' >> $ldiffile\necho \"member: $(/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn |grep -A1 dn |cut -d ' ' -f 2- | sed 'N;s/\\n//')\" >> $ldiffile\n\n\n\n\nThe resulting ldif will look like this:\n\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0003!60B7,ou=groups,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nchangetype: modify\nadd: member\nmember: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\n\n\n\n\nOnce the ldif looks right, run this to grant your account admin rights in Gluu:\n\n\n/opt/opendj/bin/ldapmodify -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -f addManagers.ldif\n\n\n\n\nLog into the web interface and pick up where you left off :)",
            "title": "FAQ & Troubleshooting"
        },
        {
            "location": "/operation/faq/#faq",
            "text": "",
            "title": "FAQ"
        },
        {
            "location": "/operation/faq/#general-faq",
            "text": "",
            "title": "General FAQ"
        },
        {
            "location": "/operation/faq/#logs",
            "text": "When it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--your  server logs  are the best place to gather relevant information.",
            "title": "Logs"
        },
        {
            "location": "/operation/faq/#how-to-change-the-hostnameip-addresslistening-port-of-gluu-server",
            "text": "It is not recommended to change the hostname or IP address or the listening port of any installed Gluu Server instance. The hostname and the IP address is used in many settings stored in LDAP configuration entries, Apache/Jetty configuration and into the custom authentication script. It is strongly recommended to use a fresh install in a new VM.    Note  Please use static IP address with reverse proxy or load balancer or simple port forwarding.",
            "title": "How to change the hostname/IP address/listening port of Gluu Server"
        },
        {
            "location": "/operation/faq/#how-to-set-the-port-to-something-other-than-443",
            "text": "Ports other than 443 are not supported as the port is used by Apache Web Server. In theory, the change must reflect in the SAML and OpenID Connect metadata and still there might be errors.   Note  Please use a virtual ethernet interface and a different IP address on your server",
            "title": "How to set the port to something other than 443"
        },
        {
            "location": "/operation/faq/#how-to-customize-idp-to-ask-for-email-instead-of-username",
            "text": "In oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to  uid . Set those va    lues to  mail  and now your Gluu Server will expect email as the identifier instead of username.   Now you will want to update your IDP login page to display  Email Address  as the requested identifier. In order to do that you need to modify the  login.xhtm    l  file, which is located in  /opt/tomcat/webapps/oxauth/ . Insert  Email Address  as the value for  outputLabel ; this snippet is under the  dialog  class. S    ee the screenshot below.",
            "title": "How to customize IDP to ask for Email instead of username"
        },
        {
            "location": "/operation/faq/#how-to-add-additional-roles-to-oxtrust-and-change-permissions-for-existing-ones",
            "text": "The additional role requires the implementation of dynamic rules in Jboss SEAM and then uitlize them in oxTrust as the available  manager  and  user  roles are defined within the  securit.drl  hard-coded into oxTrust. The file checks for the  maanger  group membership and adds the role to the web context. This is currently out of the scope of support.    Warning  oxTrust is a tool for administrators and it must nto be used as a user facing application.",
            "title": "How to add additional roles to oxTrust and change permissions for existing ones"
        },
        {
            "location": "/operation/faq/#troubleshooting-guide",
            "text": "",
            "title": "Troubleshooting Guide"
        },
        {
            "location": "/operation/faq/#add-admin-for-gluu-server",
            "text": "Please follow these steps to restore your Gluu admin account (you will\nprobably need to substitute actual port, bind names and hostnames with\nones used by your installation):  1) Login into Gluu's chroot environment with the command below:  # service gluu-server login  2) Run this command:  #/opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu gluuGroupType=gluuManagerGroup 1.1  and remember the displayed dn of the Gluu Manager Group for future use.  3) Run this command:  # /opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu ou=people 1.1  and remember the displayed dn of the People ou for future use.  4) While staying in the chrooted environment, create the file ~/add_user.ldif  using your favorite text editor, and copy the\nfollowing lines to it:  dn: inum=tempadmin,ou=people,o=@!F9CC.D762.4778.1032!0001!2C72.BB87,o=gluu\nchangetype: add\nuid: tempadmin\nobjectClass: gluuPerson\nobjectClass: top\ngivenName: tempadmin\nsn: tempadmin\ninum: tempadmin\ngluuStatus: active\nuserPassword: 1q2w3e  Please note the string's segment marked with bold: you will have to\nsubstitute it with dn of your own People ou which you've acquired in\nstep 3).  5) Run this command:  # /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_user.ldif  This will create new user tempadmin with attributes provided via file\ncreated in step 4).  6) Now create file  add_2_group.ldif  in your home (\"~/\") directory and\ncopy the following lines to it:  dn: inum=@!F9CC.D762.4778.1032!0001!2C72.BB87!0003!60B7,ou=groups,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\nchangetype: modify\nadd: member\nmember: inum=tempadmin,ou=people,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu  Again, please note the strings' segment marked with bold: you will have\nto substitute contents of the \"dn:\" string with dn of your own Gluu\nManager Group which you've acquired in step 2), and for \"member:\" string\nyou will have to use the dn of tempadmin user (the one you already\nspecified in the 1st line of the file in step 4).  7) Run this command:  # /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_2_group.ldif  This will add tempadmin user to the IdP managers group and you can then\nlogin and assign another user to act as admin.",
            "title": "Add admin for Gluu server"
        },
        {
            "location": "/operation/faq/#connectivity-issues",
            "text": "",
            "title": "Connectivity Issues?"
        },
        {
            "location": "/operation/faq/#dns-names-not-resolving",
            "text": "It is possible that even after configuring everything there is a  DNS  resolve error in Gluu Server.\nThe reason is the  DNS  used inside the chroot container; the  dns  used by the container is the Google DNS servers \nand the  DNS  for the host OS is not used. Therefore to fix this issue:   Change the DNS inside the container by editing the  /etc/resolv.conf  file and adding the DNS used by your organization",
            "title": "DNS names not resolving!"
        },
        {
            "location": "/operation/faq/#forgot-the-admin-password",
            "text": "Gluu Server stores the admin password in the file  /install/community-edition-setup/setup.properties.last  under the\nproperty  ldapPass . Retrieve the data using the following command:  # grep ldapPass= /install/community-edition-setup/*.last   Warning  It is strongly recommended to remove the file from any production environment or encrypt the file",
            "title": "Forgot the admin password!"
        },
        {
            "location": "/operation/faq/#revert-authentication-method",
            "text": "It is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method.   Run the following command to collect the  inum  for the Gluu Server installation.   /opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory \nmanager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" \noxAuthenticationMode   Create a  LDIF  file with the contents below:   dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  As an example, we shall call this file  changeAuth.ldif .  Note:  Replace the  inum  from the example above with the  inum  of the Gluu Server from the  ldapsearch  command.   Replace the the authentication mode using  ldapmodify  command.   `/opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/changeAuth.ldif",
            "title": "Revert Authentication Method"
        },
        {
            "location": "/operation/faq/#no-admin-access-after-cache-refresh",
            "text": "Add the password for your admin account to  ~/.pw  and then use the commands below to add yourself as an admin.  # set this to your actual user name\nexport newgluuadmin='myusername'\n\n# this is the file that will hold the info to be imported\nexport ldiffile='addManagers.ldif'\n\n# run this and verify that the output is for your account\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.\n 3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nuid: myusername\ngivenName: John\nsn: Doe\ncn: John Doe  Now you can run these commands to make the file above:  head -n1 /opt/opendj/ldif/groups.ldif > $ldiffile\necho 'changetype: modify' >> $ldiffile\necho 'add: member' >> $ldiffile\necho \"member: $(/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn |grep -A1 dn |cut -d ' ' -f 2- | sed 'N;s/\\n//')\" >> $ldiffile  The resulting ldif will look like this:  dn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0003!60B7,ou=groups,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nchangetype: modify\nadd: member\nmember: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu  Once the ldif looks right, run this to grant your account admin rights in Gluu:  /opt/opendj/bin/ldapmodify -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -f addManagers.ldif  Log into the web interface and pick up where you left off :)",
            "title": "No admin access after Cache Refresh?"
        },
        {
            "location": "/operation/custom-loginpage/",
            "text": "Customize Login Page\n#\n\n\nGluu provides you with the feasibility to customize your login page and styles as per the \norganization standards.\n\n\nStyle Customizations\n#\n\n\nStatic style elements like CSS, JavaScript and images are packaged into\nseparate jar files. They are named \n\\<ProjectName>\n Static-\n\n\\<version>\n .jar, e.g. 'oxTrustStatic-1.3.0.Final.jar' and\n'oxAuthStatic-1.4.0x.Final.jar'. These files are added to the deployable\nwar during build time.\n\n\nPost deployment, the structure of the jar allows its context to be\naccessible from the Web context root. For example, the default values of\nthe CSS and JavaScript locations are \n\\<contextPath>/stylesheet\n and\n\n\\<contextPath>/js\n in the configuration file.\n\n\nIt is possible to unpack the contents of the said jar into a folder\nhosted by a web server, and change the default cssLocation, jsLocation\nand imgLocation attributes in the file \noxTrust.properties\n and/or in\n\noxauth-config.xml\n.\n\n\n\n\n\n\nCSS: The location is specified using the property \ncssLocation\n.\n\n\n\n\n\n\nJavaScript: The location is specified using the property \njsLocation\n.\n\n\n\n\n\n\nImages: The location is specified using the property \nimgLocation\n.\n\n\n\n\n\n\nFor example, in \noxTrust.properties\n it looks like that:\n\n\ncssLocation=https://idp.gluu.org/static/stylesheet\njsLocation=https://idp.gluu.org/static/js\nimgLocation=https://idp.gluu.org/static/img\n\n\n\n\nIn the file \noxauth-config.xml\n (as a children of \\<configuration>\nnode) it looks like that:\n\n\n<cssLocation>https://idp.gluu.org/static/stylesheet</cssLocation>\n<jsLocation>=https://idp.gluu.org/static/js<jsLocation>\n<imgLocation>=https://idp.gluu.org/static/img<imgLocation>\n\n\n\n\nPage Customizations\n#\n\n\nGluu server Community Edition makes editing public-facing pages easy\nwithour requiring the building of new war file. The files are in the\n\nxhtml\n format and it is recommended to take backups so that no \nimportant element is deleted from the pages.\n\n\nThe availbale pages are inside the two directories \n\n\n/opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-{random number}.dir\n\n\nopt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir\n.\n\n\noxAuth Pages:\n\n\n\n\nDefault login page: \n/opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/login.xhtml\n\n\nAuthorization page: \n/opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/authorize.xhtml\n\n\nError page: \n/opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/error.xhtml\n\n\nCustom authentication scripts: XHTML files in \n/opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/auth\n\n\n\n\noxTrust Pages:\n\n\n\n\nDefault registration page: \n/opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-6948849492655524434.dir/webapp/register.xhtml\n\n\n\n\nTo remove the Gluu copyright icon from your login page, \nnavigate to the file template.xhtml that is located under\n\n\n/opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-{random number}.dir/webapp/WEB-INF/incl/layout\n. \n\n\nThen, simply remove this snippet:\n\n\n<s:fragment rendered=\"#{not isLogin}\">\n    <div class=\"footer\">\n        <p>Copyright <a href=\"http://www.gluu.org\">Gluu</a> All rights reserved.</p>\n    </div>\n</s:fragment>\n\n\n\n\nCustomizing Pages\n#\n\n\nA new location is added inside the Gluu Server \nchroot\n to make the customizations easy. \nThe \n/opt/gluu/jetty/\n folder contains the \noxauth\n and \nidentity\n folder.\n\n\nThe structure can be illustrated as follows:\n\n\n   /opt/gluu/jetty/\n    |-- oxauth\n    |   |-- libs\n        `-- ext\n        |-- custom\n    |   `-- pages\n    |   `-- static\n    `-- identity\n            |-- libs\n            `-- ext\n            |-- custom\n            `-- pages\n            `-- static\n\n\n\n\nCustomized \nlibs\n are to be placed under \n\n\n/opt/gluu/jetty/identity/lib/ext\n\n\n/opt/gluu/jetty/oxauth/lib/ext\n\n\nCustom \nxhtml\n, \npage.xml\n, etc should be placed under \n\n\n/opt/gluu/jetty/identity/custom/pages\n\n\n/opt/gluu/jetty/oxauth/custom/pages\n\n\nTo place static resources like \njpg\n, \ncss\n, etc are placed under the below folder\n\n\n/opt/gluu/jetty/identity/custom/static\n\n\n/opt/gluu/jetty/oxauth/custom/static\n\n\nTo avoid collisions with static resources \nfrom war files, Gluu maps this folder to next URL: \n/{oxauth|identity}/ext/resources\n\n\n\n\nWarning\nLog into the Gluu Server chroot before working on the customized pages\n\n\n\n\n\n\n\n\nPlease make way to the default pages folder to copy the default file to the external resource folder.\n\n\n\n\n# cd /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/\n# cp login.xhtml /opt/gluu/jetty/oxauth/custom/pages \n\n\n\n\nThe example above shows that the \nlogin.xhtml\n file is copied to the external pages. \nThe changes can be made here and restarting jetty will display the changes \nmade to the specific customized page. The customizations must not be made by people \nwill little/no web-development knowledge.\n\n\nJetty Restart Policy\n#\n\n\nRestart \nidentity\n and \noxauth\n services for the following to be executed:\n\n\n# service identity stop\n# service identity start\n# service oxauth stop\n# service oxauth start\n\n\n\n\n\n\n\n\nDefault Page overriden with custom page as JSF may cache path to original version\n\n\n\n\n\n\nRemoval of page to replace context with empty page to invalidate it\n\n\n\n\n\n\nNew environment variable is introduces\n\n\n\n\n\n\nNote:\n There is a 10 second delay on page modification reload.",
            "title": "Customize Login Page"
        },
        {
            "location": "/operation/custom-loginpage/#customize-login-page",
            "text": "Gluu provides you with the feasibility to customize your login page and styles as per the \norganization standards.",
            "title": "Customize Login Page"
        },
        {
            "location": "/operation/custom-loginpage/#style-customizations",
            "text": "Static style elements like CSS, JavaScript and images are packaged into\nseparate jar files. They are named  \\<ProjectName>  Static- \\<version>  .jar, e.g. 'oxTrustStatic-1.3.0.Final.jar' and\n'oxAuthStatic-1.4.0x.Final.jar'. These files are added to the deployable\nwar during build time.  Post deployment, the structure of the jar allows its context to be\naccessible from the Web context root. For example, the default values of\nthe CSS and JavaScript locations are  \\<contextPath>/stylesheet  and \\<contextPath>/js  in the configuration file.  It is possible to unpack the contents of the said jar into a folder\nhosted by a web server, and change the default cssLocation, jsLocation\nand imgLocation attributes in the file  oxTrust.properties  and/or in oxauth-config.xml .    CSS: The location is specified using the property  cssLocation .    JavaScript: The location is specified using the property  jsLocation .    Images: The location is specified using the property  imgLocation .    For example, in  oxTrust.properties  it looks like that:  cssLocation=https://idp.gluu.org/static/stylesheet\njsLocation=https://idp.gluu.org/static/js\nimgLocation=https://idp.gluu.org/static/img  In the file  oxauth-config.xml  (as a children of \\<configuration>\nnode) it looks like that:  <cssLocation>https://idp.gluu.org/static/stylesheet</cssLocation>\n<jsLocation>=https://idp.gluu.org/static/js<jsLocation>\n<imgLocation>=https://idp.gluu.org/static/img<imgLocation>",
            "title": "Style Customizations"
        },
        {
            "location": "/operation/custom-loginpage/#page-customizations",
            "text": "Gluu server Community Edition makes editing public-facing pages easy\nwithour requiring the building of new war file. The files are in the xhtml  format and it is recommended to take backups so that no \nimportant element is deleted from the pages.  The availbale pages are inside the two directories   /opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-{random number}.dir  opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir .  oxAuth Pages:   Default login page:  /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/login.xhtml  Authorization page:  /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/authorize.xhtml  Error page:  /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/error.xhtml  Custom authentication scripts: XHTML files in  /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/auth   oxTrust Pages:   Default registration page:  /opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-6948849492655524434.dir/webapp/register.xhtml   To remove the Gluu copyright icon from your login page, \nnavigate to the file template.xhtml that is located under  /opt/jetty-9.3/temp/jetty-localhost-8082-identity.war-_identity-any-{random number}.dir/webapp/WEB-INF/incl/layout .   Then, simply remove this snippet:  <s:fragment rendered=\"#{not isLogin}\">\n    <div class=\"footer\">\n        <p>Copyright <a href=\"http://www.gluu.org\">Gluu</a> All rights reserved.</p>\n    </div>\n</s:fragment>",
            "title": "Page Customizations"
        },
        {
            "location": "/operation/custom-loginpage/#customizing-pages",
            "text": "A new location is added inside the Gluu Server  chroot  to make the customizations easy. \nThe  /opt/gluu/jetty/  folder contains the  oxauth  and  identity  folder.  The structure can be illustrated as follows:     /opt/gluu/jetty/\n    |-- oxauth\n    |   |-- libs\n        `-- ext\n        |-- custom\n    |   `-- pages\n    |   `-- static\n    `-- identity\n            |-- libs\n            `-- ext\n            |-- custom\n            `-- pages\n            `-- static  Customized  libs  are to be placed under   /opt/gluu/jetty/identity/lib/ext  /opt/gluu/jetty/oxauth/lib/ext  Custom  xhtml ,  page.xml , etc should be placed under   /opt/gluu/jetty/identity/custom/pages  /opt/gluu/jetty/oxauth/custom/pages  To place static resources like  jpg ,  css , etc are placed under the below folder  /opt/gluu/jetty/identity/custom/static  /opt/gluu/jetty/oxauth/custom/static  To avoid collisions with static resources \nfrom war files, Gluu maps this folder to next URL:  /{oxauth|identity}/ext/resources   Warning Log into the Gluu Server chroot before working on the customized pages     Please make way to the default pages folder to copy the default file to the external resource folder.   # cd /opt/jetty-9.3/temp/jetty-localhost-8081-oxauth.war-_oxauth-any-{random number}.dir/webapp/\n# cp login.xhtml /opt/gluu/jetty/oxauth/custom/pages   The example above shows that the  login.xhtml  file is copied to the external pages. \nThe changes can be made here and restarting jetty will display the changes \nmade to the specific customized page. The customizations must not be made by people \nwill little/no web-development knowledge.",
            "title": "Customizing Pages"
        },
        {
            "location": "/operation/custom-loginpage/#jetty-restart-policy",
            "text": "Restart  identity  and  oxauth  services for the following to be executed:  # service identity stop\n# service identity start\n# service oxauth stop\n# service oxauth start    Default Page overriden with custom page as JSF may cache path to original version    Removal of page to replace context with empty page to invalidate it    New environment variable is introduces    Note:  There is a 10 second delay on page modification reload.",
            "title": "Jetty Restart Policy"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/",
            "text": "How to Build oxTrust with Eclipse\n#\n\n\nOverview\n#\n\n\nThis section of the document discusses how to build oxTrust using Eclipse. This guide can be followed by developers and architects to code and customize oxTrust.\n\n\n\n\nNote\n\n\nthis installation procedure assumes you have a local VM running an instance of the Gluu Server CE. \n\n\n\n\nGluu CE installation is discussed in the \nInstallation Guide\n.\n\n\nTesting and Beta release can be found here: \nBeta Release\n\n\nSummary\n#\n\n\nHere is a quick summary: \n\n\nWe will be building latest branch \n\n\n# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo \n\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU \n\n# rpm \u2013import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU \n\n# yum clean all \n\n# yum install gluu-server-3.0.0 \n\n# /sbin/gluu-serverd-3.0.0 start \n\n# /sbin/gluu-serverd-3.0.0 enable \n\n# /sbin/gluu-serverd-3.0.0 login \n\n\n\n\n\n\nNote\n\n\nThis documentation is prepared based on CentOS, follow the appropriate installation guide based on your OS.\n\n\n\n\nGluu Server will run in chroot\n\n\n# cd /install/community-edition-setup/ \n\n# ./setup.py \n\n\n\n\nYou can mostly go with default values, however I suggest you make sure that oxTrust and LDAP servers \nare installed, and oxAuth is not. \n\n\nInstall oxAuth OAuth2 Authorization Server? [Yes] : no \n\n\nInstall oxTrust Admin UI? [Yes] : \n\n\nInstall LDAP Server? [Yes] : \n\n\nInstall Apache HTTPD Server [Yes] : no \n\n\nNow we need to collect critical configuration files and test data need for development environment: \n\n\n# mkdir /root/configs/ \n\n# /opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \u201ccn=directory manager,o=gluu\u201d -w \u201c<LDAP superuser password>\u201d -ZXT -b \u201co=gluu\u201d \u201cobjectclass=*\u201d > /root/configs/everything.ldif \n\n# cp /etc/gluu/conf/ox-ldap.properties /root/configs/ \n\n# cp /etc/gluu/conf/salt /root/configs/ \n\n# cp /opt/gluu/*.schema /root/configs/ \n\n# tar -czf /root/configs.tgz /root/configs \n\n\n\n\nNow leave chroot \n\n\n# logout \n\n\n\n\nroot directory of gluu chroot jail is \n/opt/gluu-server-3.0.0/\n \n\n\ndownload \n/opt/gluu-server-3.0.0/root/configs.tgz\n to your machine. \n\n\nDownload Software\n#\n\n\nDownload below mentioned required softwares. And this assumes you're using Windows 64-bit operating sytsem. \nIf you're using Mac or 32-bit Windows, adjust accordingly. \n\n\nJava\n#\n\n\nDownload \nJava 1.8\n,\nWhen you install it, make sure you install both the JDK and the JRE in \nc:\\java\n (not Program Files). \nEach of these software distributions should just be unzipped under \nC:\\java\\jdk1.8.0_112\n on my system. \n\n\nUpdates your JAVA_HOME environment variable to point to the folder of your jdk, for example \n\n\nEclipse\n#\n\n\nDownload \nEclipse IDE\n \nfor Java EE Developers \n\n\nMaven\n#\n\n\nDownload the latest \nMaven\nbinary zip \n\n\nJetty\n#\n\n\nDownload latest zip of \nJetty 9\n \n\n\nJython\n#\n\n\nDownload \nJython\n and install in \nc:\\jython2.7.0\n \n\n\nKeystore Explorer\n#\n\n\nThis is optional, but convenient. You can find it on \nSorceForge\n. \n\n\nConfigure Eclipse\n#\n\n\nInstall JBoss Tools Plugin\n#\n\n\nIn the Help / Eclipse Marketplace menu add \u201cJBoss Tools\u201d \n\n\n\n\nSet Perspective to Web Development\n#\n\n\nIn the upper right hand corner, select the Web Development perspective from the pop-up menu. \n  \n\n\nSet Java 1.8 as JDK\n#\n\n\nFrom the Window / Preferences menu, just check the Java / Installed JRE's tab and \nmake sure you see your 1.8 JDK (not JRE). \n\n\n\n\nAdd External Maven\n#\n\n\nUse the external maven you installed, not the built in maven. \nIn Window / Preferences, there is a section for Maven. \nUnder the Installations section, add the Maven folder you installed in \nc:\\java\n\n\n\n\nInstall Eclipse Jetty Launcher\n#\n\n\nYou should be able to install Jetty Launcher using either of the methods\n\n\nIf You want to run jetty in Eclipse, you can download and install \nJetty Launcher from \neclipse marketplace\n\n\nOr Jetty Launcher can be installed directly from eclipse marketplace \n\n\n\n\nTurn off Validation\n#\n\n\nDocument validation throws a lot of errors, and its better to see these as Warnings. \n\n\n\n\nImport Projects\n#\n\n\nFor each of these sections, you will have to use File / Import and then \nprovide the Github URL \n\n\n\n\nAnd then specify the github url \n\n\n\n\nYou can find this URL on github \n\n\n \n\n\n\n\noxTrust\n\n\noxAuth\n\n\noxCore\n\n\nSCIM Client\n\n\n\n\nAfter importing all the projects, it will take some time to download and compile all the code. \nWhen everything is done building, you can set up run configuration for oxTrust to launch using Jetty:\n\n\n\n\nSelect m2e-wtp webapp folder for deployment in Jetty \n\n\n\n\nAdd VM arguments to jetty to specify location of oxTrust configuration. \nYou can just create two empty directories for now. \n\n\nThose directories will contain gluu configuration and logs: \n\n\n\n\nChange jetty version in eclipse plugin to the one you downloaded earlier: \n\n\n\n\nAdd configuration listener to oxtrust-server/src/main/webapp/WEB-INF/web.xml: \n\n\n\n\n\n\n OxTrust styles are packaged in a separate project oxtrust-static. \nIn order for jetty to correcty serve those styles close the oxtrust-static \nproject in eclipse and by updating the project under \nMaven\n >\nUpdate Project\n on \noxtrust\n > \nserver project\n. \n  \n\n\n\n\nConfiguration\n#\n\n\nTo get your oxTrust running, you'll need to copy some file from your Gluu \nServer Community Edition (CE) installation. \n\n\nThis assumes you've deployed CE, and run \nsetup.py\n, and that its working. \nAdd conf subdirectory to the one you referenced in gluu.base VM argument (e.g. \nC:\\home\\gluu\\conf\\\n) \n\n\nFrom the configs.tgz you downloaded earlier extract these files: \n\n\n\n\nconfigs/ox-ldap.properties\n\n\nconfigs/salt\n\n\n\n\ninto the conf subdirectory you created (e.g. C:\\home\\gluu\\conf\\ox-ldap.properties) \n\n\nInstall OpenLDAP\n#\n\n\nWe use this distribution of \nOpenLdap\nhttp://www.userbooster.de/en/download/openldap-for-windows.aspx) for windows in this document: \n\n\nAny other build should work as well though. \n\n\nDuring the installation the only change required is to update ports to 1389 and 1636. \nIf ports are changed to some other values - corresponding changes should \nbe made in ox-ldap.properties and in everything.ldif before data import (or in database after import) \n\n\n\n\nConfigure OpenLDAP\n#\n\n\nExtract these files from the configs.tgz we created earlier: \n\n\n\n\nconfigs/slapd.conf\n\n\nconfigs/everything.ldif\n\n\nconfigs/user.schema\n\n\nconfigs/custom.schema\n\n\nconfigs/gluu.schema\n\n\n\n\nput schema files into some easy-reachable location (e.g. \nc:\\home\\gluu\\\n) \n\n\nNow update slapd.conf to resemble the \nconfigs/slapd.conf\n\n\n\n\n\n\nAdd ppolicy.schema to the include section \n\n\n\n\n\n\nAdd user.schema, custom.schema and gluu.schema to the include section \n\n\n\n\n\n\n\n\nLoad back_mdb.la, back_monitor.la and ppolicy.la modules \n\n\n\n\n\n\n\n\nDefine access policy \n\n\n\n\n\n\n\n\nDefine \no=gluu\n database  \n\n\n\n\n\n\n\n\nAlso create a data directory somewhere and update the location in \nslapd.conf\n\n\n\n\n\n\n\n\nDefine config database \n\n\n\n\n\n\n\n\nRemove memberOf mentions from gluu.schema (temporary) \n\n\n\n\n\n\n\n\n\n\n\n\nChange passwords in slapd.conf to the LDAP Admin password configured at gluu CE deployment. \n\n\n\n\nNote\n\n\nYou can use cleartext passwords in dev environment.\n\n\n\n\n\n\n\n\n\n\n\n\nVerify that slapd.conf is correct with \nslaptest.exe\n. Run slaptest exe installer using the paramater \n-u\n\n\n# cd C:\\OpenLDAP\n\n\n# slaptest.exe -u\n\n\n\n\n\n\n\n\nImport everything.ldif into the database using \nslapadd.exe\n\n\n\n\n\n\n\n\nRestart database.\n\n\n\n\n\n\nYou can use Ldap Admin \nhttp://www.ldapadmin.org/\n\nto verify that database is running and has been populated. \n\n\n\n\n\n\nIf \nhttp://www.userbooster.de/en/download/openldap-for-windows.aspx\n doesn't allow\n\nOpenLDAP service to run on port 1636 instead of default 636 and if you are having difficulties \nwith service you can stop windows service by using the command to run OpenLdap from commandline: \n\n\n\n\n\n\n\n\nUpdate oxtrust configuration in LDAP to use basic auth. You can use any ldap client, \nwe recommend ldap admin.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nYour inum may vary. You have to change \u201cauthMode\u201d:\u201c\u201d to \u201cauthMode\u201d:\u201cbasic\u201d \nwithin ou=oxtrust,ou=configuration,inum=\u2026,ou=applicanes,o=gluu in oxTrustConfApplication attribute \n\n\n\n\nTest\n#\n\n\nStart your server.. and point your browser at http://localhost:8080/",
            "title": "Build OxTrust with Eclipse"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#how-to-build-oxtrust-with-eclipse",
            "text": "",
            "title": "How to Build oxTrust with Eclipse"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#overview",
            "text": "This section of the document discusses how to build oxTrust using Eclipse. This guide can be followed by developers and architects to code and customize oxTrust.   Note  this installation procedure assumes you have a local VM running an instance of the Gluu Server CE.    Gluu CE installation is discussed in the  Installation Guide .  Testing and Beta release can be found here:  Beta Release",
            "title": "Overview"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#summary",
            "text": "Here is a quick summary:   We will be building latest branch   # wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo \n\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU \n\n# rpm \u2013import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU \n\n# yum clean all \n\n# yum install gluu-server-3.0.0 \n\n# /sbin/gluu-serverd-3.0.0 start \n\n# /sbin/gluu-serverd-3.0.0 enable \n\n# /sbin/gluu-serverd-3.0.0 login    Note  This documentation is prepared based on CentOS, follow the appropriate installation guide based on your OS.   Gluu Server will run in chroot  # cd /install/community-edition-setup/ \n\n# ./setup.py   You can mostly go with default values, however I suggest you make sure that oxTrust and LDAP servers \nare installed, and oxAuth is not.   Install oxAuth OAuth2 Authorization Server? [Yes] : no   Install oxTrust Admin UI? [Yes] :   Install LDAP Server? [Yes] :   Install Apache HTTPD Server [Yes] : no   Now we need to collect critical configuration files and test data need for development environment:   # mkdir /root/configs/ \n\n# /opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \u201ccn=directory manager,o=gluu\u201d -w \u201c<LDAP superuser password>\u201d -ZXT -b \u201co=gluu\u201d \u201cobjectclass=*\u201d > /root/configs/everything.ldif \n\n# cp /etc/gluu/conf/ox-ldap.properties /root/configs/ \n\n# cp /etc/gluu/conf/salt /root/configs/ \n\n# cp /opt/gluu/*.schema /root/configs/ \n\n# tar -czf /root/configs.tgz /root/configs   Now leave chroot   # logout   root directory of gluu chroot jail is  /opt/gluu-server-3.0.0/    download  /opt/gluu-server-3.0.0/root/configs.tgz  to your machine.",
            "title": "Summary"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#download-software",
            "text": "Download below mentioned required softwares. And this assumes you're using Windows 64-bit operating sytsem. \nIf you're using Mac or 32-bit Windows, adjust accordingly.",
            "title": "Download Software"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#java",
            "text": "Download  Java 1.8 ,\nWhen you install it, make sure you install both the JDK and the JRE in  c:\\java  (not Program Files). \nEach of these software distributions should just be unzipped under  C:\\java\\jdk1.8.0_112  on my system.   Updates your JAVA_HOME environment variable to point to the folder of your jdk, for example",
            "title": "Java"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#eclipse",
            "text": "Download  Eclipse IDE  \nfor Java EE Developers",
            "title": "Eclipse"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#maven",
            "text": "Download the latest  Maven binary zip",
            "title": "Maven"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#jetty",
            "text": "Download latest zip of  Jetty 9",
            "title": "Jetty"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#jython",
            "text": "Download  Jython  and install in  c:\\jython2.7.0",
            "title": "Jython"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#keystore-explorer",
            "text": "This is optional, but convenient. You can find it on  SorceForge .",
            "title": "Keystore Explorer"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#configure-eclipse",
            "text": "",
            "title": "Configure Eclipse"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#install-jboss-tools-plugin",
            "text": "In the Help / Eclipse Marketplace menu add \u201cJBoss Tools\u201d",
            "title": "Install JBoss Tools Plugin"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#set-perspective-to-web-development",
            "text": "In the upper right hand corner, select the Web Development perspective from the pop-up menu.",
            "title": "Set Perspective to Web Development"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#set-java-18-as-jdk",
            "text": "From the Window / Preferences menu, just check the Java / Installed JRE's tab and \nmake sure you see your 1.8 JDK (not JRE).",
            "title": "Set Java 1.8 as JDK"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#add-external-maven",
            "text": "Use the external maven you installed, not the built in maven. \nIn Window / Preferences, there is a section for Maven. \nUnder the Installations section, add the Maven folder you installed in  c:\\java",
            "title": "Add External Maven"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#install-eclipse-jetty-launcher",
            "text": "You should be able to install Jetty Launcher using either of the methods  If You want to run jetty in Eclipse, you can download and install \nJetty Launcher from  eclipse marketplace  Or Jetty Launcher can be installed directly from eclipse marketplace",
            "title": "Install Eclipse Jetty Launcher"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#turn-off-validation",
            "text": "Document validation throws a lot of errors, and its better to see these as Warnings.",
            "title": "Turn off Validation"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#import-projects",
            "text": "For each of these sections, you will have to use File / Import and then \nprovide the Github URL    And then specify the github url    You can find this URL on github       oxTrust  oxAuth  oxCore  SCIM Client   After importing all the projects, it will take some time to download and compile all the code. \nWhen everything is done building, you can set up run configuration for oxTrust to launch using Jetty:   Select m2e-wtp webapp folder for deployment in Jetty    Add VM arguments to jetty to specify location of oxTrust configuration. \nYou can just create two empty directories for now.   Those directories will contain gluu configuration and logs:    Change jetty version in eclipse plugin to the one you downloaded earlier:    Add configuration listener to oxtrust-server/src/main/webapp/WEB-INF/web.xml:      OxTrust styles are packaged in a separate project oxtrust-static. \nIn order for jetty to correcty serve those styles close the oxtrust-static \nproject in eclipse and by updating the project under  Maven  > Update Project  on  oxtrust  >  server project .",
            "title": "Import Projects"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#configuration",
            "text": "To get your oxTrust running, you'll need to copy some file from your Gluu \nServer Community Edition (CE) installation.   This assumes you've deployed CE, and run  setup.py , and that its working. \nAdd conf subdirectory to the one you referenced in gluu.base VM argument (e.g.  C:\\home\\gluu\\conf\\ )   From the configs.tgz you downloaded earlier extract these files:    configs/ox-ldap.properties  configs/salt   into the conf subdirectory you created (e.g. C:\\home\\gluu\\conf\\ox-ldap.properties)",
            "title": "Configuration"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#install-openldap",
            "text": "We use this distribution of  OpenLdap http://www.userbooster.de/en/download/openldap-for-windows.aspx) for windows in this document:   Any other build should work as well though.   During the installation the only change required is to update ports to 1389 and 1636. \nIf ports are changed to some other values - corresponding changes should \nbe made in ox-ldap.properties and in everything.ldif before data import (or in database after import)",
            "title": "Install OpenLDAP"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#configure-openldap",
            "text": "Extract these files from the configs.tgz we created earlier:    configs/slapd.conf  configs/everything.ldif  configs/user.schema  configs/custom.schema  configs/gluu.schema   put schema files into some easy-reachable location (e.g.  c:\\home\\gluu\\ )   Now update slapd.conf to resemble the  configs/slapd.conf    Add ppolicy.schema to the include section     Add user.schema, custom.schema and gluu.schema to the include section      Load back_mdb.la, back_monitor.la and ppolicy.la modules      Define access policy      Define  o=gluu  database       Also create a data directory somewhere and update the location in  slapd.conf     Define config database      Remove memberOf mentions from gluu.schema (temporary)        Change passwords in slapd.conf to the LDAP Admin password configured at gluu CE deployment.    Note  You can use cleartext passwords in dev environment.       Verify that slapd.conf is correct with  slaptest.exe . Run slaptest exe installer using the paramater  -u  # cd C:\\OpenLDAP  # slaptest.exe -u     Import everything.ldif into the database using  slapadd.exe     Restart database.    You can use Ldap Admin  http://www.ldapadmin.org/ \nto verify that database is running and has been populated.     If  http://www.userbooster.de/en/download/openldap-for-windows.aspx  doesn't allow \nOpenLDAP service to run on port 1636 instead of default 636 and if you are having difficulties \nwith service you can stop windows service by using the command to run OpenLdap from commandline:      Update oxtrust configuration in LDAP to use basic auth. You can use any ldap client, \nwe recommend ldap admin.      Note  Your inum may vary. You have to change \u201cauthMode\u201d:\u201c\u201d to \u201cauthMode\u201d:\u201cbasic\u201d \nwithin ou=oxtrust,ou=configuration,inum=\u2026,ou=applicanes,o=gluu in oxTrustConfApplication attribute",
            "title": "Configure OpenLDAP"
        },
        {
            "location": "/developer-guide/oxtrust-eclipse/#test",
            "text": "Start your server.. and point your browser at http://localhost:8080/",
            "title": "Test"
        }
    ]
}